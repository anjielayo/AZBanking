#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jun 17, 2021 10:58:46 AM WAT  platform: Windows NT
import shelve
import sys
import socket
import json
import threading
import time

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import ecommerce_support
# import myshop_support
# import checkout_support
import os.path

import mysql.connector
import re
from tkinter import messagebox
import random


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    # myshop_support.set_Tk_var()
    top = Toplevel1(root)
    ecommerce_support.init(root, top)
    # myshop_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    ecommerce_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        top.geometry("600x450+370+32")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(0, 0)  # changed the values so it won't be resizable
        top.title("Ecommerce Shop")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # ----------CREATE MYSQL CONNECTION-----------
        self.conn = mysql.connector.connect(
            host="localhost", user="root", password="", database="commercedb")
        self.cursor = self.conn.cursor()
        # --------------------------------------------

        # ----------CREATE TCP/IP SOCKET CONNECTION------
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.host = socket.gethostname()  # used to connect to server side/host
        self.port = 8000
        self.s.connect((self.host, self.port))
        # -------------------------------------------------

        # ----------------------BEGIN USER FRAME-------------------------------#

        self.user = tk.Frame(top)
        self.user.place(relx=0.013, rely=0.018,
                        relheight=0.967, relwidth=0.975)
        self.user.configure(relief='groove')
        self.user.configure(borderwidth="2")
        self.user.configure(relief="groove")
        self.user.configure(background="#d9d9d9")
        self.user.configure(highlightbackground="#d9d9d9")
        self.user.configure(highlightcolor="black")

        self.logout_button_user = tk.Button(
            self.user, command=self.user_logout)

        # relx = 0.838, rely = 0.046
        self.logout_button_user.place(
            relx=0.774, rely=0.808, height=24, width=77)
        self.logout_button_user.configure(activebackground="#ececec")
        self.logout_button_user.configure(activeforeground="#000000")
        self.logout_button_user.configure(background="#ff0000")
        self.logout_button_user.configure(cursor="arrow")
        self.logout_button_user.configure(disabledforeground="#a3a3a3")
        self.logout_button_user.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.logout_button_user.configure(foreground="#ffffff")
        self.logout_button_user.configure(highlightbackground="#d9d9d9")
        self.logout_button_user.configure(highlightcolor="black")
        self.logout_button_user.configure(pady="0")
        self.logout_button_user.configure(relief="groove")
        self.logout_button_user.configure(text='''Logout''')

        self.checkout_button_user = tk.Button(self.user, command=lambda: self.handletransaction_thread(None))
        # relx = 0.838, rely = 0.046
        self.checkout_button_user.place(relx=0.554, rely=0.808, height=24, width=77)
        self.checkout_button_user.configure(activebackground="#ececec")
        self.checkout_button_user.configure(activeforeground="#000000")
        self.checkout_button_user.configure(background="green")
        self.checkout_button_user.configure(cursor="arrow")
        self.checkout_button_user.configure(disabledforeground="#a3a3a3")
        self.checkout_button_user.configure(font="-family {Verdana} -size 9 -weight bold")
        self.checkout_button_user.configure(foreground="#ffffff")
        self.checkout_button_user.configure(highlightbackground="#d9d9d9")
        self.checkout_button_user.configure(highlightcolor="black")
        self.checkout_button_user.configure(pady="0")
        self.checkout_button_user.configure(relief="groove")
        self.checkout_button_user.configure(text='''Checkout''')
        # self.myshopframe = tk.Frame(top)
        # self.myshopframe.place(relx=0.033, rely=0.222, relheight=0.722
        #                        , relwidth=0.925)
        # self.myshopframe.configure(relief='groove')
        # self.myshopframe.configure(borderwidth="2")
        # self.myshopframe.configure(relief="groove")
        # self.myshopframe.configure(background="#d9d9d9")

        self.che51 = tk.BooleanVar()
        self.Bag = tk.Checkbutton(self.user)
        self.Bag.place(relx=0.667, rely=0.062, relheight=0.055, relwidth=0.105)
        self.Bag.configure(activebackground="#ececec")
        self.Bag.configure(activeforeground="#000000")
        self.Bag.configure(background="#d9d9d9")
        self.Bag.configure(disabledforeground="#a3a3a3")
        self.Bag.configure(foreground="#000000")
        self.Bag.configure(highlightbackground="#d9d9d9")
        self.Bag.configure(highlightcolor="black")
        self.Bag.configure(justify='left')
        self.Bag.configure(text='''Bag''')
        self.Bag.configure(variable=self.che51)

        self.che52 = tk.BooleanVar()
        self.Heels = tk.Checkbutton(self.user)
        self.Heels.place(relx=0.36, rely=0.062, relheight=0.055, relwidth=0.105)
        self.Heels.configure(activebackground="#ececec")
        self.Heels.configure(activeforeground="#000000")
        self.Heels.configure(background="#d9d9d9")
        self.Heels.configure(disabledforeground="#a3a3a3")
        self.Heels.configure(foreground="#000000")
        self.Heels.configure(highlightbackground="#d9d9d9")
        self.Heels.configure(highlightcolor="black")
        self.Heels.configure(justify='left')
        self.Heels.configure(text='''Heels''')
        self.Heels.configure(variable=self.che52)

        self.che53 = tk.BooleanVar()
        self.Blouse = tk.Checkbutton(self.user)
        self.Blouse.place(relx=0.085, rely=0.206, relheight=0.058
                          , relwidth=0.105)
        self.Blouse.configure(activebackground="#ececec")
        self.Blouse.configure(activeforeground="#000000")
        self.Blouse.configure(background="#d9d9d9")
        self.Blouse.configure(disabledforeground="#a3a3a3")
        self.Blouse.configure(foreground="#000000")
        self.Blouse.configure(highlightbackground="#d9d9d9")
        self.Blouse.configure(highlightcolor="black")
        self.Blouse.configure(justify='left')
        self.Blouse.configure(text='''Blouse''')
        self.Blouse.configure(variable=self.che53)

        self.che54 = tk.BooleanVar()
        self.Shirt = tk.Checkbutton(self.user)
        self.Shirt.place(relx=0.342, rely=0.209, relheight=0.055, relwidth=0.121)

        self.Shirt.configure(activebackground="#ececec")
        self.Shirt.configure(activeforeground="#000000")
        self.Shirt.configure(background="#d9d9d9")
        self.Shirt.configure(disabledforeground="#a3a3a3")
        self.Shirt.configure(foreground="#000000")
        self.Shirt.configure(highlightbackground="#d9d9d9")
        self.Shirt.configure(highlightcolor="black")
        self.Shirt.configure(justify='left')
        self.Shirt.configure(text='''Shirt''')
        self.Shirt.configure(variable=self.che54)

        self.che55 = tk.BooleanVar()
        self.Trousers = tk.Checkbutton(self.user)
        self.Trousers.place(relx=0.085, rely=0.345, relheight=0.058
                            , relwidth=0.141)
        self.Trousers.configure(activebackground="#ececec")
        self.Trousers.configure(activeforeground="#000000")
        self.Trousers.configure(background="#d9d9d9")
        self.Trousers.configure(disabledforeground="#a3a3a3")
        self.Trousers.configure(foreground="#000000")
        self.Trousers.configure(highlightbackground="#d9d9d9")
        self.Trousers.configure(highlightcolor="black")
        self.Trousers.configure(justify='left')
        self.Trousers.configure(text='''Trousers''')
        self.Trousers.configure(variable=self.che55)

        self.che56 = tk.BooleanVar()
        self.Jeans = tk.Checkbutton(self.user)
        self.Jeans.place(relx=0.085, rely=0.062, relheight=0.055, relwidth=0.105)
        self.Jeans.configure(activebackground="#ececec")
        self.Jeans.configure(activeforeground="#000000")
        self.Jeans.configure(background="#d9d9d9")
        self.Jeans.configure(disabledforeground="#a3a3a3")
        self.Jeans.configure(foreground="#000000")
        self.Jeans.configure(highlightbackground="#d9d9d9")
        self.Jeans.configure(highlightcolor="black")
        self.Jeans.configure(justify='left')
        self.Jeans.configure(text='''Jeans''')
        self.Jeans.configure(variable=self.che56)

        self.che57 = tk.BooleanVar()
        self.Skirt = tk.Checkbutton(self.user)
        self.Skirt.place(relx=0.667, rely=0.206, relheight=0.055, relwidth=0.105)

        self.Skirt.configure(activebackground="#ececec")
        self.Skirt.configure(activeforeground="#000000")
        self.Skirt.configure(background="#d9d9d9")
        self.Skirt.configure(disabledforeground="#a3a3a3")
        self.Skirt.configure(foreground="#000000")
        self.Skirt.configure(highlightbackground="#d9d9d9")
        self.Skirt.configure(highlightcolor="black")
        self.Skirt.configure(justify='left')
        self.Skirt.configure(text='''Skirt''')
        self.Skirt.configure(variable=self.che57)

        self.che58 = tk.BooleanVar()
        self.Sneakers = tk.Checkbutton(self.user)
        self.Sneakers.place(relx=0.36, rely=0.345, relheight=0.058
                            , relwidth=0.121)
        self.Sneakers.configure(activebackground="#ececec")
        self.Sneakers.configure(activeforeground="#000000")
        self.Sneakers.configure(background="#d9d9d9")
        self.Sneakers.configure(disabledforeground="#a3a3a3")
        self.Sneakers.configure(foreground="#000000")
        self.Sneakers.configure(highlightbackground="#d9d9d9")
        self.Sneakers.configure(highlightcolor="black")
        self.Sneakers.configure(justify='left')
        self.Sneakers.configure(text='''Sneakers''')
        self.Sneakers.configure(variable=self.che58)

        self.che59 = tk.BooleanVar()
        self.Socks = tk.Checkbutton(self.user)
        self.Socks.place(relx=0.667, rely=0.345, relheight=0.058, relwidth=0.121)

        self.Socks.configure(activebackground="#ececec")
        self.Socks.configure(activeforeground="#000000")
        self.Socks.configure(background="#d9d9d9")
        self.Socks.configure(disabledforeground="#a3a3a3")
        self.Socks.configure(foreground="#000000")
        self.Socks.configure(highlightbackground="#d9d9d9")
        self.Socks.configure(highlightcolor="black")
        self.Socks.configure(justify='left')
        self.Socks.configure(text='''Socks''')
        self.Socks.configure(variable=self.che59)

        self.calc_btn = tk.Button(self.user, command=self.calculate)
        self.calc_btn.place(relx=0.085, rely=0.508, height=24, width=77)
        self.calc_btn.configure(activebackground="#ececec")
        self.calc_btn.configure(activeforeground="#000000")
        self.calc_btn.configure(background="#1f14eb")
        self.calc_btn.configure(disabledforeground="#a3a3a3")
        self.calc_btn.configure(font="-family {Verdana} -size 9 -weight bold")
        self.calc_btn.configure(foreground="#ffffff")
        self.calc_btn.configure(highlightbackground="#d9d9d9")
        self.calc_btn.configure(highlightcolor="black")
        self.calc_btn.configure(pady="0")
        self.calc_btn.configure(text='''Calculate''')

        self.total_Entry = tk.Entry(self.user)
        self.total_Entry.place(relx=0.274, rely=0.658, height=20, relwidth=0.169)

        self.total_Entry.configure(background="white")
        self.total_Entry.configure(disabledforeground="#a3a3a3")
        self.total_Entry.configure(font="TkFixedFont")
        self.total_Entry.configure(foreground="#000000")
        self.total_Entry.configure(insertbackground="black")
        self.total_Entry.configure(justify="center")

        self.total_Label = tk.Label(self.user)
        self.total_Label.place(relx=0.085, rely=0.658, height=20, width=73)
        self.total_Label.configure(background="#d9d9d9")
        self.total_Label.configure(disabledforeground="#a3a3a3")
        self.total_Label.configure(font="-family {Segoe UI} -size 10")
        self.total_Label.configure(foreground="#000000")
        self.total_Label.configure(text='''Total:''')

        # self.head_label = tk.Label(self.user)
        # self.head_label.place(relx=0.083, rely=0.00, height=21, width=54)
        # self.head_label.configure(background="#d9d9d9")
        # self.head_label.configure(disabledforeground="#a3a3a3")
        # self.head_label.configure(foreground="#000000")
        # self.head_label.configure(text='''Shop''')

        # ----------------------END USER FRAME-------------------------------#

        # ----------------------BEGIN LOGIN FRAME-------------------------------#
        self.login = tk.Frame(top)
        self.login.place(relx=0.013, rely=0.018,
                         relheight=0.967, relwidth=0.975)

        self.login.configure(relief='groove')
        self.login.configure(borderwidth="2")
        self.login.configure(relief="groove")
        self.login.configure(background="#d9d9d9")
        self.login.configure(highlightbackground="#d9d9d9")
        self.login.configure(highlightcolor="black")

        self.home_btn_login = tk.Button(
            self.login, command=lambda: self.show_frame(self.home))
        self.home_btn_login.place(relx=0.667, rely=0.046, height=24, width=77)
        self.home_btn_login.configure(activebackground="#ececec")
        self.home_btn_login.configure(activeforeground="#000000")
        self.home_btn_login.configure(background="#2464db")
        self.home_btn_login.configure(cursor="arrow")
        self.home_btn_login.configure(disabledforeground="#a3a3a3")
        self.home_btn_login.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.home_btn_login.configure(foreground="#ffffff")
        self.home_btn_login.configure(highlightbackground="#d9d9d9")
        self.home_btn_login.configure(highlightcolor="black")
        self.home_btn_login.configure(pady="0")
        self.home_btn_login.configure(relief="groove")
        self.home_btn_login.configure(text='''Home''')

        self.signup_btn_login = tk.Button(
            self.login, command=lambda: self.show_frame(self.register))
        self.signup_btn_login.place(
            relx=0.838, rely=0.046, height=24, width=77)
        self.signup_btn_login.configure(activebackground="#ececec")
        self.signup_btn_login.configure(activeforeground="#000000")
        self.signup_btn_login.configure(background="#2464db")
        self.signup_btn_login.configure(disabledforeground="#a3a3a3")
        self.signup_btn_login.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signup_btn_login.configure(foreground="#ffffff")
        self.signup_btn_login.configure(highlightbackground="#d9d9d9")
        self.signup_btn_login.configure(highlightcolor="black")
        self.signup_btn_login.configure(pady="0")
        self.signup_btn_login.configure(relief="groove")
        self.signup_btn_login.configure(text='''Sign Up''')

        self.login_Labelframe1_login = tk.LabelFrame(self.login)
        self.login_Labelframe1_login.place(
            relx=0.051, rely=0.184, relheight=0.609, relwidth=0.906)
        self.login_Labelframe1_login.configure(relief='groove')
        self.login_Labelframe1_login.configure(foreground="black")
        self.login_Labelframe1_login.configure(text='''Login''')
        self.login_Labelframe1_login.configure(background="#d9d9d9")
        self.login_Labelframe1_login.configure(highlightbackground="#d9d9d9")
        self.login_Labelframe1_login.configure(highlightcolor="black")

        self.username_Label_login = tk.Label(self.login_Labelframe1_login)
        self.username_Label_login.place(
            relx=0.189, rely=0.238, height=19, width=80, bordermode='ignore')
        self.username_Label_login.configure(activebackground="#f9f9f9")
        self.username_Label_login.configure(activeforeground="black")
        self.username_Label_login.configure(background="#d9d9d9")
        self.username_Label_login.configure(disabledforeground="#a3a3a3")
        self.username_Label_login.configure(foreground="#000000")
        self.username_Label_login.configure(highlightbackground="#d9d9d9")
        self.username_Label_login.configure(highlightcolor="black")
        self.username_Label_login.configure(text='''Username''')

        self.username_Entry_login = tk.Entry(self.login_Labelframe1_login)
        self.username_Entry_login.place(
            relx=0.415, rely=0.238, height=20, relwidth=0.321, bordermode='ignore')
        self.username_Entry_login.configure(background="white")
        self.username_Entry_login.configure(disabledforeground="#a3a3a3")
        self.username_Entry_login.configure(font="TkFixedFont")
        self.username_Entry_login.configure(foreground="#000000")
        self.username_Entry_login.configure(highlightbackground="#d9d9d9")
        self.username_Entry_login.configure(highlightcolor="black")
        self.username_Entry_login.configure(insertbackground="black")
        self.username_Entry_login.configure(selectbackground="blue")
        self.username_Entry_login.configure(selectforeground="white")

        self.pass_Label_login = tk.Label(self.login_Labelframe1_login)
        self.pass_Label_login.place(
            relx=0.189, rely=0.442, height=19, width=80, bordermode='ignore')
        self.pass_Label_login.configure(activebackground="#f9f9f9")
        self.pass_Label_login.configure(activeforeground="black")
        self.pass_Label_login.configure(background="#d9d9d9")
        self.pass_Label_login.configure(disabledforeground="#a3a3a3")
        self.pass_Label_login.configure(foreground="#000000")
        self.pass_Label_login.configure(highlightbackground="#d9d9d9")
        self.pass_Label_login.configure(highlightcolor="black")
        self.pass_Label_login.configure(text='''Password''')

        self.pass_Entry_login_1 = tk.Entry(
            self.login_Labelframe1_login, show="*")
        self.pass_Entry_login_1.place(
            relx=0.415, rely=0.442, height=20, relwidth=0.321, bordermode='ignore')
        self.pass_Entry_login_1.configure(background="white")
        self.pass_Entry_login_1.configure(disabledforeground="#a3a3a3")
        self.pass_Entry_login_1.configure(font="TkFixedFont")
        self.pass_Entry_login_1.configure(foreground="#000000")
        self.pass_Entry_login_1.configure(highlightbackground="#d9d9d9")
        self.pass_Entry_login_1.configure(highlightcolor="black")
        self.pass_Entry_login_1.configure(insertbackground="black")
        self.pass_Entry_login_1.configure(selectbackground="blue")
        self.pass_Entry_login_1.configure(selectforeground="white")

        self.Button5_1 = tk.Button(
            self.login_Labelframe1_login, command=lambda: self.authentication_thread(None))
        self.Button5_1.place(relx=0.415, rely=0.645,
                             height=24, width=170, bordermode='ignore')
        self.Button5_1.configure(activebackground="#ececec")
        self.Button5_1.configure(activeforeground="#000000")
        self.Button5_1.configure(background="#2464db")
        self.Button5_1.configure(cursor="arrow")
        self.Button5_1.configure(disabledforeground="#a3a3a3")
        self.Button5_1.configure(font="-family {Verdana} -size 9 -weight bold")
        self.Button5_1.configure(foreground="#ffffff")
        self.Button5_1.configure(highlightbackground="#d9d9d9")
        self.Button5_1.configure(highlightcolor="black")
        self.Button5_1.configure(pady="0")
        self.Button5_1.configure(relief="groove")
        self.Button5_1.configure(text='''Login''')
        # ----------------------END LOGIN FRAME-------------------------------#

        # ----------------------BEGIN REGISTER FRAME-------------------------------#
        self.register = tk.Frame(top)
        self.register.place(relx=0.013, rely=0.018,
                            relheight=0.967, relwidth=0.975)
        self.register.configure(relief='groove')
        self.register.configure(borderwidth="2")
        self.register.configure(relief="groove")
        self.register.configure(background="#d9d9d9")
        self.register.configure(highlightbackground="#d9d9d9")
        self.register.configure(highlightcolor="black")

        self.home_btn_reg = tk.Button(
            self.register, command=lambda: self.show_frame(self.home))
        self.home_btn_reg.place(relx=0.65, rely=0.046, height=23, width=77)
        self.home_btn_reg.configure(activebackground="#ececec")
        self.home_btn_reg.configure(activeforeground="#000000")
        self.home_btn_reg.configure(background="#2464db")
        self.home_btn_reg.configure(cursor="arrow")
        self.home_btn_reg.configure(disabledforeground="#a3a3a3")
        self.home_btn_reg.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.home_btn_reg.configure(foreground="#ffffff")
        self.home_btn_reg.configure(highlightbackground="#d9d9d9")
        self.home_btn_reg.configure(highlightcolor="black")
        self.home_btn_reg.configure(pady="0")
        self.home_btn_reg.configure(relief="groove")
        self.home_btn_reg.configure(text='''Home''')

        self.login_btn_reg = tk.Button(
            self.register, command=lambda: self.show_frame(self.login))
        self.login_btn_reg.place(relx=0.821, rely=0.046, height=24, width=77)
        self.login_btn_reg.configure(activebackground="#ececec")
        self.login_btn_reg.configure(activeforeground="#000000")
        self.login_btn_reg.configure(background="#2464db")
        self.login_btn_reg.configure(cursor="arrow")
        self.login_btn_reg.configure(disabledforeground="#a3a3a3")
        self.login_btn_reg.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.login_btn_reg.configure(foreground="#ffffff")
        self.login_btn_reg.configure(highlightbackground="#d9d9d9")
        self.login_btn_reg.configure(highlightcolor="black")
        self.login_btn_reg.configure(pady="0")
        self.login_btn_reg.configure(relief="groove")
        self.login_btn_reg.configure(text='''Sign In''')

        self.userreg_Labelframe_reg = tk.LabelFrame(self.register)
        self.userreg_Labelframe_reg.place(
            relx=0.068, rely=0.161, relheight=0.77, relwidth=0.872)
        self.userreg_Labelframe_reg.configure(relief='groove')
        self.userreg_Labelframe_reg.configure(foreground="black")
        self.userreg_Labelframe_reg.configure(text='''User Registration''')
        self.userreg_Labelframe_reg.configure(background="#d9d9d9")
        self.userreg_Labelframe_reg.configure(highlightbackground="#d9d9d9")
        self.userreg_Labelframe_reg.configure(highlightcolor="black")

        self.username_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.username_label_reg.place(
            relx=0.137, rely=0.209, height=21, width=96, bordermode='ignore')
        self.username_label_reg.configure(activebackground="#f9f9f9")
        self.username_label_reg.configure(activeforeground="black")
        self.username_label_reg.configure(background="#d9d9d9")
        self.username_label_reg.configure(disabledforeground="#a3a3a3")
        self.username_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.username_label_reg.configure(foreground="#000000")
        self.username_label_reg.configure(highlightbackground="#d9d9d9")
        self.username_label_reg.configure(highlightcolor="black")
        self.username_label_reg.configure(text='''Username''')

        self.username_Entry1_reg = tk.Entry(self.userreg_Labelframe_reg)
        self.username_Entry1_reg.place(
            relx=0.412, rely=0.209, height=20, relwidth=0.431, bordermode='ignore')
        self.username_Entry1_reg.configure(background="white")
        self.username_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.username_Entry1_reg.configure(font="TkFixedFont")
        self.username_Entry1_reg.configure(foreground="#000000")
        self.username_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.username_Entry1_reg.configure(highlightcolor="black")
        self.username_Entry1_reg.configure(insertbackground="black")
        self.username_Entry1_reg.configure(selectbackground="blue")
        self.username_Entry1_reg.configure(selectforeground="white")

        self.email_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.email_label_reg.place(
            relx=0.137, rely=0.358, height=21, width=97, bordermode='ignore')
        self.email_label_reg.configure(activebackground="#f9f9f9")
        self.email_label_reg.configure(activeforeground="black")
        self.email_label_reg.configure(background="#d9d9d9")
        self.email_label_reg.configure(disabledforeground="#a3a3a3")
        self.email_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.email_label_reg.configure(foreground="#000000")
        self.email_label_reg.configure(highlightbackground="#d9d9d9")
        self.email_label_reg.configure(highlightcolor="black")
        self.email_label_reg.configure(text='''Email''')

        self.email_Entry1_reg = tk.Entry(self.userreg_Labelframe_reg)
        self.email_Entry1_reg.place(
            relx=0.412, rely=0.358, height=20, relwidth=0.431, bordermode='ignore')
        self.email_Entry1_reg.configure(background="white")
        self.email_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.email_Entry1_reg.configure(font="TkFixedFont")
        self.email_Entry1_reg.configure(foreground="#000000")
        self.email_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.email_Entry1_reg.configure(highlightcolor="black")
        self.email_Entry1_reg.configure(insertbackground="black")
        self.email_Entry1_reg.configure(selectbackground="blue")
        self.email_Entry1_reg.configure(selectforeground="white")

        self.pass_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.pass_label_reg.place(
            relx=0.137, rely=0.507, height=21, width=97, bordermode='ignore')
        self.pass_label_reg.configure(activebackground="#f9f9f9")
        self.pass_label_reg.configure(activeforeground="black")
        self.pass_label_reg.configure(background="#d9d9d9")
        self.pass_label_reg.configure(disabledforeground="#a3a3a3")
        self.pass_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.pass_label_reg.configure(foreground="#000000")
        self.pass_label_reg.configure(highlightbackground="#d9d9d9")
        self.pass_label_reg.configure(highlightcolor="black")
        self.pass_label_reg.configure(text='''Password''')

        self.pass_Entry1_reg = tk.Entry(self.userreg_Labelframe_reg, show="*")
        self.pass_Entry1_reg.place(
            relx=0.412, rely=0.507, height=20, relwidth=0.431, bordermode='ignore')
        self.pass_Entry1_reg.configure(background="white")
        self.pass_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.pass_Entry1_reg.configure(font="TkFixedFont")
        self.pass_Entry1_reg.configure(foreground="#000000")
        self.pass_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.pass_Entry1_reg.configure(highlightcolor="black")
        self.pass_Entry1_reg.configure(insertbackground="black")
        self.pass_Entry1_reg.configure(selectbackground="blue")
        self.pass_Entry1_reg.configure(selectforeground="white")

        self.confirm_label_reg = tk.Label(self.userreg_Labelframe_reg)
        self.confirm_label_reg.place(
            relx=0.137, rely=0.657, height=21, width=97, bordermode='ignore')
        self.confirm_label_reg.configure(activebackground="#f9f9f9")
        self.confirm_label_reg.configure(activeforeground="black")
        self.confirm_label_reg.configure(background="#d9d9d9")
        self.confirm_label_reg.configure(disabledforeground="#a3a3a3")
        self.confirm_label_reg.configure(font="-family {Segoe UI} -size 9")
        self.confirm_label_reg.configure(foreground="#000000")
        self.confirm_label_reg.configure(highlightbackground="#d9d9d9")
        self.confirm_label_reg.configure(highlightcolor="black")
        self.confirm_label_reg.configure(text='''Confirm Password''')

        self.confirm_Entry1_reg = tk.Entry(
            self.userreg_Labelframe_reg, show="*")
        self.confirm_Entry1_reg.place(
            relx=0.412, rely=0.657, height=20, relwidth=0.431, bordermode='ignore')
        self.confirm_Entry1_reg.configure(background="white")
        self.confirm_Entry1_reg.configure(disabledforeground="#a3a3a3")
        self.confirm_Entry1_reg.configure(font="TkFixedFont")
        self.confirm_Entry1_reg.configure(foreground="#000000")
        self.confirm_Entry1_reg.configure(highlightbackground="#d9d9d9")
        self.confirm_Entry1_reg.configure(highlightcolor="black")
        self.confirm_Entry1_reg.configure(insertbackground="black")
        self.confirm_Entry1_reg.configure(selectbackground="blue")
        self.confirm_Entry1_reg.configure(selectforeground="white")

        self.signup_btn_reg = tk.Button(
            self.userreg_Labelframe_reg, command=lambda: self.validation_thread(None))
        # instead of running the validate method, the validation_thread method is loaded which calls the validate
        # method in a thread. The validate_thread method creates copies of the validate method each time you click
        # the sign up button. This enables separate processes and allows multiple users to sign up at the same time
        # without locking the database.

        self.signup_btn_reg.place(
            relx=0.412, rely=0.806, height=23, width=220, bordermode='ignore')
        self.signup_btn_reg.configure(activebackground="#ececec")
        self.signup_btn_reg.configure(activeforeground="#000000")
        self.signup_btn_reg.configure(background="#2464db")
        self.signup_btn_reg.configure(cursor="arrow")
        self.signup_btn_reg.configure(disabledforeground="#a3a3a3")
        self.signup_btn_reg.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signup_btn_reg.configure(foreground="#ffffff")
        self.signup_btn_reg.configure(highlightbackground="#d9d9d9")
        self.signup_btn_reg.configure(highlightcolor="black")
        self.signup_btn_reg.configure(pady="0")
        self.signup_btn_reg.configure(relief="groove")
        self.signup_btn_reg.configure(text='''Sign Up''')
        # ----------------------END REGISTER FRAME-------------------------------#

        # ----------------------BEGIN HOME FRAME-------------------------------#
        self.home = tk.Frame(top)
        self.home.place(relx=0.013, rely=0.018,
                        relheight=0.967, relwidth=0.975)
        self.home.configure(relief='groove')
        self.home.configure(borderwidth="2")
        self.home.configure(relief="groove")
        self.home.configure(background="#d9d9d9")
        self.home.configure(highlightbackground="#d9d9d9")
        self.home.configure(highlightcolor="black")

        self.signin_btn_home = tk.Button(
            self.home, command=lambda: self.show_frame(self.login))
        self.signin_btn_home.place(relx=0.667, rely=0.023, height=24, width=77)
        self.signin_btn_home.configure(activebackground="#ececec")
        self.signin_btn_home.configure(activeforeground="#000000")
        self.signin_btn_home.configure(background="#2464db")
        self.signin_btn_home.configure(cursor="arrow")
        self.signin_btn_home.configure(disabledforeground="#a3a3a3")
        self.signin_btn_home.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signin_btn_home.configure(foreground="#ffffff")
        self.signin_btn_home.configure(highlightbackground="#d9d9d9")
        self.signin_btn_home.configure(highlightcolor="black")
        self.signin_btn_home.configure(pady="0")
        self.signin_btn_home.configure(relief="groove")
        self.signin_btn_home.configure(text='''Sign In''')

        self.signup_btn_home = tk.Button(
            self.home, command=lambda: self.show_frame(self.register))
        self.signup_btn_home.place(relx=0.838, rely=0.023, height=24, width=77)
        self.signup_btn_home.configure(activebackground="#ececec")
        self.signup_btn_home.configure(activeforeground="#000000")
        self.signup_btn_home.configure(background="#2464db")
        self.signup_btn_home.configure(cursor="arrow")
        self.signup_btn_home.configure(disabledforeground="#a3a3a3")
        self.signup_btn_home.configure(
            font="-family {Verdana} -size 9 -weight bold")
        self.signup_btn_home.configure(foreground="#ffffff")
        self.signup_btn_home.configure(highlightbackground="#d9d9d9")
        self.signup_btn_home.configure(highlightcolor="black")
        self.signup_btn_home.configure(pady="0")
        self.signup_btn_home.configure(relief="groove")
        self.signup_btn_home.configure(text='''Sign Up''')

        self.Label1_home = tk.Label(self.home)
        self.Label1_home.place(relx=0.017, rely=0.161, height=351, width=564)
        self.Label1_home.configure(activebackground="#f9f9f9")
        self.Label1_home.configure(activeforeground="black")
        self.Label1_home.configure(background="#d9d9d9")
        self.Label1_home.configure(disabledforeground="#a3a3a3")
        self.Label1_home.configure(foreground="#000000")
        self.Label1_home.configure(highlightbackground="#d9d9d9")
        self.Label1_home.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "img3.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1_home.configure(image=_img0)
        self.Label1_home.configure(text='''Label''')
        # ----------------------END HOME FRAME-------------------------------#

        # ---------------------START ADMIN FRAME-----------------------------#
        self.admin = tk.Frame(top)
        self.admin.place(relx=0.013, rely=0.018, relheight=0.967, relwidth=0.975)
        self.admin.configure(relief='groove')
        self.admin.configure(borderwidth="2")
        self.admin.configure(relief="groove")
        self.admin.configure(background="#ff8080")

        self.logout = tk.Button(self.admin, command=self.user_logout)
        self.logout.place(relx=0.821, rely=0.023, height=24, width=77)
        self.logout.configure(activebackground="#ececec")
        self.logout.configure(activeforeground="#000000")
        self.logout.configure(background="#ff8080")
        self.logout.configure(cursor="arrow")
        self.logout.configure(disabledforeground="#a3a3a3")
        self.logout.configure(font="-family {Verdana} -size 9 -weight bold")
        self.logout.configure(foreground="#ffffff")
        self.logout.configure(highlightbackground="#d9d9d9")
        self.logout.configure(highlightcolor="black")
        self.logout.configure(pady="0")
        self.logout.configure(relief="groove")
        self.logout.configure(text='''Logout''')

        self.Labelframe_admin = tk.LabelFrame(self.admin)
        self.Labelframe_admin.place(relx=0.017, rely=0.092, relheight=0.874
                                    , relwidth=0.957)
        self.Labelframe_admin.configure(relief='groove')
        self.Labelframe_admin.configure(foreground="black")
        self.Labelframe_admin.configure(text='''Enter your product and price   ''')
        self.Labelframe_admin.configure(background="#d9d9d9")

        self.product_entry_label = tk.Label(self.Labelframe_admin)
        self.product_entry_label.place(relx=0.103, rely=0.275, height=21, width=84
                                       , bordermode='ignore')
        self.product_entry_label.configure(background="#d9d9d9")
        self.product_entry_label.configure(disabledforeground="#a3a3a3")
        self.product_entry_label.configure(foreground="#000000")
        self.product_entry_label.configure(text='''Product''')

        self.product_entry = tk.Entry(self.Labelframe_admin)
        self.product_entry.place(relx=0.41, rely=0.275, height=20, relwidth=0.421
                                 , bordermode='ignore')
        self.product_entry.configure(background="white")
        self.product_entry.configure(disabledforeground="#a3a3a3")
        self.product_entry.configure(font="TkFixedFont")
        self.product_entry.configure(foreground="#000000")
        self.product_entry.configure(insertbackground="black")

        self.price_entry_label = tk.Label(self.Labelframe_admin)
        self.price_entry_label.place(relx=0.103, rely=0.441, height=21, width=84
                                     , bordermode='ignore')
        self.price_entry_label.configure(activebackground="#f9f9f9")
        self.price_entry_label.configure(activeforeground="black")
        self.price_entry_label.configure(background="#d9d9d9")
        self.price_entry_label.configure(disabledforeground="#a3a3a3")
        self.price_entry_label.configure(foreground="#000000")
        self.price_entry_label.configure(highlightbackground="#d9d9d9")
        self.price_entry_label.configure(highlightcolor="black")
        self.price_entry_label.configure(text='''Price''')

        self.price_entry = tk.Entry(self.Labelframe_admin)
        self.price_entry.place(relx=0.41, rely=0.441, height=20, relwidth=0.421
                               , bordermode='ignore')
        self.price_entry.configure(background="white")
        self.price_entry.configure(disabledforeground="#a3a3a3")
        self.price_entry.configure(font="TkFixedFont")
        self.price_entry.configure(foreground="#000000")
        self.price_entry.configure(highlightbackground="#d9d9d9")
        self.price_entry.configure(highlightcolor="black")
        self.price_entry.configure(insertbackground="black")
        self.price_entry.configure(selectbackground="blue")
        self.price_entry.configure(selectforeground="white")

        self.submit_product = tk.Button(self.Labelframe_admin, command=lambda: self.handleproduct_thread(None))
        self.submit_product.place(relx=0.41, rely=0.667, height=24, width=77
                                  , bordermode='ignore')
        self.submit_product.configure(activebackground="#ececec")
        self.submit_product.configure(activeforeground="#000000")
        self.submit_product.configure(background="#ff8080")
        self.submit_product.configure(cursor="arrow")
        self.submit_product.configure(disabledforeground="#a3a3a3")
        self.submit_product.configure(font="-family {Verdana} -size 9 -weight bold")
        self.submit_product.configure(foreground="#ffffff")
        self.submit_product.configure(highlightbackground="#d9d9d9")
        self.submit_product.configure(highlightcolor="black")
        self.submit_product.configure(pady="0")
        self.submit_product.configure(relief="groove")
        self.submit_product.configure(text='''Submit''')
        # self.product_entry = tk.Entry(self.admin)
        # self.product_entry.place(relx=0.103, rely=0.275, height=21, width=84
        #                       , bordermode='ignore')
        #
        # self.price_entry = tk.Entry(self.admin)
        # self.price_entry.place(relx=0.103, rely=0.391, height=21, width=84
        #                        , bordermode='ignore')
        #
        # self.product_button = tk.Button(self.admin, command=self.handle_product)
        # self.product_button.place(relx=0.41, rely=0.275, height=20, width=77,
        #                        bordermode='ignore')
        # self.product_button.configure(background="#ff8080")
        # self.product_button.configure(disabledforeground="#a3a3a3")
        # self.product_button.configure(font="TkFixedFont")
        # self.product_button.configure(foreground="#000000")
        # self.product_button.configure(text="Submit")
        # self.product_button.configure(insertbackground="black") ERROR
        # ---------------------END ADMIN FRAME-----------------------------#

        # ---------------------BEGIN CHECKOUT FRAME-----------------------------#
        self.Checkout = tk.Frame(top)
        self.Checkout.place(relx=0.013, rely=0.018, relheight=0.967
                            , relwidth=0.975)
        self.Checkout.configure(relief='groove')
        self.Checkout.configure(borderwidth="2")
        self.Checkout.configure(relief="groove")
        self.Checkout.configure(background="#d9d9d9")

        self.postpay_Labelframe1_checkout = tk.LabelFrame(self.Checkout)
        self.postpay_Labelframe1_checkout.place(relx=0.051, rely=0.161
                                                , relheight=0.77, relwidth=0.906)
        self.postpay_Labelframe1_checkout.configure(relief='groove')
        self.postpay_Labelframe1_checkout.configure(foreground="black")
        self.postpay_Labelframe1_checkout.configure(text='''Post Payment''')
        self.postpay_Labelframe1_checkout.configure(background="#d9d9d9")

        self.Listbox1_checkout = tk.Listbox(self.postpay_Labelframe1_checkout)
        self.Listbox1_checkout.place(relx=0.075, rely=0.09, relheight=0.603
                                     , relwidth=0.838, bordermode='ignore')
        self.Listbox1_checkout.configure(background="white")
        self.Listbox1_checkout.configure(disabledforeground="#a3a3a3")
        self.Listbox1_checkout.configure(font="-family {Verdana} -size 9")
        self.Listbox1_checkout.configure(foreground="#000000")

        self.post_btn_checkout = tk.Button(self.postpay_Labelframe1_checkout,
                                           command=self.post_transaction)
        self.post_btn_checkout.place(relx=0.34, rely=0.806, height=24
                                     , width=167, bordermode='ignore')
        self.post_btn_checkout.configure(activebackground="#ececec")
        self.post_btn_checkout.configure(activeforeground="#000000")
        self.post_btn_checkout.configure(background="green")
        self.post_btn_checkout.configure(cursor="arrow")
        self.post_btn_checkout.configure(disabledforeground="#a3a3a3")
        self.post_btn_checkout.configure(font="-family {Verdana} -size 9 -weight bold")
        self.post_btn_checkout.configure(foreground="#ffffff")
        self.post_btn_checkout.configure(highlightbackground="#d9d9d9")
        self.post_btn_checkout.configure(highlightcolor="black")
        self.post_btn_checkout.configure(pady="0")
        self.post_btn_checkout.configure(relief="groove")

        self.post_btn_checkout.configure(text='''Post''')

        self.logout_btn_checkout = tk.Button(self.Checkout, command=lambda: self.show_frame(self.home))
        self.logout_btn_checkout.place(relx=0.786, rely=0.069, height=24
                                       , width=97)
        self.logout_btn_checkout.configure(activebackground="#ececec")
        self.logout_btn_checkout.configure(activeforeground="#000000")
        self.logout_btn_checkout.configure(background="#ff0000")
        self.logout_btn_checkout.configure(disabledforeground="#a3a3a3")
        self.logout_btn_checkout.configure(font="-family {Verdana} -size 9 -weight bold")
        self.logout_btn_checkout.configure(foreground="#ffffff")
        self.logout_btn_checkout.configure(highlightbackground="#d9d9d9")
        self.logout_btn_checkout.configure(highlightcolor="black")
        self.logout_btn_checkout.configure(pady="0")
        self.logout_btn_checkout.configure(relief="groove")
        self.logout_btn_checkout.configure(text='''Logout''')
        # ---------------------END CHECKOUT FRAME-----------------------------#

        self.show_frame(self.home)  # allows home page to load first raised

    # ----------------------VALIDATE METHOD FOR REGISTER-------------------------------#
    def validate(self):
        time.sleep(0.2)  # adds a 0.2 second delay
        submitOk = True
        # getting the values put in the labels
        email = self.email_Entry1_reg.get()
        username = self.username_Entry1_reg.get()
        password = self.pass_Entry1_reg.get()
        confirm = self.confirm_Entry1_reg.get()

        email_pattern = '\\w+@{1}\\w+\\S'
        email_result = re.match(email_pattern, email)

        if not email_result:  # if email_result is false
            submitOk = False
            # title of the messagebox is Error while the content/message is Invalid email
            messagebox.showerror("Error", "Invalid email")

        username_pattern = "\\w{4,}\\S"
        username_result = re.match(username_pattern, username)

        if not username_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid username")

        password_pattern = '[\\d{1,}\\W{1,}[\\S]'
        password_result = re.match(password_pattern, password)

        if not password_result:
            submitOk = False
            messagebox.showerror("Error",
                                 "Password must contain at least 1 special character, 1 digit and 1 capital letter ")
        elif len(password) < 4:
            submitOk = False
            messagebox.showerror("Error", "Password must contain at least 8 characters!")

        elif password != confirm:
            submitOk = False
            messagebox.showerror("Error", "Password mismatch!")

        if submitOk is False:
            return False
        else:
            messagebox.showinfo("Success", "User Registered Successfully")
            user_id = random.randint(99999, 9999999)

            data = self.s.recv(1024)

            print("The data is {}".format(bytes.decode(data)))
            message = [user_id, username, email, password, "yes", "register"]

            self.s.send(str.encode(json.dumps(message)))
            # encodes the complex data type (list,dict,tuple) in form of json
            #  json.loads() is for decoding json, json.dumps() is for encoding json
            #  bytes.decode() is for decoding string, str.encode() is for encoding string
            data = self.s.recv(1024)
            # receive function receives data from client and stores it in a variable. 1024kb is what is
            # normally used
            message_json = bytes.decode(data)  # string decoding the received data
            #  json.loads() is for decoding json, json.dumps() is for encoding json
            #  bytes.decode() is for decoding string, str.encode() is for encoding string
            password_result = json.loads(message_json)  # json decoding the received data
            #  json.loads() is for decoding json, json.dumps() is for encoding json
            #  bytes.decode() is for decoding string, str.encode() is for encoding string
            print(password_result)
            # self.s.close()
            self.show_frame(self.login)
            # =============================================================================
            #             self.cursor.execute(
            #                 "INSERT INTO commerce_users (user_id,username,email,password,reg_status) VALUES('{}','{}','{}','{}','yes')".format(
            #                     user_id, username, email, password))
            #             self.cursor.execute("SELECT * FROM commerce_users")
            #             result = self.cursor.fetchall()
            #             for row in result:
            #                 print(row)
            #             self.conn.commit()
            #             self.conn.close()
            # =============================================================================

    # ----------------------AUTHENTICATE METHOD FOR LOGIN-------------------------------#
    def authenticate(self):
        time.sleep(0.2)
        username = self.username_Entry_login.get()
        password = self.pass_Entry_login_1.get()
        my_shelve = shelve.open("usershelf", flag="n")
        my_shelve['username'] = username
        # if username == "admin" and password == "admin":
        #     self.show_frame(self.admin)

        data = self.s.recv(1024)
        print(bytes.decode(data))
        message = [username, password, "login"]
        self.s.send(str.encode(json.dumps(message)))
        resp = self.s.recv(1024)
        result = json.loads(bytes.decode(resp))
        # self.cursor.execute(
        #     "SELECT * FROM commerce_users WHERE username='{}' AND password='{}'".format(username, password))
        # # fetching one row that comes in form of a list and storing in result
        # result = self.cursor.fetchall()

        print(result)

        # if result:
        #     messagebox.showinfo("", "Login Successful!")
        #     self.show_frame(self.user)
        # if username == "admin" and password == "admin":
        #     # messagebox.showinfo("", "Login Successful!")
        #     self.show_frame(self.admin)
        # else:
        #     messagebox.showerror("Error", "Invalid username or password")

        if not result:
            messagebox.showerror("Error", "Invalid username or password")
            Toplevel1(root)
            root.mainloop()
        else:
            if "admin" in result[0]:
                self.show_frame(self.admin)
            else:
                messagebox.showinfo("", "Login Successful!")
                self.show_frame(self.user)

        # self.conn.commit()
        # self.s.close()

    # ----------------------PRODUCT METHOD-------------------------------#
    def handle_product(self):
        product_entry = self.product_entry.get()
        price_entry = self.price_entry.get()
        product_entry = product_entry.lower()

        self.cursor.execute("INSERT INTO price (product, price) values ('{}','{}')".format(product_entry, price_entry))
        self.cursor.execute("SELECT * FROM price ORDER BY id DESC LIMIT 1")
        result = self.cursor.fetchall()

        if not result:
            messagebox.showerror("Error", "Unsuccessful Entry.")
        else:
            print(result)
            messagebox.showinfo("", "Product entered successfully.")
        self.conn.commit()

    # ----------------------RAISE FRAME METHOD-------------------------------#
    def show_frame(self, content):
        self.content = content
        self.content.tkraise()

    # ----------------------Calculate METHOD-------------------------------#
    def calculate(self):
        time.sleep(0.2)
        message = ["calculate"]
        my_shelve = shelve.open("usershelf")
        self.s.send(str.encode(json.dumps(message)))
        response = self.s.recv(1024)
        result = json.loads(bytes.decode(response))
        print(result)

        totalprice = 0

        if self.che51.get():
            totalprice += result['bag']
            my_shelve['bag'] = result['bag']
        if self.che52.get():
            totalprice += result['heels']
            my_shelve['heels'] = result['heels']

        if self.che53.get():
            totalprice += result['blouse']
            my_shelve['blouse'] = result['blouse']
        if self.che54.get():
            totalprice += result['shirt']
            my_shelve['shirt'] = result['shirt']
        if self.che55.get():
            totalprice += result['trousers']
            my_shelve['trousers'] = result['trousers']
        if self.che56.get():
            totalprice += result['jeans']
            my_shelve['jeans'] = result['jeans']
        if self.che57.get():
            totalprice += result['skirt']
            my_shelve['skirt'] = result['skirt']
        if self.che58.get():
            totalprice += result['sneakers']
            my_shelve['sneakers'] = result['sneakers']
        if self.che59.get():
            totalprice += result['socks']
            my_shelve['socks'] = result['socks']
        print(totalprice)

        my_shelve.close()
        self.total_Entry.delete(0, tk.END)
        self.total_Entry.insert(tk.END, totalprice)

    def user_logout(self):
        if messagebox.askquestion("Sign Out", "Do you want to Log out?") == "yes":
            Toplevel1(root)
            root.mainloop()

    # ----------------------Validation Thread METHOD-------------------------------#
    # validation_thread function loads validate function upon clicking register function. Allows multithreading
    def validation_thread(self, event):
        validate_thread = threading.Thread(target=self.validate)
        # calls the Thread class and it targets the validate
        # method (the one we use for validation of our user registration form)
        validate_thread.daemon = True
        # daemon is an underground process. Refers to threading operations that run underground.
        validate_thread.start()  # starts the validate_thread() method

    # ----------------------Authentication Thread METHOD-------------------------------#
    def authentication_thread(self, event):
        authenticate_thread = threading.Thread(target=self.authenticate)
        authenticate_thread.daemon = True
        authenticate_thread.start()

    # ----------------------Handle Product Thread METHOD-------------------------------#
    def handleproduct_thread(self, event):
        product_thread = threading.Thread(target=self.handle_product)
        product_thread.daemon = True
        product_thread.start()

    # ----------------------Handle Transaction Thread METHOD-------------------------------#
    def handletransaction_thread(self, event):
        transaction_thread = threading.Thread(target=self.get_transaction_info)
        transaction_thread.daemon = True
        transaction_thread.start()

    # def posttransaction_thread(self, event):
    #     post_thread = threading.Thread(target=self.post_transaction)
    #     post_thread.daemon = True
    #     post_thread.start()

    # ----------------------Get Transaction Info METHOD-------------------------------#
    def get_transaction_info(self):
        time.sleep(0.2)
        my_shelve = shelve.open("usershelf")
        # A “shelf” is a persistent, dictionary-like object. The shelf object defined in this module is
        # dictionary-like object which is persistently stored in a disk file. Only string data type can be used as
        # key in this special dictionary object, whereas any picklable object can serve as value.
        # the flag argument is like access modes for modules

        # for x in my_shelve:
        #     print(x)
        my_shelf = sorted(my_shelve.items())
        # items() displays a list of a given dictionary's (key, value) tuple pair.
        # The sorted() function returns a sorted list of the specified iterable object.
        # You can specify ascending or descending order.
        # Strings are sorted alphabetically, and numbers are sorted numerically.

        # print(my_shelve)
        newdicts = {}
        for item in my_shelf:
            newdicts[item[0]] = item[1]
        # print(newdicts)

        my_shelve.close()
        newdicts['transaction'] = "transaction"
        self.s.send(str.encode(json.dumps(newdicts)))
        result = self.s.recv(1024)
        response = json.loads(bytes.decode(result))
        print(response)
        if not response:
            messagebox.showerror("Error", "Error in Transaction")
        else:
            self.show_frame(self.Checkout)
            resp_keys = list(response.keys())
            resp_values = list(response.values())

            i = 0
            for k in resp_keys:
                self.Listbox1_checkout.insert(tk.END, f"{k}:{resp_values[i]}")
                i += 1

    def post_transaction(self):
        message = ["post"]
        self.s.send(str.encode(json.dumps(message)))
        result = self.s.recv(1024)
        response = bytes.decode(result)

        print(f"Result is {result}")
        if response == "failed":
            messagebox.showerror("Error", "Transaction was not posted!")
        elif response == "success":
            messagebox.showinfo("Success", "Transaction posted successfully.")


if __name__ == '__main__':
    vp_start_gui()
