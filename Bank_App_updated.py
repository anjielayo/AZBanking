#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Aug 05, 2021 03:22:38 PM WAT  platform: Windows NT
import re
import shelve
import socket
import sys
import threading
import time
from datetime import datetime
from tkinter import messagebox, filedialog
from tkinter.filedialog import asksaveasfile
from ftfy import fix_text
import mysql.connector
import socket
import json  # used to move data in complex forms such as lists and dictionaries
import random

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

from PIL import Image, ImageTk

import Bank_App_updated_support
import os.path


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global my_shelve
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = Az_Bank(root)
    Bank_App_updated_support.init(root, top)
    root.mainloop()


w = None


def create_Az_Bank(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Az_Bank(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Az_Bank(w)
    Bank_App_updated_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Az_Bank():
    global w
    w.destroy()
    w = None


class Az_Bank:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        # self.container = tk.Frame(top)
        # self.container.place(relx=0.348, rely=0.588, height=24, width=77)
        # self.current_frame = None

        top.geometry("600x480+339+37")
        top.minsize(120, 1)
        top.maxsize(1362, 741)
        top.resizable(0, 0)
        top.title("Az Bank App")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # ----------CREATE MYSQL CONNECTION-----------
        self.conn = mysql.connector.connect(
            host="localhost", user="root", password="", database="azbankdb")
        self.cursor = self.conn.cursor()
        # --------------------------------------------

        # ----------CREATE TCP/IP SOCKET CONNECTION------
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.host = socket.gethostname()  # used to connect to server side/host
        self.port = 8000
        self.s.connect((self.host, self.port))
        # -------------------------------------------------

        # ----------WELCOME FRAME---------------------------
        self.Welcome_Page = tk.Frame(top)
        self.Welcome_Page.place(relx=0.183, rely=0.042, relheight=0.885
                                , relwidth=0.575)
        self.Welcome_Page.configure(relief='groove')
        self.Welcome_Page.configure(borderwidth="2")
        self.Welcome_Page.configure(relief="groove")
        self.Welcome_Page.configure(background="#ffffff")
        self.Welcome_Page.configure(highlightbackground="#d9d9d9")
        self.Welcome_Page.configure(highlightcolor="black")

        self.Label1_home = tk.Label(self.Welcome_Page)
        self.Label1_home.place(relx=-0.01, rely=-0.01, relheight=1.1, relwidth=1.1)
        self.Label1_home.configure(activebackground="#f9f9f9")
        self.Label1_home.configure(activeforeground="black")
        self.Label1_home.configure(background="#d9d9d9")
        self.Label1_home.configure(disabledforeground="#a3a3a3")
        self.Label1_home.configure(foreground="#000000")
        self.Label1_home.configure(highlightbackground="#d9d9d9")
        self.Label1_home.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "option2.png")
        global _img100
        _img100 = ImageTk.PhotoImage(file=photo_location)
        self.Label1_home.configure(image=_img100)
        self.Label1_home.configure(text='''Label''')

        self.logo = tk.Label(self.Welcome_Page)
        self.logo.place(relx=0.345, rely=0.186, height=41, width=104)
        self.logo.configure(activebackground="#f9f9f9")
        self.logo.configure(activeforeground="black")
        self.logo.configure(background="#d9d9d9")
        self.logo.configure(disabledforeground="#a3a3a3")
        self.logo.configure(foreground="#000000")
        self.logo.configure(highlightbackground="#d9d9d9")
        self.logo.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img0
        _img0 = ImageTk.PhotoImage(file=photo_location)
        self.logo.configure(image=_img0)
        self.logo.configure(text='''Label''')

        self.Enter = tk.Button(self.Welcome_Page, command=lambda: self.show_frame(self.Home_Page))
        self.Enter.place(relx=0.287, rely=0.727, height=24, width=147)
        self.Enter.configure(activebackground="#ececec")
        self.Enter.configure(activeforeground="#000000")
        self.Enter.configure(background="#ff8000")
        self.Enter.configure(borderwidth="3")
        self.Enter.configure(disabledforeground="#a3a3a3")
        self.Enter.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Enter.configure(foreground="#ffffff")
        self.Enter.configure(highlightbackground="#d9d9d9")
        self.Enter.configure(highlightcolor="black")
        self.Enter.configure(pady="0")
        self.Enter.configure(text='''Enter Here''')

        self.staff = tk.Button(self.Welcome_Page, command=lambda: self.show_frame(self.Emp_frame))
        self.staff.place(relx=0.548, rely=0.927, height=24, width=147)
        self.staff.configure(activebackground="#ececec")
        self.staff.configure(activeforeground="#000000")
        self.staff.configure(background="#0080c0")
        self.staff.configure(disabledforeground="#a3a3a3")
        self.staff.configure(font="-family {Segoe UI} -size 10")
        self.staff.configure(foreground="#ffffff")
        self.staff.configure(highlightbackground="#d9d9d9")
        self.staff.configure(highlightcolor="black")
        self.staff.configure(pady="0")
        self.staff.configure(text='''Staff? Sign In here.''')

        self.headingLabel_welcome = tk.Label(self.Welcome_Page)
        self.headingLabel_welcome.place(relx=0.174, rely=0.351, height=41
                                        , width=232)
        self.headingLabel_welcome.configure(background="#ffffff")
        self.headingLabel_welcome.configure(cursor="arrow")
        self.headingLabel_welcome.configure(disabledforeground="#a3a3a3")
        self.headingLabel_welcome.configure(font="-family {Verdana} -size 15 -weight bold")
        self.headingLabel_welcome.configure(foreground="#000000")
        self.headingLabel_welcome.configure(text='''Welcome to AZ Bank''')

        self.mottolabel_welcome = tk.Label(self.Welcome_Page)
        self.mottolabel_welcome.place(relx=0.258, rely=0.492, height=21
                                      , width=183)
        self.mottolabel_welcome.configure(activebackground="#f9f9f9")
        self.mottolabel_welcome.configure(activeforeground="black")
        self.mottolabel_welcome.configure(background="#ffffff")
        self.mottolabel_welcome.configure(disabledforeground="#a3a3a3")
        self.mottolabel_welcome.configure(font="-family {Verdana} -size 9")
        self.mottolabel_welcome.configure(foreground="#000000")
        self.mottolabel_welcome.configure(highlightbackground="#d9d9d9")
        self.mottolabel_welcome.configure(highlightcolor="black")
        self.mottolabel_welcome.configure(text='''Home of convenient banking.''')

        # ----------HOME FRAME---------------------------
        self.Home_Page = tk.Frame(top)
        self.Home_Page.place(relx=0.183, rely=0.042, relheight=0.885
                             , relwidth=0.575)
        self.Home_Page.configure(relief='groove')
        self.Home_Page.configure(borderwidth="2")
        self.Home_Page.configure(relief="groove")
        self.Home_Page.configure(background="#d9d9d9")
        self.Home_Page.configure(highlightbackground="#d9d9d9")
        self.Home_Page.configure(highlightcolor="black")

        self.hp_logo = tk.Label(self.Home_Page)
        self.hp_logo.place(relx=0.319, rely=0.024, height=50, width=104)
        self.hp_logo.configure(activebackground="#f9f9f9")
        self.hp_logo.configure(activeforeground="black")
        self.hp_logo.configure(background="#d9d9d9")
        self.hp_logo.configure(disabledforeground="#a3a3a3")
        self.hp_logo.configure(foreground="#000000")
        self.hp_logo.configure(highlightbackground="#d9d9d9")
        self.hp_logo.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img1
        _img1 = ImageTk.PhotoImage(file=photo_location)
        self.hp_logo.configure(image=_img1)
        self.hp_logo.configure(text='''Label''')

        self.hp_home = tk.Button(self.Home_Page, command=lambda: self.show_frame(self.Welcome_Page))
        self.hp_home.place(relx=0.145, rely=0.153, height=24, width=117)
        self.hp_home.configure(activebackground="#ececec")
        self.hp_home.configure(activeforeground="#000000")
        self.hp_home.configure(background="#808000")
        self.hp_home.configure(disabledforeground="#a3a3a3")
        self.hp_home.configure(font="-family {Verdana} -size 10 -weight bold")
        self.hp_home.configure(foreground="#ffffff")
        self.hp_home.configure(highlightbackground="#d9d9d9")
        self.hp_home.configure(highlightcolor="black")
        self.hp_home.configure(pady="0")
        self.hp_home.configure(text='''Home''')

        self.hp_register = tk.Button(self.Home_Page, command=lambda: self.show_frame(self.Disclaimer_frame))
        self.hp_register.place(relx=0.464, rely=0.153, height=24, width=117)
        self.hp_register.configure(activebackground="#ececec")
        self.hp_register.configure(activeforeground="#000000")
        self.hp_register.configure(background="#804040")
        self.hp_register.configure(disabledforeground="#a3a3a3")
        self.hp_register.configure(font="-family {Verdana} -size 10 -weight bold")
        self.hp_register.configure(foreground="#ffffff")
        self.hp_register.configure(highlightbackground="#d9d9d9")
        self.hp_register.configure(highlightcolor="black")
        self.hp_register.configure(pady="0")
        self.hp_register.configure(text='''Register''')

        self.hp_login = tk.Label(self.Home_Page)
        self.hp_login.place(relx=0.046, rely=0.275, height=21, width=120)
        self.hp_login.configure(activebackground="#f9f9f9")
        self.hp_login.configure(activeforeground="black")
        self.hp_login.configure(background="#d9d9d9")
        self.hp_login.configure(disabledforeground="#a3a3a3")
        self.hp_login.configure(foreground="#000000")
        self.hp_login.configure(highlightbackground="#d9d9d9")
        self.hp_login.configure(highlightcolor="black")
        self.hp_login.configure(text='''Account No.*''')

        self.hp_login_entry = tk.Entry(self.Home_Page)
        self.hp_login_entry.place(relx=0.116, rely=0.348, height=20
                                  , relwidth=0.707)
        self.hp_login_entry.configure(background="white")
        self.hp_login_entry.configure(cursor="arrow")
        self.hp_login_entry.configure(disabledforeground="#a3a3a3")
        self.hp_login_entry.configure(font="TkFixedFont")
        self.hp_login_entry.configure(foreground="#000000")
        self.hp_login_entry.configure(highlightbackground="#d9d9d9")
        self.hp_login_entry.configure(highlightcolor="black")
        self.hp_login_entry.configure(insertbackground="black")
        self.hp_login_entry.configure(selectbackground="blue")
        self.hp_login_entry.configure(selectforeground="white")

        self.hp_password = tk.Label(self.Home_Page)
        self.hp_password.place(relx=0.087, rely=0.438, height=20, width=74)
        self.hp_password.configure(activebackground="#f9f9f9")
        self.hp_password.configure(activeforeground="black")
        self.hp_password.configure(background="#d9d9d9")
        self.hp_password.configure(disabledforeground="#a3a3a3")
        self.hp_password.configure(foreground="#000000")
        self.hp_password.configure(highlightbackground="#d9d9d9")
        self.hp_password.configure(highlightcolor="black")
        self.hp_password.configure(text='''Password*''')

        self.hp_password_entry = tk.Entry(self.Home_Page, show="*")
        self.hp_password_entry.place(relx=0.116, rely=0.506, height=20
                                     , relwidth=0.707)
        self.hp_password_entry.configure(background="white")
        self.hp_password_entry.configure(cursor="arrow")
        self.hp_password_entry.configure(disabledforeground="#a3a3a3")
        self.hp_password_entry.configure(font="TkFixedFont")
        self.hp_password_entry.configure(foreground="#000000")
        self.hp_password_entry.configure(highlightbackground="#d9d9d9")
        self.hp_password_entry.configure(highlightcolor="black")
        self.hp_password_entry.configure(insertbackground="black")
        self.hp_password_entry.configure(selectbackground="blue")
        self.hp_password_entry.configure(selectforeground="white")
        self.hp_password_entry.configure(show="*")

        self.hp_sign_in_main = tk.Button(self.Home_Page, command=lambda: self.userlogin_thread(None))
        self.hp_sign_in_main.place(relx=0.116, rely=0.621, height=24, width=97)
        self.hp_sign_in_main.configure(activebackground="#ececec")
        self.hp_sign_in_main.configure(activeforeground="#000000")
        self.hp_sign_in_main.configure(background="#808040")
        self.hp_sign_in_main.configure(cursor="arrow")
        self.hp_sign_in_main.configure(disabledforeground="#a3a3a3")
        self.hp_sign_in_main.configure(font="-family {Verdana} -size 10 -weight bold")
        self.hp_sign_in_main.configure(foreground="#ffffff")
        self.hp_sign_in_main.configure(highlightbackground="#d9d9d9")
        self.hp_sign_in_main.configure(highlightcolor="black")
        self.hp_sign_in_main.configure(pady="0")
        self.hp_sign_in_main.configure(text='''Sign In''')

        # self.hp_forgot_psw = tk.Button(self.Home_Page)
        # self.hp_forgot_psw.place(relx=0.435, rely=0.621, height=24, width=137)
        # self.hp_forgot_psw.configure(activebackground="#ececec")
        # self.hp_forgot_psw.configure(activeforeground="#000000")
        # self.hp_forgot_psw.configure(background="#808040")
        # self.hp_forgot_psw.configure(cursor="arrow")
        # self.hp_forgot_psw.configure(disabledforeground="#a3a3a3")
        # self.hp_forgot_psw.configure(font="-family {Verdana} -size 9 -weight bold")
        # self.hp_forgot_psw.configure(foreground="#ffffff")
        # self.hp_forgot_psw.configure(highlightbackground="#d9d9d9")
        # self.hp_forgot_psw.configure(highlightcolor="black")
        # self.hp_forgot_psw.configure(pady="0")
        # self.hp_forgot_psw.configure(text='''Forgot Password ?''')

        self.Quick_transfer = tk.Button(self.Home_Page, command=lambda: self.show_frame(self.quickTransfer))
        self.Quick_transfer.place(relx=0.11, rely=0.805, height=24, width=80)
        self.Quick_transfer.configure(activebackground="#ececec")
        self.Quick_transfer.configure(activeforeground="#000000")
        self.Quick_transfer.configure(background="#c0c0c0")
        self.Quick_transfer.configure(cursor="arrow")
        self.Quick_transfer.configure(relief="raised")
        self.Quick_transfer.configure(disabledforeground="#a3a3a3")
        self.Quick_transfer.configure(font="-family {Segoe UI} -size 8")
        self.Quick_transfer.configure(foreground="#000000")
        self.Quick_transfer.configure(highlightbackground="#d9d9d9")
        self.Quick_transfer.configure(highlightcolor="black")
        self.Quick_transfer.configure(pady="0")
        self.Quick_transfer.configure(text='''Quick Transfer''')

        self.Quick_Airtime = tk.Button(self.Home_Page, command=lambda: self.show_frame(self.quickAirtime))
        self.Quick_Airtime.place(relx=0.36, rely=0.805, height=24, width=80)
        self.Quick_Airtime.configure(activebackground="#ececec")
        self.Quick_Airtime.configure(activeforeground="#000000")
        self.Quick_Airtime.configure(background="#c0c0c0")
        self.Quick_Airtime.configure(cursor="arrow")
        self.Quick_Airtime.configure(relief="raised")
        self.Quick_Airtime.configure(disabledforeground="#a3a3a3")
        self.Quick_Airtime.configure(font="-family {Segoe UI} -size 8")
        self.Quick_Airtime.configure(foreground="#000000")
        self.Quick_Airtime.configure(highlightbackground="#d9d9d9")
        self.Quick_Airtime.configure(highlightcolor="black")
        self.Quick_Airtime.configure(pady="0")
        self.Quick_Airtime.configure(text='''Quick Airtime''')

        self.Quick_Bills = tk.Button(self.Home_Page, command=lambda: self.show_frame(self.quickBILLS_PAYMENT_Frame))
        self.Quick_Bills.place(relx=0.61, rely=0.805, height=24, width=80)
        self.Quick_Bills.configure(activebackground="#ececec")
        self.Quick_Bills.configure(activeforeground="#000000")
        self.Quick_Bills.configure(background="#c0c0c0")
        self.Quick_Bills.configure(cursor="arrow")
        self.Quick_Bills.configure(relief="raised")
        self.Quick_Bills.configure(disabledforeground="#a3a3a3")
        self.Quick_Bills.configure(font="-family {Segoe UI} -size 8")
        self.Quick_Bills.configure(foreground="#000000")
        self.Quick_Bills.configure(highlightbackground="#d9d9d9")
        self.Quick_Bills.configure(highlightcolor="black")
        self.Quick_Bills.configure(pady="0")
        self.Quick_Bills.configure(text='''Quick Bills''')

        # self.statement = tk.Button(self.Home_Page)
        # self.statement.place(relx=0.29, rely=0.805, height=24, width=67)
        # self.statement.configure(activebackground="#ececec")
        # self.statement.configure(activeforeground="#000000")
        # self.statement.configure(background="#c0c0c0")
        # self.statement.configure(cursor="arrow")
        # self.statement.configure(disabledforeground="#a3a3a3")
        # self.statement.configure(font="-family {Segoe UI} -size 6")
        # self.statement.configure(foreground="#000000")
        # self.statement.configure(highlightbackground="#d9d9d9")
        # self.statement.configure(highlightcolor="black")
        # self.statement.configure(pady="0")
        # self.statement.configure(text='''Acc. Statement''')

        # ----------DISCLAIMER FRAME---------------------------
        self.Disclaimer_frame = tk.Frame(top)
        self.Disclaimer_frame.place(relx=0.183, rely=0.042, relheight=0.885
                                    , relwidth=0.575)
        self.Disclaimer_frame.configure(relief='groove')
        self.Disclaimer_frame.configure(borderwidth="2")
        self.Disclaimer_frame.configure(relief="groove")
        self.Disclaimer_frame.configure(background="#d9d9d9")
        self.Disclaimer_frame.configure(highlightbackground="#d9d9d9")
        self.Disclaimer_frame.configure(highlightcolor="black")

        self.Disagree = tk.Button(self.Disclaimer_frame, command=lambda: self.show_frame(self.Home_Page))
        self.Disagree.place(relx=0.09, rely=0.92, height=24, width=127)
        self.Disagree.configure(activebackground="#ececec")
        self.Disagree.configure(activeforeground="#000000")
        self.Disagree.configure(background="#c0c0c0")
        self.Disagree.configure(disabledforeground="#a3a3a3")
        self.Disagree.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Disagree.configure(foreground="#000000")
        self.Disagree.configure(highlightbackground="#d9d9d9")
        self.Disagree.configure(highlightcolor="black")
        self.Disagree.configure(pady="0")
        self.Disagree.configure(text='''I DISAGREE''')

        self.Agree = tk.Button(self.Disclaimer_frame, command=lambda: self.show_frame(self.Registration))
        self.Agree.place(relx=0.507, rely=0.92, height=24, width=127)
        self.Agree.configure(activebackground="#ececec")
        self.Agree.configure(activeforeground="#000000")
        self.Agree.configure(background="#808040")
        self.Agree.configure(disabledforeground="#a3a3a3")
        self.Agree.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Agree.configure(foreground="#000000")
        self.Agree.configure(highlightbackground="#d9d9d9")
        self.Agree.configure(highlightcolor="black")
        self.Agree.configure(pady="0")
        self.Agree.configure(text='''I AGREE''')

        self.Disclaimer = tk.Label(self.Disclaimer_frame)
        self.Disclaimer.place(relx=0.046, rely=0.024, height=372, width=313)
        self.Disclaimer.configure(activebackground="#f9f9f9")
        self.Disclaimer.configure(activeforeground="black")
        self.Disclaimer.configure(background="#c0c0c0")
        self.Disclaimer.configure(disabledforeground="#a3a3a3")
        self.Disclaimer.configure(foreground="#000000")
        self.Disclaimer.configure(highlightbackground="#d9d9d9")
        self.Disclaimer.configure(highlightcolor="black")
        self.Disclaimer.configure(relief="raised")
        self.Disclaimer.configure(text='''Terms and Condition for AZ Mobile banking APP

You should read these terms and conditions before downloading the AZ mobile banking Apps. 

I hereby authorize and request Az Bank Nigeria, the provision of mobile application service and the issuance and delivery of the password. In addition to the existing terms and conditions attached to this service. 

I understand that my login credentials and authentication devices can be used across all mobile and internet banking applications provided by Az bank, hence thebank will not be liable for electronic transactions on any of its channels that were possible by authorized Az to your login credentials and security devices. 

The bank will not be held liable for whatsoever issues that might occur as a result of installation of this application.''')
        self.Disclaimer.configure(wraplength="300")

        # ----------REGISTRATION FRAME FOR TOTALLY NEW USER---------------------------
        self.Registration = tk.Frame(top)
        self.Registration.place(relx=0.183, rely=0.042, relheight=0.885
                                , relwidth=0.575)
        self.Registration.configure(relief='groove')
        self.Registration.configure(borderwidth="2")
        self.Registration.configure(relief="groove")
        self.Registration.configure(background="#d9d9d9")
        self.Registration.configure(highlightbackground="#d9d9d9")
        self.Registration.configure(highlightcolor="black")

        self.logo_reg = tk.Label(self.Registration)
        self.logo_reg.place(relx=0.279, rely=0.014, height=50, width=104)
        self.logo_reg.configure(activebackground="#f9f9f9")
        self.logo_reg.configure(activeforeground="black")
        self.logo_reg.configure(background="#d9d9d9")
        self.logo_reg.configure(disabledforeground="#a3a3a3")
        self.logo_reg.configure(foreground="#000000")
        self.logo_reg.configure(highlightbackground="#d9d9d9")
        self.logo_reg.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img2
        _img2 = ImageTk.PhotoImage(file=photo_location)
        self.logo_reg.configure(image=_img2)
        self.logo_reg.configure(text='''Label''')

        self.Sign_in_reg = tk.Button(self.Registration)
        self.Sign_in_reg.place(relx=0.078, rely=0.139, height=24, width=127)
        self.Sign_in_reg.configure(activebackground="#ececec")
        self.Sign_in_reg.configure(activeforeground="#000000")
        self.Sign_in_reg.configure(background="#808040")
        self.Sign_in_reg.configure(disabledforeground="#a3a3a3")
        self.Sign_in_reg.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Sign_in_reg.configure(foreground="#ffffff")
        self.Sign_in_reg.configure(highlightbackground="#d9d9d9")
        self.Sign_in_reg.configure(highlightcolor="black")
        self.Sign_in_reg.configure(pady="0")
        self.Sign_in_reg.configure(text='''Sign In''')

        self.Home_reg = tk.Button(self.Registration, command=self.user_logout)
        self.Home_reg.place(relx=0.41, rely=0.139, height=24, width=127)
        self.Home_reg.configure(activebackground="#ececec")
        self.Home_reg.configure(activeforeground="#000000")
        self.Home_reg.configure(background="#804040")
        self.Home_reg.configure(disabledforeground="#a3a3a3")
        self.Home_reg.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Home_reg.configure(foreground="#ffffff")
        self.Home_reg.configure(highlightbackground="#d9d9d9")
        self.Home_reg.configure(highlightcolor="black")
        self.Home_reg.configure(pady="0")
        self.Home_reg.configure(text='''Home''')

        self.Account_Num = tk.Label(self.Registration)
        self.Account_Num.place(relx=0.058, rely=0.254, height=20, width=114)
        self.Account_Num.configure(activebackground="#f9f9f9")
        self.Account_Num.configure(activeforeground="black")
        self.Account_Num.configure(background="#d9d9d9")
        self.Account_Num.configure(disabledforeground="#a3a3a3")
        self.Account_Num.configure(foreground="#000000")
        self.Account_Num.configure(highlightbackground="#d9d9d9")
        self.Account_Num.configure(highlightcolor="black")
        self.Account_Num.configure(text='''Account Number *''')

        self.Account_Num_entry = tk.Entry(self.Registration)
        self.Account_Num_entry.place(relx=0.078, rely=0.322, height=20
                                     , relwidth=0.707)
        self.Account_Num_entry.configure(background="white")
        self.Account_Num_entry.configure(disabledforeground="#a3a3a3")
        self.Account_Num_entry.configure(font="TkFixedFont")
        self.Account_Num_entry.configure(foreground="#000000")
        self.Account_Num_entry.configure(highlightbackground="#d9d9d9")
        self.Account_Num_entry.configure(highlightcolor="black")
        self.Account_Num_entry.configure(insertbackground="black")
        self.Account_Num_entry.configure(selectbackground="blue")
        self.Account_Num_entry.configure(selectforeground="white")

        self.Continue = tk.Button(self.Registration, command=lambda: self.checkaccount_thread(None))
        self.Continue.place(relx=0.087, rely=0.414, height=24, width=227)
        self.Continue.configure(activebackground="#ececec")
        self.Continue.configure(activeforeground="#000000")
        self.Continue.configure(background="#808040")
        self.Continue.configure(borderwidth="2")
        self.Continue.configure(cursor="arrow")
        self.Continue.configure(disabledforeground="#a3a3a3")
        self.Continue.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Continue.configure(foreground="#ffffff")
        self.Continue.configure(highlightbackground="#d9d9d9")
        self.Continue.configure(highlightcolor="black")
        self.Continue.configure(pady="0")
        self.Continue.configure(text='''Continue...''')

        # self.Authentication_lb = tk.Label(self.Registration)
        # self.Authentication_lb.place(relx=0.087, rely=0.529, height=40
        #                                , width=254)
        # self.Authentication_lb.configure(activebackground="#f9f9f9")
        # self.Authentication_lb.configure(activeforeground="black")
        # self.Authentication_lb.configure(background="#d9d9d9")
        # self.Authentication_lb.configure(disabledforeground="#a3a3a3")
        # self.Authentication_lb.configure(foreground="#000000")
        # self.Authentication_lb.configure(highlightbackground="#d9d9d9")
        # self.Authentication_lb.configure(highlightcolor="black")
        # self.Authentication_lb.configure(
        #     text='''An authentication code will be sent to you by E-mail or SMS shortly.''')
        # self.Authentication_lb.configure(wraplength="250")
        #
        # self.Assurance = tk.Button(self.Registration)
        # self.Assurance.place(relx=0.087, rely=0.666, height=24, width=237)
        # self.Assurance.configure(activebackground="#ececec")
        # self.Assurance.configure(activeforeground="#000000")
        # self.Assurance.configure(background="#d9d9d9")
        # self.Assurance.configure(disabledforeground="#a3a3a3")
        # self.Assurance.configure(foreground="#000000")
        # self.Assurance.configure(highlightbackground="#d9d9d9")
        # self.Assurance.configure(highlightcolor="black")
        # self.Assurance.configure(pady="0")
        # self.Assurance.configure(borderwidth="3")
        # self.Assurance.configure(relief='raised')
        # self.Assurance.configure(text='''Already have authentication code?''')

        # ----------REGISTRATION FRAME FOR NEW USER WITH EMAIL DETAILS---------------------------
        self.Registration_frame = tk.Frame(top)
        self.Registration_frame.place(relx=0.183, rely=0.042, relheight=0.885
                                      , relwidth=0.575)
        self.Registration_frame.configure(relief='groove')
        self.Registration_frame.configure(borderwidth="2")
        self.Registration_frame.configure(relief="groove")
        self.Registration_frame.configure(background="#d9d9d9")
        self.Registration_frame.configure(highlightbackground="#d9d9d9")
        self.Registration_frame.configure(highlightcolor="black")

        self.Register = tk.Label(self.Registration_frame)
        self.Register.place(height=50, width=345)
        self.Register.configure(activebackground="#f9f9f9")
        self.Register.configure(activeforeground="black")
        self.Register.configure(background="#808040")
        self.Register.configure(cursor="arrow")
        self.Register.configure(disabledforeground="#a3a3a3")
        self.Register.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Register.configure(foreground="#ffffff")
        self.Register.configure(highlightbackground="#d9d9d9")
        self.Register.configure(highlightcolor="black")
        self.Register.configure(text='''Registration''')

        self.User_N = tk.Label(self.Registration_frame)
        self.User_N.place(relx=0.087, rely=0.184, height=20, width=76)
        self.User_N.configure(activebackground="#f9f9f9")
        self.User_N.configure(activeforeground="black")
        self.User_N.configure(background="#d9d9d9")
        self.User_N.configure(disabledforeground="#a3a3a3")
        self.User_N.configure(foreground="#000000")
        self.User_N.configure(highlightbackground="#d9d9d9")
        self.User_N.configure(highlightcolor="black")
        self.User_N.configure(text='''Account No. *''')

        self.Username = tk.Entry(self.Registration_frame)
        self.Username.place(relx=0.087, rely=0.254, height=20, relwidth=0.678)
        self.Username.configure(background="white")
        self.Username.configure(disabledforeground="#a3a3a3")
        self.Username.configure(font="TkFixedFont")
        self.Username.configure(foreground="#000000")
        self.Username.configure(highlightbackground="#d9d9d9")
        self.Username.configure(highlightcolor="black")
        self.Username.configure(insertbackground="black")
        self.Username.configure(selectbackground="blue")
        self.Username.configure(selectforeground="white")

        self.Pass_word = tk.Label(self.Registration_frame)
        self.Pass_word.place(relx=0.087, rely=0.346, height=20, width=60)
        self.Pass_word.configure(activebackground="#f9f9f9")
        self.Pass_word.configure(activeforeground="black")
        self.Pass_word.configure(background="#d9d9d9")
        self.Pass_word.configure(disabledforeground="#a3a3a3")
        self.Pass_word.configure(foreground="#000000")
        self.Pass_word.configure(highlightbackground="#d9d9d9")
        self.Pass_word.configure(highlightcolor="black")
        self.Pass_word.configure(text='''Password *''')

        self.Password = tk.Entry(self.Registration_frame, show="*")
        self.Password.place(relx=0.087, rely=0.416, height=20, relwidth=0.678)
        self.Password.configure(background="white")
        self.Password.configure(disabledforeground="#a3a3a3")
        self.Password.configure(font="TkFixedFont")
        self.Password.configure(foreground="#000000")
        self.Password.configure(highlightbackground="#d9d9d9")
        self.Password.configure(highlightcolor="black")
        self.Password.configure(insertbackground="black")
        self.Password.configure(selectbackground="blue")
        self.Password.configure(selectforeground="white")

        self.conPass_word = tk.Label(self.Registration_frame)
        self.conPass_word.place(relx=0.087, rely=0.506, height=20, width=107)
        self.conPass_word.configure(activebackground="#f9f9f9")
        self.conPass_word.configure(activeforeground="black")
        self.conPass_word.configure(background="#d9d9d9")
        self.conPass_word.configure(disabledforeground="#a3a3a3")
        self.conPass_word.configure(foreground="#000000")
        self.conPass_word.configure(highlightbackground="#d9d9d9")
        self.conPass_word.configure(highlightcolor="black")
        self.conPass_word.configure(text='''Confirm Password *''')

        self.con_entry_Password = tk.Entry(self.Registration_frame, show="*")
        self.con_entry_Password.place(relx=0.087, rely=0.576, height=20, relwidth=0.678)
        self.con_entry_Password.configure(background="white")
        self.con_entry_Password.configure(disabledforeground="#a3a3a3")
        self.con_entry_Password.configure(font="TkFixedFont")
        self.con_entry_Password.configure(foreground="#000000")
        self.con_entry_Password.configure(highlightbackground="#d9d9d9")
        self.con_entry_Password.configure(highlightcolor="black")
        self.con_entry_Password.configure(insertbackground="black")
        self.con_entry_Password.configure(selectbackground="blue")
        self.con_entry_Password.configure(selectforeground="white")

        self.Confirm = tk.Button(self.Registration_frame, command=lambda: self.userreg_thread(None))
        self.Confirm.place(relx=0.1, rely=0.82, height=24, width=80)
        self.Confirm.configure(activebackground="#ececec")
        self.Confirm.configure(activeforeground="#000000")
        self.Confirm.configure(background="#808040")
        self.Confirm.configure(cursor="arrow")
        self.Confirm.configure(disabledforeground="#a3a3a3")
        self.Confirm.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Confirm.configure(foreground="#ffffff")
        self.Confirm.configure(highlightbackground="#d9d9d9")
        self.Confirm.configure(highlightcolor="black")
        self.Confirm.configure(pady="0")
        self.Confirm.configure(text='''Confirm...''')

        self.Back_reg = tk.Button(self.Registration_frame, command=lambda: self.show_frame(self.Home_Page))
        self.Back_reg.place(relx=0.4, rely=0.82, height=24, width=80)
        self.Back_reg.configure(activebackground="#ececec")
        self.Back_reg.configure(activeforeground="#000000")
        self.Back_reg.configure(background="#804040")
        self.Back_reg.configure(cursor="arrow")
        self.Back_reg.configure(disabledforeground="#a3a3a3")
        self.Back_reg.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Back_reg.configure(foreground="#ffffff")
        self.Back_reg.configure(highlightbackground="#d9d9d9")
        self.Back_reg.configure(highlightcolor="black")
        self.Back_reg.configure(pady="0")
        self.Back_reg.configure(text='''Back''')

        self.Advice = tk.Label(self.Registration_frame)
        self.Advice.place(relx=0.087, rely=0.89, height=44, width=300)
        self.Advice.configure(activebackground="#ececec")
        self.Advice.configure(activeforeground="#000000")
        self.Advice.configure(background="#d9d9d9")
        self.Advice.configure(cursor="arrow")
        self.Advice.configure(disabledforeground="#a3a3a3")
        self.Advice.configure(foreground="#000000")
        self.Advice.configure(highlightbackground="#d9d9d9")
        self.Advice.configure(highlightcolor="black")
        self.Advice.configure(justify='left')
        self.Advice.configure(pady="0")
        self.Advice.configure(relief="flat")
        self.Advice.configure(
            text='''Please! Do not share your details to any third party, Protect yourself from Identity theft.''')
        self.Advice.configure(wraplength="300")

        self.PIN = tk.Label(self.Registration_frame)
        self.PIN.place(relx=0.087, rely=0.666, height=20, width=95)
        self.PIN.configure(background="#d9d9d9")
        self.PIN.configure(disabledforeground="#a3a3a3")
        self.PIN.configure(foreground="#000000")
        self.PIN.configure(text='''Transaction PIN *''')

        self.Tranx_PIN = tk.Entry(self.Registration_frame, show="*")
        self.Tranx_PIN.place(relx=0.087, rely=0.736, height=20, relwidth=0.678)
        self.Tranx_PIN.configure(background="white")
        self.Tranx_PIN.configure(disabledforeground="#a3a3a3")
        self.Tranx_PIN.configure(font="TkFixedFont")
        self.Tranx_PIN.configure(foreground="#000000")
        self.Tranx_PIN.configure(insertbackground="black")

        # ----------EMPLOYEE FRAME---------------------------
        self.Emp_frame = tk.Frame(top)
        self.Emp_frame.place(relx=0.183, rely=0.042, relheight=0.885
                             , relwidth=0.575)
        self.Emp_frame.configure(relief='groove')
        self.Emp_frame.configure(borderwidth="2")
        self.Emp_frame.configure(relief="groove")
        self.Emp_frame.configure(background="#d9d9d9")

        self.Label2 = tk.Label(self.Emp_frame)
        self.Label2.place(relx=0.006, rely=0.005, height=40, width=94)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img3
        _img3 = ImageTk.PhotoImage(file=photo_location)
        self.Label2.configure(image=_img3)
        self.Label2.configure(text='''Label''')

        self.Label3 = tk.Label(self.Emp_frame)
        self.Label3.place(relx=0.377, rely=0.024, height=30, width=174)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 17 -weight bold")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Employee Page''')

        self.Label4 = tk.Label(self.Emp_frame)
        self.Label4.place(relx=0.058, rely=0.184, height=21, width=144)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(cursor="arrow")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Please enter details below.''')

        self.Emp_usn = tk.Label(self.Emp_frame)
        self.Emp_usn.place(relx=0.029, rely=0.306, height=20, width=64)
        self.Emp_usn.configure(background="#d9d9d9")
        self.Emp_usn.configure(disabledforeground="#a3a3a3")
        self.Emp_usn.configure(foreground="#000000")
        self.Emp_usn.configure(text='''Staff ID*''')

        self.Emp_Username = tk.Entry(self.Emp_frame)
        self.Emp_Username.place(relx=0.058, rely=0.367, height=20
                                , relwidth=0.533)
        self.Emp_Username.configure(background="white")
        self.Emp_Username.configure(disabledforeground="#a3a3a3")
        self.Emp_Username.configure(font="TkFixedFont")
        self.Emp_Username.configure(foreground="#000000")
        self.Emp_Username.configure(insertbackground="black")

        self.Emp_psw = tk.Label(self.Emp_frame)
        self.Emp_psw.place(relx=0.058, rely=0.447, height=20, width=54)
        self.Emp_psw.configure(background="#d9d9d9")
        self.Emp_psw.configure(disabledforeground="#a3a3a3")
        self.Emp_psw.configure(foreground="#000000")
        self.Emp_psw.configure(text='''Password''')

        self.Emp_Password = tk.Entry(self.Emp_frame, show="*")
        self.Emp_Password.place(relx=0.058, rely=0.506, height=20
                                , relwidth=0.533)
        self.Emp_Password.configure(background="white")
        self.Emp_Password.configure(disabledforeground="#a3a3a3")
        self.Emp_Password.configure(font="TkFixedFont")
        self.Emp_Password.configure(foreground="#000000")
        self.Emp_Password.configure(insertbackground="black")

        self.Emp_Signin = tk.Button(self.Emp_frame, command=lambda: self.stafflogin_thread(None))
        self.Emp_Signin.place(relx=0.058, rely=0.588, height=24, width=77)
        self.Emp_Signin.configure(activebackground="#ececec")
        self.Emp_Signin.configure(activeforeground="#000000")
        self.Emp_Signin.configure(background="#808040")
        self.Emp_Signin.configure(borderwidth="3")
        self.Emp_Signin.configure(disabledforeground="#a3a3a3")
        self.Emp_Signin.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Emp_Signin.configure(foreground="#ffffff")
        self.Emp_Signin.configure(highlightbackground="#d9d9d9")
        self.Emp_Signin.configure(highlightcolor="black")
        self.Emp_Signin.configure(pady="0")
        self.Emp_Signin.configure(text='''Sign In''')

        self.Emp_bwp = tk.Button(self.Emp_frame, command=self.user_logout)
        self.Emp_bwp.place(relx=0.348, rely=0.588, height=24, width=77)
        self.Emp_bwp.configure(activebackground="#ececec")
        self.Emp_bwp.configure(activeforeground="#000000")
        self.Emp_bwp.configure(background="#808040")
        self.Emp_bwp.configure(borderwidth="3")
        self.Emp_bwp.configure(disabledforeground="#a3a3a3")
        self.Emp_bwp.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Emp_bwp.configure(foreground="#ffffff")
        self.Emp_bwp.configure(highlightbackground="#d9d9d9")
        self.Emp_bwp.configure(highlightcolor="black")
        self.Emp_bwp.configure(pady="0")
        self.Emp_bwp.configure(text='''Home''')

        self.moto = tk.Label(self.Emp_frame)
        self.moto.place(relx=0.348, rely=0.941, height=20, width=214)
        self.moto.configure(background="#d9d9d9")
        self.moto.configure(disabledforeground="#a3a3a3")
        self.moto.configure(foreground="#000000")
        self.moto.configure(text='''AZ Bank : Home of convenient banking''')

        # ----------EMPLOYEE DASHBOARD FRAME---------------------------
        self.Emp_dash = tk.Frame(top)
        self.Emp_dash.place(relx=0.183, rely=0.042, relheight=0.885
                            , relwidth=0.575)
        self.Emp_dash.configure(relief='groove')
        self.Emp_dash.configure(borderwidth="1")
        self.Emp_dash.configure(relief="groove")
        self.Emp_dash.configure(background="#d9d9d9")

        self.emplabel = tk.Label(self.Emp_dash)
        self.emplabel.place(relx=0.216, rely=0.047, height=21, width=100)
        self.emplabel.configure(background="#d9d9d9")
        self.emplabel.configure(disabledforeground="#a3a3a3")
        self.emplabel.configure(foreground="#000000")
        self.emplabel.configure(text=''' ''')
        # self.emp_name_entry = tk.Entry(self.Emp_dash)
        # self.emp_name_entry.place(relx=0.226, rely=0.047, height=20
        #                           , relwidth=0.359)
        # self.emp_name_entry.configure(background="#d9d9d9")
        # self.emp_name_entry.configure(disabledforeground="#a3a3a3")
        # self.emp_name_entry.configure(font="TkFixedFont")
        # self.emp_name_entry.configure(foreground="#000000")
        # self.emp_name_entry.configure(insertbackground="black")

        self.emp_welcome = tk.Label(self.Emp_dash)
        self.emp_welcome.place(relx=0.069, rely=0.047, height=21, width=58)
        self.emp_welcome.configure(background="#d9d9d9")
        self.emp_welcome.configure(disabledforeground="#a3a3a3")
        self.emp_welcome.configure(foreground="#000000")
        self.emp_welcome.configure(text='''Welcome ,''')

        self.emp_dash_create = tk.Button(self.Emp_dash, command=lambda: self.show_frame(self.Account_creation))
        self.emp_dash_create.place(relx=0.055, rely=0.188, height=36, width=38)
        self.emp_dash_create.configure(activebackground="#ececec")
        self.emp_dash_create.configure(activeforeground="#000000")
        self.emp_dash_create.configure(background="#d9d9d9")
        self.emp_dash_create.configure(borderwidth="5")
        self.emp_dash_create.configure(disabledforeground="#a3a3a3")
        self.emp_dash_create.configure(foreground="#000000")
        self.emp_dash_create.configure(highlightbackground="#d9d9d9")
        self.emp_dash_create.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "uss_acc.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.emp_dash_create.configure(image=_img4)
        self.emp_dash_create.configure(pady="0")
        self.emp_dash_create.configure(relief="flat")
        self.emp_dash_create.configure(text='''Button''')

        self.Emp_dash_delete = tk.Button(self.Emp_dash, command=lambda: self.show_frame(self.Delete_frame))
        self.Emp_dash_delete.place(relx=0.055, rely=0.306, height=31, width=31)
        self.Emp_dash_delete.configure(activebackground="#ececec")
        self.Emp_dash_delete.configure(activeforeground="#000000")
        self.Emp_dash_delete.configure(background="#d9d9d9")
        self.Emp_dash_delete.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_delete.configure(foreground="#000000")
        self.Emp_dash_delete.configure(highlightbackground="#d9d9d9")
        self.Emp_dash_delete.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "delete2.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.Emp_dash_delete.configure(image=_img5)
        self.Emp_dash_delete.configure(pady="0")
        self.Emp_dash_delete.configure(relief="flat")
        self.Emp_dash_delete.configure(text='''Button''')

        self.Emp_dash_load = tk.Button(self.Emp_dash, command=lambda: self.show_frame(self.load_frame))
        self.Emp_dash_load.place(relx=0.029, rely=0.447, height=24, width=47)
        self.Emp_dash_load.configure(activebackground="#ececec")
        self.Emp_dash_load.configure(activeforeground="#000000")
        self.Emp_dash_load.configure(background="#d9d9d9")
        self.Emp_dash_load.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_load.configure(foreground="#000000")
        self.Emp_dash_load.configure(highlightbackground="#d9d9d9")
        self.Emp_dash_load.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "load3.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.Emp_dash_load.configure(image=_img6)
        self.Emp_dash_load.configure(pady="0")
        self.Emp_dash_load.configure(relief="flat")
        self.Emp_dash_load.configure(text='''Button''')

        self.Emp_dash_info = tk.Button(self.Emp_dash, command=lambda: self.show_frame(self.Account_Info_frame))
        self.Emp_dash_info.place(relx=0.029, rely=0.562, height=24, width=47)
        self.Emp_dash_info.configure(activebackground="#ececec")
        self.Emp_dash_info.configure(activeforeground="#000000")
        self.Emp_dash_info.configure(background="#d9d9d9")
        self.Emp_dash_info.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_info.configure(foreground="#000000")
        self.Emp_dash_info.configure(highlightbackground="#d9d9d9")
        self.Emp_dash_info.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "details1.png")
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.Emp_dash_info.configure(image=_img7)
        self.Emp_dash_info.configure(pady="0")
        self.Emp_dash_info.configure(relief="flat")
        self.Emp_dash_info.configure(text='''Button''')

        # self.Emp_dash_Logout = tk.Button(self.Emp_dash, command=lambda: self.userlogout_thread(None))
        self.Emp_dash_Logout = tk.Button(self.Emp_dash, command=lambda: self.show_frame(self.Emp_frame))
        self.Emp_dash_Logout.place(relx=0.29, rely=0.729, height=24, width=97)
        self.Emp_dash_Logout.configure(activebackground="#ececec")
        self.Emp_dash_Logout.configure(activeforeground="#000000")
        self.Emp_dash_Logout.configure(background="#804040")
        self.Emp_dash_Logout.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_Logout.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Emp_dash_Logout.configure(foreground="#ffffff")
        self.Emp_dash_Logout.configure(highlightbackground="#d9d9d9")
        self.Emp_dash_Logout.configure(highlightcolor="black")
        self.Emp_dash_Logout.configure(pady="0")
        self.Emp_dash_Logout.configure(text='''Logout''')

        self.Emp_dash_acc = tk.Label(self.Emp_dash)
        self.Emp_dash_acc.place(relx=0.226, rely=0.212, height=21, width=120)
        self.Emp_dash_acc.configure(background="#d9d9d9")
        self.Emp_dash_acc.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_acc.configure(foreground="#000000")
        self.Emp_dash_acc.configure(text='''Create Account''')

        self.Emp_dash_del = tk.Label(self.Emp_dash)
        self.Emp_dash_del.place(relx=0.267, rely=0.329, height=21, width=92)
        self.Emp_dash_del.configure(background="#d9d9d9")
        self.Emp_dash_del.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_del.configure(foreground="#000000")
        self.Emp_dash_del.configure(text='''Delete Account''')

        self.Emp_dash_ld_acc = tk.Label(self.Emp_dash)
        self.Emp_dash_ld_acc.place(relx=0.278, rely=0.447, height=20, width=82)
        self.Emp_dash_ld_acc.configure(background="#d9d9d9")
        self.Emp_dash_ld_acc.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_ld_acc.configure(foreground="#000000")
        self.Emp_dash_ld_acc.configure(text='''Load Account''')

        self.Emp_dash_inf = tk.Label(self.Emp_dash)
        self.Emp_dash_inf.place(relx=0.29, rely=0.565, height=21, width=82)
        self.Emp_dash_inf.configure(background="#d9d9d9")
        self.Emp_dash_inf.configure(disabledforeground="#a3a3a3")
        self.Emp_dash_inf.configure(foreground="#000000")
        self.Emp_dash_inf.configure(text='''Account Details''')

        self.emp_dash_coylogo = tk.Label(self.Emp_dash)
        self.emp_dash_coylogo.place(relx=0.704, rely=0.894, height=40, width=91)
        self.emp_dash_coylogo.configure(activebackground="#f9f9f9")
        self.emp_dash_coylogo.configure(activeforeground="black")
        self.emp_dash_coylogo.configure(background="#d9d9d9")
        self.emp_dash_coylogo.configure(disabledforeground="#a3a3a3")
        self.emp_dash_coylogo.configure(foreground="#000000")
        self.emp_dash_coylogo.configure(highlightbackground="#d9d9d9")
        self.emp_dash_coylogo.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img8
        _img8 = ImageTk.PhotoImage(file=photo_location)
        self.emp_dash_coylogo.configure(image=_img8)
        self.emp_dash_coylogo.configure(text='''Label''')

        # ----------ACCOUNT CREATION FRAME---------------------------
        self.Account_creation = tk.Frame(top)
        self.Account_creation.place(relx=0.183, rely=0.042, relheight=0.885
                                    , relwidth=0.575)
        self.Account_creation.configure(relief='groove')
        self.Account_creation.configure(borderwidth="2")
        self.Account_creation.configure(relief="groove")
        self.Account_creation.configure(background="#d9d9d9")

        self.Acc_creation_label = tk.Label(self.Account_creation)
        self.Acc_creation_label.place(relx=0.339, rely=0.024, height=21
                                      , width=198)
        self.Acc_creation_label.configure(background="#d9d9d9")
        self.Acc_creation_label.configure(disabledforeground="#a3a3a3")
        self.Acc_creation_label.configure(font="-family {Verdana} -size 15 -weight bold")
        self.Acc_creation_label.configure(foreground="#000000")
        self.Acc_creation_label.configure(text='''Account Creation''')

        self.emp_dash_coylogo_1 = tk.Label(self.Account_creation)
        self.emp_dash_coylogo_1.place(relx=0.023, rely=0.012, height=40
                                      , width=91)
        self.emp_dash_coylogo_1.configure(activebackground="#f9f9f9")
        self.emp_dash_coylogo_1.configure(activeforeground="black")
        self.emp_dash_coylogo_1.configure(background="#d9d9d9")
        self.emp_dash_coylogo_1.configure(disabledforeground="#a3a3a3")
        self.emp_dash_coylogo_1.configure(font="-family {Segoe UI} -size 16")
        self.emp_dash_coylogo_1.configure(foreground="#000000")
        self.emp_dash_coylogo_1.configure(highlightbackground="#d9d9d9")
        self.emp_dash_coylogo_1.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img9
        _img9 = ImageTk.PhotoImage(file=photo_location)
        self.emp_dash_coylogo_1.configure(image=_img9)
        self.emp_dash_coylogo_1.configure(text='''Label''')

        # self.Acc_Cus_ID = tk.Label(self.Account_creation)
        # self.Acc_Cus_ID.place(relx=0.055, rely=0.235, height=21, width=72)
        # self.Acc_Cus_ID.configure(background="#d9d9d9")
        # self.Acc_Cus_ID.configure(disabledforeground="#a3a3a3")
        # self.Acc_Cus_ID.configure(foreground="#000000")
        # self.Acc_Cus_ID.configure(text='''Customer ID''')

        self.Acc_Fname = tk.Label(self.Account_creation)
        self.Acc_Fname.place(relx=0.055, rely=0.2, height=21, width=70)
        self.Acc_Fname.configure(background="#d9d9d9")
        self.Acc_Fname.configure(disabledforeground="#a3a3a3")
        self.Acc_Fname.configure(foreground="#000000")
        self.Acc_Fname.configure(text='''First Name''')

        # self.Customer_ID = tk.Entry(self.Account_creation)
        # self.Customer_ID.place(relx=0.339, rely=0.235, height=20, relwidth=0.504)
        # self.Customer_ID.configure(background="white")
        # self.Customer_ID.configure(disabledforeground="#a3a3a3")
        # self.Customer_ID.configure(font="TkFixedFont")
        # self.Customer_ID.configure(foreground="#000000")
        # self.Customer_ID.configure(insertbackground="black")

        self.Acc_Lname = tk.Label(self.Account_creation)
        self.Acc_Lname.place(relx=0.055, rely=0.3, height=21, width=70)
        self.Acc_Lname.configure(background="#d9d9d9")
        self.Acc_Lname.configure(disabledforeground="#a3a3a3")
        self.Acc_Lname.configure(foreground="#000000")
        self.Acc_Lname.configure(text='''Last Name''')

        # self.Acc_Aname = tk.Label(self.Account_creation)
        # self.Acc_Aname.place(relx=0.055, rely=0.518, height=21, width=82)
        # self.Acc_Aname.configure(background="#d9d9d9")
        # self.Acc_Aname.configure(disabledforeground="#a3a3a3")
        # self.Acc_Aname.configure(foreground="#000000")
        # self.Acc_Aname.configure(text='''Account No.''')

        # self.Acc_BVN = tk.Label(self.Account_creation)
        # self.Acc_BVN.place(relx=0.055, rely=0.612, height=21, width=33)
        # self.Acc_BVN.configure(background="#d9d9d9")
        # self.Acc_BVN.configure(disabledforeground="#a3a3a3")
        # self.Acc_BVN.configure(foreground="#000000")
        # self.Acc_BVN.configure(text='''BVN''')

        self.First_name = tk.Entry(self.Account_creation)
        self.First_name.place(relx=0.339, rely=0.2, height=20, relwidth=0.504)
        self.First_name.configure(background="white")
        self.First_name.configure(disabledforeground="#a3a3a3")
        self.First_name.configure(font="TkFixedFont")
        self.First_name.configure(foreground="#000000")
        self.First_name.configure(insertbackground="black")

        self.Last_name = tk.Entry(self.Account_creation)
        self.Last_name.place(relx=0.339, rely=0.3, height=20, relwidth=0.504)
        self.Last_name.configure(background="white")
        self.Last_name.configure(disabledforeground="#a3a3a3")
        self.Last_name.configure(font="TkFixedFont")
        self.Last_name.configure(foreground="#000000")
        self.Last_name.configure(insertbackground="black")

        # self.Acc_Aname = tk.Entry(self.Account_creation)
        # self.Acc_Aname.place(relx=0.339, rely=0.518, height=20, relwidth=0.504)
        # self.Acc_Aname.configure(background="white")
        # self.Acc_Aname.configure(disabledforeground="#a3a3a3")
        # self.Acc_Aname.configure(font="TkFixedFont")
        # self.Acc_Aname.configure(foreground="#000000")
        # self.Acc_Aname.configure(insertbackground="black")

        # self.Acc_BVN = tk.Entry(self.Account_creation)
        # self.Acc_BVN.place(relx=0.339, rely=0.612, height=20, relwidth=0.504)
        #
        # self.Acc_BVN.configure(background="white")
        # self.Acc_BVN.configure(disabledforeground="#a3a3a3")
        # self.Acc_BVN.configure(font="TkFixedFont")
        # self.Acc_BVN.configure(foreground="#000000")
        # self.Acc_BVN.configure(insertbackground="black")

        self.Address_Aname = tk.Label(self.Account_creation)
        self.Address_Aname.place(relx=0.055, rely=0.4, height=21, width=70)
        self.Address_Aname.configure(activebackground="#f9f9f9")
        self.Address_Aname.configure(activeforeground="black")
        self.Address_Aname.configure(background="#d9d9d9")
        self.Address_Aname.configure(disabledforeground="#a3a3a3")
        self.Address_Aname.configure(foreground="#000000")
        self.Address_Aname.configure(highlightbackground="#d9d9d9")
        self.Address_Aname.configure(highlightcolor="black")
        self.Address_Aname.configure(text='''Address''')

        self.Address = tk.Entry(self.Account_creation)
        self.Address.place(relx=0.339, rely=0.4, height=20
                           , relwidth=0.504)
        self.Address.configure(background="white")
        self.Address.configure(disabledforeground="#a3a3a3")
        self.Address.configure(font="TkFixedFont")
        self.Address.configure(foreground="#000000")
        self.Address.configure(highlightbackground="#d9d9d9")
        self.Address.configure(highlightcolor="black")
        self.Address.configure(insertbackground="black")
        self.Address.configure(selectbackground="blue")
        self.Address.configure(selectforeground="white")

        self.Age = tk.Label(self.Account_creation)
        self.Age.place(relx=0.055, rely=0.5, height=21, width=70)
        self.Age.configure(activebackground="#f9f9f9")
        self.Age.configure(activeforeground="black")
        self.Age.configure(background="#d9d9d9")
        self.Age.configure(disabledforeground="#a3a3a3")
        self.Age.configure(foreground="#000000")
        self.Age.configure(highlightbackground="#d9d9d9")
        self.Age.configure(highlightcolor="black")
        self.Age.configure(text='''Age''')

        self.Age_entry = tk.Entry(self.Account_creation)
        self.Age_entry.place(relx=0.339, rely=0.5, height=20, relwidth=0.504)
        self.Age_entry.configure(background="white")
        self.Age_entry.configure(disabledforeground="#a3a3a3")
        self.Age_entry.configure(font="TkFixedFont")
        self.Age_entry.configure(foreground="#000000")
        self.Age_entry.configure(highlightbackground="#d9d9d9")
        self.Age_entry.configure(highlightcolor="black")
        self.Age_entry.configure(insertbackground="black")
        self.Age_entry.configure(selectbackground="blue")
        self.Age_entry.configure(selectforeground="white")

        self.Next_kin = tk.Label(self.Account_creation)
        self.Next_kin.place(relx=0.055, rely=0.6, height=21, width=70)
        self.Next_kin.configure(activebackground="#f9f9f9")
        self.Next_kin.configure(activeforeground="black")
        self.Next_kin.configure(background="#d9d9d9")
        self.Next_kin.configure(disabledforeground="#a3a3a3")
        self.Next_kin.configure(foreground="#000000")
        self.Next_kin.configure(highlightbackground="#d9d9d9")
        self.Next_kin.configure(highlightcolor="black")
        self.Next_kin.configure(text='''Next of Kin''')

        self.Next_kin_entry = tk.Entry(self.Account_creation)
        self.Next_kin_entry.place(relx=0.339, rely=0.6, height=20
                                  , relwidth=0.504)
        self.Next_kin_entry.configure(background="white")
        self.Next_kin_entry.configure(disabledforeground="#a3a3a3")
        self.Next_kin_entry.configure(font="TkFixedFont")
        self.Next_kin_entry.configure(foreground="#000000")
        self.Next_kin_entry.configure(highlightbackground="#d9d9d9")
        self.Next_kin_entry.configure(highlightcolor="black")
        self.Next_kin_entry.configure(insertbackground="black")
        self.Next_kin_entry.configure(selectbackground="blue")
        self.Next_kin_entry.configure(selectforeground="white")

        self.Gender = tk.Label(self.Account_creation)
        self.Gender.place(relx=0.055, rely=0.683, height=21, width=70)
        self.Gender.configure(activebackground="#f9f9f9")
        self.Gender.configure(activeforeground="black")
        self.Gender.configure(background="#d9d9d9")
        self.Gender.configure(disabledforeground="#a3a3a3")
        self.Gender.configure(foreground="#000000")
        self.Gender.configure(highlightbackground="#d9d9d9")
        self.Gender.configure(highlightcolor="black")
        self.Gender.configure(text='''Gender''')

        self.var = tk.StringVar()
        self.Male = tk.Radiobutton(self.Account_creation)
        self.Male.place(relx=0.319, rely=0.68, relheight=0.059, relwidth=0.168)
        self.Male.configure(activebackground="#ececec")
        self.Male.configure(activeforeground="#000000")
        self.Male.configure(background="#d9d9d9")
        self.Male.configure(disabledforeground="#a3a3a3")
        self.Male.configure(foreground="#000000")
        self.Male.configure(highlightbackground="#d9d9d9")
        self.Male.configure(highlightcolor="black")
        self.Male.configure(justify='left')
        self.Male.configure(text='''Male''')
        self.Male.configure(variable=self.var, value="male")
        self.Male.select()

        self.Female = tk.Radiobutton(self.Account_creation)
        self.Female.place(relx=0.58, rely=0.68, relheight=0.059, relwidth=0.168)

        self.Female.configure(activebackground="#ececec")
        self.Female.configure(activeforeground="#000000")
        self.Female.configure(background="#d9d9d9")
        self.Female.configure(disabledforeground="#a3a3a3")
        self.Female.configure(foreground="#000000")
        self.Female.configure(highlightbackground="#d9d9d9")
        self.Female.configure(highlightcolor="black")
        self.Female.configure(justify='left')
        self.Female.configure(text='''Female''')
        self.Female.configure(variable=self.var, value="female")

        self.Marital_Status = tk.Label(self.Account_creation)
        self.Marital_Status.place(relx=0.055, rely=0.76, height=21, width=70)
        self.Marital_Status.configure(background="#d9d9d9")
        self.Marital_Status.configure(disabledforeground="#a3a3a3")
        self.Marital_Status.configure(foreground="#000000")
        self.Marital_Status.configure(text='''Marital Status''')

        self.var2 = tk.StringVar()
        self.Single = tk.Radiobutton(self.Account_creation)
        self.Single.place(relx=0.319, rely=0.74, relheight=0.059, relwidth=0.197)
        self.Single.configure(activebackground="#ececec")
        self.Single.configure(activeforeground="#000000")
        self.Single.configure(background="#d9d9d9")
        self.Single.configure(disabledforeground="#a3a3a3")
        self.Single.configure(foreground="#000000")
        self.Single.configure(highlightbackground="#d9d9d9")
        self.Single.configure(highlightcolor="black")
        self.Single.configure(justify='left')
        self.Single.configure(text='''Single''')
        self.Single.configure(variable=self.var2, value="single")
        self.Single.select()

        self.Married = tk.Radiobutton(self.Account_creation)
        self.Married.place(relx=0.58, rely=0.74, relheight=0.059, relwidth=0.168)
        self.Married.configure(activebackground="#ececec")
        self.Married.configure(activeforeground="#000000")
        self.Married.configure(background="#d9d9d9")
        self.Married.configure(disabledforeground="#a3a3a3")
        self.Married.configure(foreground="#000000")
        self.Married.configure(highlightbackground="#d9d9d9")
        self.Married.configure(highlightcolor="black")
        self.Married.configure(justify='left')
        self.Married.configure(text='''Married''')
        self.Married.configure(variable=self.var2, value="married")

        self.widowed = tk.Radiobutton(self.Account_creation)
        self.widowed.place(relx=0.58, rely=0.79, relheight=0.059
                           , relwidth=0.197)
        self.widowed.configure(activebackground="#ececec")
        self.widowed.configure(activeforeground="#000000")
        self.widowed.configure(background="#d9d9d9")
        self.widowed.configure(disabledforeground="#a3a3a3")
        self.widowed.configure(foreground="#000000")
        self.widowed.configure(highlightbackground="#d9d9d9")
        self.widowed.configure(highlightcolor="black")
        self.widowed.configure(justify='left')
        self.widowed.configure(text='''Widowed''')
        self.widowed.configure(variable=self.var2, value="widowed")

        self.Divorced = tk.Radiobutton(self.Account_creation)
        self.Divorced.place(relx=0.34, rely=0.79, relheight=0.059
                            , relwidth=0.197)
        self.Divorced.configure(activebackground="#ececec")
        self.Divorced.configure(activeforeground="#000000")
        self.Divorced.configure(background="#d9d9d9")
        self.Divorced.configure(disabledforeground="#a3a3a3")
        self.Divorced.configure(foreground="#000000")
        self.Divorced.configure(highlightbackground="#d9d9d9")
        self.Divorced.configure(highlightcolor="black")
        self.Divorced.configure(justify='left')
        self.Divorced.configure(text='''Divorced''')
        self.Divorced.configure(variable=self.var2, value="divorced")

        self.acctype = tk.Label(self.Account_creation)
        self.acctype.place(relx=0.055, rely=0.85, height=21, width=73)
        self.acctype.configure(activebackground="#f9f9f9")
        self.acctype.configure(activeforeground="black")
        self.acctype.configure(background="#d9d9d9")
        self.acctype.configure(disabledforeground="#a3a3a3")
        self.acctype.configure(foreground="#000000")
        self.acctype.configure(highlightbackground="#d9d9d9")
        self.acctype.configure(highlightcolor="black")
        self.acctype.configure(text='''Account Type''')

        self.accvar = tk.StringVar()
        self.current = tk.Radiobutton(self.Account_creation)
        self.current.place(relx=0.34, rely=0.85, relheight=0.059, relwidth=0.168)
        self.current.configure(activebackground="#ececec")
        self.current.configure(activeforeground="#000000")
        self.current.configure(background="#d9d9d9")
        self.current.configure(disabledforeground="#a3a3a3")
        self.current.configure(foreground="#000000")
        self.current.configure(highlightbackground="#d9d9d9")
        self.current.configure(highlightcolor="black")
        self.current.configure(justify='left')
        self.current.configure(text='''Current''')
        self.current.configure(variable=self.accvar, value="current")
        self.current.select()

        self.savings = tk.Radiobutton(self.Account_creation)
        self.savings.place(relx=0.58, rely=0.85, relheight=0.059, relwidth=0.168)

        self.savings.configure(activebackground="#ececec")
        self.savings.configure(activeforeground="#000000")
        self.savings.configure(background="#d9d9d9")
        self.savings.configure(disabledforeground="#a3a3a3")
        self.savings.configure(foreground="#000000")
        self.savings.configure(highlightbackground="#d9d9d9")
        self.savings.configure(highlightcolor="black")
        self.savings.configure(justify='left')
        self.savings.configure(text='''Savings''')
        self.savings.configure(variable=self.accvar, value="savings")

        self.Acc_create_save = tk.Button(self.Account_creation, command=lambda: self.staffreg_thread(None))
        self.Acc_create_save.place(relx=0.338, rely=0.918, height=24, width=67)
        self.Acc_create_save.configure(activebackground="#ececec")
        self.Acc_create_save.configure(activeforeground="#000000")
        self.Acc_create_save.configure(background="#808040")
        self.Acc_create_save.configure(disabledforeground="#a3a3a3")
        self.Acc_create_save.configure(font="-family {Verdana} -size 9 -weight bold")
        self.Acc_create_save.configure(foreground="#ffffff")
        self.Acc_create_save.configure(highlightbackground="#d9d9d9")
        self.Acc_create_save.configure(highlightcolor="black")
        self.Acc_create_save.configure(pady="0")
        self.Acc_create_save.configure(text='''Save''')

        self.Acc_create_back = tk.Button(self.Account_creation, command=lambda: self.backforstaffreg(self.Emp_dash))
        self.Acc_create_back.place(relx=0.588, rely=0.918, height=24, width=67)
        self.Acc_create_back.configure(activebackground="#ececec")
        self.Acc_create_back.configure(activeforeground="#000000")
        self.Acc_create_back.configure(background="#804040")
        self.Acc_create_back.configure(disabledforeground="#a3a3a3")
        self.Acc_create_back.configure(font="-family {Verdana} -size 9 -weight bold")
        self.Acc_create_back.configure(foreground="#ffffff")
        self.Acc_create_back.configure(highlightbackground="#d9d9d9")
        self.Acc_create_back.configure(highlightcolor="black")
        self.Acc_create_back.configure(pady="0")
        self.Acc_create_back.configure(text='''Back''')

        # self.Acc_create_Amt = tk.Label(self.Account_creation)
        # self.Acc_create_Amt.place(relx=0.055, rely=0.706, height=21, width=53)
        # self.Acc_create_Amt.configure(background="#d9d9d9")
        # self.Acc_create_Amt.configure(disabledforeground="#a3a3a3")
        # self.Acc_create_Amt.configure(foreground="#000000")
        # self.Acc_create_Amt.configure(text='''Amount''')

        # self.Amount = tk.Entry(self.Account_creation)
        # self.Amount.place(relx=0.339, rely=0.706, height=20, relwidth=0.504)
        # self.Amount.configure(background="white")
        # self.Amount.configure(disabledforeground="#a3a3a3")
        # self.Amount.configure(font="TkFixedFont")
        # self.Amount.configure(foreground="#000000")
        # self.Amount.configure(insertbackground="black")

        # ----------DELETE ACCOUNT FRAME---------------------------
        self.Delete_frame = tk.Frame(top)
        self.Delete_frame.place(relx=0.183, rely=0.042, relheight=0.885
                                , relwidth=0.575)
        self.Delete_frame.configure(relief='groove')
        self.Delete_frame.configure(borderwidth="2")
        self.Delete_frame.configure(relief="groove")
        self.Delete_frame.configure(background="#d9d9d9")

        self.del_label = tk.Label(self.Delete_frame)
        self.del_label.place(relx=0.339, rely=0.047, height=21, width=188)
        self.del_label.configure(background="#d9d9d9")
        self.del_label.configure(disabledforeground="#a3a3a3")
        self.del_label.configure(font="-family {Verdana} -size 14 -weight bold")
        self.del_label.configure(foreground="#000000")
        self.del_label.configure(text='''DELETE ACCOUNT''')

        self.del_coylogo = tk.Label(self.Delete_frame)
        self.del_coylogo.place(relx=0.026, rely=0.012, height=40, width=91)
        self.del_coylogo.configure(activebackground="#f9f9f9")
        self.del_coylogo.configure(activeforeground="black")
        self.del_coylogo.configure(background="#d9d9d9")
        self.del_coylogo.configure(disabledforeground="#a3a3a3")
        self.del_coylogo.configure(font="-family {Segoe UI} -size 16")
        self.del_coylogo.configure(foreground="#000000")
        self.del_coylogo.configure(highlightbackground="#d9d9d9")
        self.del_coylogo.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img10
        _img10 = ImageTk.PhotoImage(file=photo_location)
        self.del_coylogo.configure(image=_img10)
        self.del_coylogo.configure(text='''Label''')

        self.del_cust_ID = tk.Label(self.Delete_frame)
        self.del_cust_ID.place(relx=0.113, rely=0.259, height=21, width=72)
        self.del_cust_ID.configure(background="#d9d9d9")
        self.del_cust_ID.configure(disabledforeground="#a3a3a3")
        self.del_cust_ID.configure(foreground="#000000")
        self.del_cust_ID.configure(text='''Customer ID''')

        self.del_Acc_no = tk.Label(self.Delete_frame)
        self.del_Acc_no.place(relx=0.113, rely=0.353, height=21, width=93)
        self.del_Acc_no.configure(background="#d9d9d9")
        self.del_Acc_no.configure(disabledforeground="#a3a3a3")
        self.del_Acc_no.configure(foreground="#000000")
        self.del_Acc_no.configure(text='''Account Number''')

        self.del_Cust_id = tk.Entry(self.Delete_frame)
        self.del_Cust_id.place(relx=0.423, rely=0.259, height=20, relwidth=0.417)

        self.del_Cust_id.configure(background="white")
        self.del_Cust_id.configure(cursor="arrow")
        self.del_Cust_id.configure(disabledforeground="#a3a3a3")
        self.del_Cust_id.configure(font="TkFixedFont")
        self.del_Cust_id.configure(foreground="#000000")
        self.del_Cust_id.configure(insertbackground="black")

        self.del_Acc_num = tk.Entry(self.Delete_frame)
        self.del_Acc_num.place(relx=0.423, rely=0.353, height=20, relwidth=0.417)

        self.del_Acc_num.configure(background="white")
        self.del_Acc_num.configure(disabledforeground="#a3a3a3")
        self.del_Acc_num.configure(font="TkFixedFont")
        self.del_Acc_num.configure(foreground="#000000")
        self.del_Acc_num.configure(insertbackground="black")

        self.del_button = tk.Button(self.Delete_frame, command=lambda: self.deleteaccount_thread(None))
        self.del_button.place(relx=0.259, rely=0.513, height=24, width=97)
        self.del_button.configure(activebackground="#ececec")
        self.del_button.configure(activeforeground="#000000")
        self.del_button.configure(background="red")
        self.del_button.configure(disabledforeground="#a3a3a3")
        self.del_button.configure(font="-family {Verdana} -size 9 -weight bold")
        self.del_button.configure(foreground="#ffffff")
        self.del_button.configure(highlightbackground="#d9d9d9")
        self.del_button.configure(highlightcolor="black")
        self.del_button.configure(pady="0")
        self.del_button.configure(text='''Delete''')

        self.del_back = tk.Button(self.Delete_frame, command=lambda: self.show_frame(self.Emp_dash))
        self.del_back.place(relx=0.609, rely=0.513, height=24, width=97)
        self.del_back.configure(activebackground="#ececec")
        self.del_back.configure(activeforeground="#000000")
        self.del_back.configure(background="#804040")
        self.del_back.configure(disabledforeground="#a3a3a3")
        self.del_back.configure(font="-family {Verdana} -size 9 -weight bold")
        self.del_back.configure(foreground="#ffffff")
        self.del_back.configure(highlightbackground="#d9d9d9")
        self.del_back.configure(highlightcolor="black")
        self.del_back.configure(pady="0")
        self.del_back.configure(text='''Back''')

        # ----------LOAD ACCOUNT FRAME---------------------------
        self.load_frame = tk.Frame(top)
        self.load_frame.place(relx=0.183, rely=0.042, relheight=0.885
                              , relwidth=0.575)
        self.load_frame.configure(relief='groove')
        self.load_frame.configure(borderwidth="2")
        self.load_frame.configure(relief="groove")
        self.load_frame.configure(background="#d9d9d9")
        self.load_frame.configure(highlightbackground="#d9d9d9")
        self.load_frame.configure(highlightcolor="black")

        self.load_dep = tk.Label(self.load_frame)
        self.load_dep.place(relx=0.339, rely=0.047, height=21, width=188)
        self.load_dep.configure(activebackground="#f9f9f9")
        self.load_dep.configure(activeforeground="black")
        self.load_dep.configure(background="#d9d9d9")
        self.load_dep.configure(disabledforeground="#a3a3a3")
        self.load_dep.configure(font="-family {Verdana} -size 14 -weight bold")
        self.load_dep.configure(foreground="#000000")
        self.load_dep.configure(highlightbackground="#d9d9d9")
        self.load_dep.configure(highlightcolor="black")
        self.load_dep.configure(text='''LOAD ACCOUNT''')

        self.del_coylogo_1 = tk.Label(self.load_frame)
        self.del_coylogo_1.place(relx=0.026, rely=0.012, height=40, width=91)
        self.del_coylogo_1.configure(activebackground="#f9f9f9")
        self.del_coylogo_1.configure(activeforeground="black")
        self.del_coylogo_1.configure(background="#d9d9d9")
        self.del_coylogo_1.configure(disabledforeground="#a3a3a3")
        self.del_coylogo_1.configure(font="-family {Segoe UI} -size 16")
        self.del_coylogo_1.configure(foreground="#000000")
        self.del_coylogo_1.configure(highlightbackground="#d9d9d9")
        self.del_coylogo_1.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img11
        _img11 = ImageTk.PhotoImage(file=photo_location)
        self.del_coylogo_1.configure(image=_img11)
        self.del_coylogo_1.configure(text='''Label''')

        self.load_cust_acc = tk.Label(self.load_frame)
        self.load_cust_acc.place(relx=0.113, rely=0.259, height=21, width=93)
        self.load_cust_acc.configure(activebackground="#f9f9f9")
        self.load_cust_acc.configure(activeforeground="black")
        self.load_cust_acc.configure(background="#d9d9d9")
        self.load_cust_acc.configure(disabledforeground="#a3a3a3")
        self.load_cust_acc.configure(foreground="#000000")
        self.load_cust_acc.configure(highlightbackground="#d9d9d9")
        self.load_cust_acc.configure(highlightcolor="black")
        self.load_cust_acc.configure(text='''Account Number''')

        self.load_amt = tk.Label(self.load_frame)
        self.load_amt.place(relx=0.113, rely=0.353, height=21, width=52)
        self.load_amt.configure(activebackground="#f9f9f9")
        self.load_amt.configure(activeforeground="black")
        self.load_amt.configure(background="#d9d9d9")
        # self.load_amt.configure(cursor="fleur")
        self.load_amt.configure(disabledforeground="#a3a3a3")
        self.load_amt.configure(foreground="#000000")
        self.load_amt.configure(highlightbackground="#d9d9d9")
        self.load_amt.configure(highlightcolor="black")
        self.load_amt.configure(text='''Amount''')

        self.Acc_Number = tk.Entry(self.load_frame)
        self.Acc_Number.place(relx=0.423, rely=0.259, height=20, relwidth=0.417)
        self.Acc_Number.configure(background="white")
        self.Acc_Number.configure(disabledforeground="#a3a3a3")
        self.Acc_Number.configure(font="TkFixedFont")
        self.Acc_Number.configure(foreground="#000000")
        self.Acc_Number.configure(highlightbackground="#d9d9d9")
        self.Acc_Number.configure(highlightcolor="black")
        self.Acc_Number.configure(insertbackground="black")
        self.Acc_Number.configure(selectbackground="blue")
        self.Acc_Number.configure(selectforeground="white")

        self.load_amount = tk.Entry(self.load_frame)
        self.load_amount.place(relx=0.423, rely=0.353, height=20, relwidth=0.417)

        self.load_amount.configure(background="white")
        self.load_amount.configure(disabledforeground="#a3a3a3")
        self.load_amount.configure(font="TkFixedFont")
        self.load_amount.configure(foreground="#000000")
        self.load_amount.configure(highlightbackground="#d9d9d9")
        self.load_amount.configure(highlightcolor="black")
        self.load_amount.configure(insertbackground="black")
        self.load_amount.configure(selectbackground="blue")
        self.load_amount.configure(selectforeground="white")

        self.load_credit = tk.Button(self.load_frame, command=lambda: self.loadaccount_thread(None))
        self.load_credit.place(relx=0.246, rely=0.565, height=24, width=97)
        self.load_credit.configure(activebackground="#ececec")
        self.load_credit.configure(activeforeground="#000000")
        self.load_credit.configure(background="#808040")
        self.load_credit.configure(disabledforeground="#a3a3a3")
        self.load_credit.configure(font="-family {Verdana} -size 9 -weight bold")
        self.load_credit.configure(foreground="#ffffff")
        self.load_credit.configure(highlightbackground="#d9d9d9")
        self.load_credit.configure(highlightcolor="black")
        self.load_credit.configure(pady="0")
        self.load_credit.configure(text='''Credit''')

        self.load_back = tk.Button(self.load_frame, command=lambda: self.show_frame(self.Emp_dash))
        self.load_back.place(relx=0.609, rely=0.565, height=24, width=97)
        self.load_back.configure(activebackground="#ececec")
        self.load_back.configure(activeforeground="#000000")
        self.load_back.configure(background="#804040")
        self.load_back.configure(disabledforeground="#a3a3a3")
        self.load_back.configure(font="-family {Verdana} -size 9 -weight bold")
        self.load_back.configure(foreground="#ffffff")
        self.load_back.configure(highlightbackground="#d9d9d9")
        self.load_back.configure(highlightcolor="black")
        self.load_back.configure(pady="0")
        self.load_back.configure(text='''Back''')

        # self.load_Nar = tk.Label(self.load_frame)
        # self.load_Nar.place(relx=0.113, rely=0.447, height=21, width=52)
        # self.load_Nar.configure(background="#d9d9d9")
        # self.load_Nar.configure(disabledforeground="#a3a3a3")
        # self.load_Nar.configure(foreground="#000000")
        # self.load_Nar.configure(text='''Narration''')
        #
        # self.load_Narration = tk.Entry(self.load_frame)
        # self.load_Narration.place(relx=0.423, rely=0.447, height=20
        #                           , relwidth=0.417)
        # self.load_Narration.configure(background="white")
        # self.load_Narration.configure(disabledforeground="#a3a3a3")
        # self.load_Narration.configure(font="TkFixedFont")
        # self.load_Narration.configure(foreground="#000000")
        # self.load_Narration.configure(insertbackground="black")

        # ----------ACCOUNT INFO FRAME---------------------------
        self.Account_Info_frame = tk.Frame(top)
        self.Account_Info_frame.place(relx=0.183, rely=0.042, relheight=0.885
                                      , relwidth=0.575)
        self.Account_Info_frame.configure(relief='groove')
        self.Account_Info_frame.configure(borderwidth="2")
        self.Account_Info_frame.configure(relief="groove")
        self.Account_Info_frame.configure(background="#d9d9d9")

        self.info_logo = tk.Label(self.Account_Info_frame)
        self.info_logo.place(relx=0.029, rely=0.024, height=40, width=91)
        self.info_logo.configure(activebackground="#f9f9f9")
        self.info_logo.configure(activeforeground="black")
        self.info_logo.configure(background="#d9d9d9")
        self.info_logo.configure(disabledforeground="#a3a3a3")
        self.info_logo.configure(font="-family {Segoe UI} -size 16")
        self.info_logo.configure(foreground="#000000")
        self.info_logo.configure(highlightbackground="#d9d9d9")
        self.info_logo.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img12
        _img12 = ImageTk.PhotoImage(file=photo_location)
        self.info_logo.configure(image=_img12)
        self.info_logo.configure(text='''Label''')

        self.info_Acc_no = tk.Label(self.Account_Info_frame)
        self.info_Acc_no.place(relx=0.055, rely=0.235, height=21, width=92)
        self.info_Acc_no.configure(background="#d9d9d9")
        self.info_Acc_no.configure(disabledforeground="#a3a3a3")
        self.info_Acc_no.configure(foreground="#000000")
        self.info_Acc_no.configure(text='''Account Number''')

        self.info_list = tk.Text(self.Account_Info_frame, wrap="char")
        self.info_list.place(relx=0.05, rely=0.447, relheight=0.405
                             , relwidth=0.9)
        # self.info_list.configure(background="white")
        # self.info_list.configure(disabledforeground="#a3a3a3")
        self.info_list.configure(font="TkFixedFont")
        # self.info_list.configure(foreground="#000000")
        self.scrollbar = tk.Scrollbar(self.info_list, cursor="arrow")
        self.scrollbar.pack(side="right", fill="y")
        self.info_list.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.info_list.yview)
        self.horscroll = tk.Scrollbar(self.info_list, orient="horizontal")
        self.horscroll.pack(side="bottom", fill="x")
        self.info_list.config(xscrollcommand=self.horscroll.set)
        self.horscroll.config(command=self.info_list.xview)

        self.info_Acc_Num = tk.Entry(self.Account_Info_frame)
        self.info_Acc_Num.place(relx=0.365, rely=0.235, height=20
                                , relwidth=0.562)
        self.info_Acc_Num.configure(background="white")
        self.info_Acc_Num.configure(disabledforeground="#a3a3a3")
        self.info_Acc_Num.configure(font="TkFixedFont")
        self.info_Acc_Num.configure(foreground="#000000")
        self.info_Acc_Num.configure(insertbackground="black")

        self.info_check = tk.Button(self.Account_Info_frame, command=lambda: self.accdetails_thread(None))
        self.info_check.place(relx=0.394, rely=0.329, height=24, width=87)
        self.info_check.configure(activebackground="#ececec")
        self.info_check.configure(activeforeground="#000000")
        self.info_check.configure(background="#808040")
        self.info_check.configure(disabledforeground="#a3a3a3")
        self.info_check.configure(font="-family {Verdana} -size 9 -weight bold")
        self.info_check.configure(foreground="#ffffff")
        self.info_check.configure(highlightbackground="#d9d9d9")
        self.info_check.configure(highlightcolor="black")
        self.info_check.configure(pady="0")
        self.info_check.configure(text='''Check''')

        self.Acc_Info_Save = tk.Button(self.Account_Info_frame, command=lambda: self.saveasthread(None))
        self.Acc_Info_Save.place(relx=0.4, rely=0.901, height=24, width=87)
        self.Acc_Info_Save.configure(activebackground="#ececec")
        self.Acc_Info_Save.configure(activeforeground="#000000")
        self.Acc_Info_Save.configure(background="#808040")
        self.Acc_Info_Save.configure(disabledforeground="#a3a3a3")
        self.Acc_Info_Save.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Acc_Info_Save.configure(foreground="#ffffff")
        self.Acc_Info_Save.configure(highlightbackground="#d9d9d9")
        self.Acc_Info_Save.configure(highlightcolor="black")
        self.Acc_Info_Save.configure(pady="0")
        self.Acc_Info_Save.configure(text='''Save''')

        self.Acc_Info_back = tk.Button(self.Account_Info_frame, command=lambda: self.backforaccountinfo(self.Emp_dash))
        self.Acc_Info_back.place(relx=0.667, rely=0.901, height=24, width=87)
        self.Acc_Info_back.configure(activebackground="#ececec")
        self.Acc_Info_back.configure(activeforeground="#000000")
        self.Acc_Info_back.configure(background="#804040")
        self.Acc_Info_back.configure(disabledforeground="#a3a3a3")
        self.Acc_Info_back.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Acc_Info_back.configure(foreground="#ffffff")
        self.Acc_Info_back.configure(highlightbackground="#d9d9d9")
        self.Acc_Info_back.configure(highlightcolor="black")
        self.Acc_Info_back.configure(pady="0")
        self.Acc_Info_back.configure(text='''Back''')

        self.info_label = tk.Label(self.Account_Info_frame)
        self.info_label.place(relx=0.394, rely=0.047, height=21, width=169)
        self.info_label.configure(background="#d9d9d9")
        self.info_label.configure(disabledforeground="#a3a3a3")
        self.info_label.configure(font="-family {Verdana} -size 14 -weight bold")
        self.info_label.configure(foreground="#000000")
        self.info_label.configure(text='''ACCOUNT INFO''')

        # --------------------------------TRANSFER FRAME----------------------

        self.Transfer = tk.Frame(top)
        self.Transfer.place(relx=0.183, rely=0.044, relheight=0.885
                            , relwidth=0.575)
        self.Transfer.configure(relief='groove')
        self.Transfer.configure(borderwidth="2")
        self.Transfer.configure(relief="groove")
        self.Transfer.configure(background="#d9d9d9")
        self.Transfer.configure(highlightbackground="#d9d9d9")
        self.Transfer.configure(highlightcolor="black")

        self.BANK_TRANSFER = tk.Label(self.Transfer)
        self.BANK_TRANSFER.place(relx=0.203, rely=0.025, height=47, width=210)
        self.BANK_TRANSFER.configure(activebackground="#f9f9f9")
        self.BANK_TRANSFER.configure(activeforeground="black")
        self.BANK_TRANSFER.configure(background="#d9d9d9")
        self.BANK_TRANSFER.configure(disabledforeground="#a3a3a3")
        self.BANK_TRANSFER.configure(font="-family {Verdana} -size 11 -weight bold")
        self.BANK_TRANSFER.configure(foreground="#000000")
        self.BANK_TRANSFER.configure(highlightbackground="#d9d9d9")
        self.BANK_TRANSFER.configure(highlightcolor="black")
        self.BANK_TRANSFER.configure(text='''TRANSFER (TO AZBANK)''')

        self.Account_debit = tk.Label(self.Transfer)
        self.Account_debit.place(relx=0.029, rely=0.201, height=37, width=82)
        self.Account_debit.configure(activebackground="#f9f9f9")
        self.Account_debit.configure(activeforeground="black")
        self.Account_debit.configure(background="#d9d9d9")
        self.Account_debit.configure(disabledforeground="#a3a3a3")
        self.Account_debit.configure(font="-family {Segoe UI} -size 10")
        self.Account_debit.configure(foreground="#000000")
        self.Account_debit.configure(highlightbackground="#d9d9d9")
        self.Account_debit.configure(highlightcolor="black")
        self.Account_debit.configure(text='''Beneficiary''')

        # self.Bank = tk.Label(self.Transfer)
        # self.Bank.place(relx=0.029, rely=0.426, height=20, width=82)
        # self.Bank.configure(activebackground="#f9f9f9")
        # self.Bank.configure(activeforeground="black")
        # self.Bank.configure(background="#d9d9d9")
        # self.Bank.configure(disabledforeground="#a3a3a3")
        # self.Bank.configure(font="-family {Segoe UI} -size 10")
        # self.Bank.configure(foreground="#000000")
        # self.Bank.configure(highlightbackground="#d9d9d9")
        # self.Bank.configure(highlightcolor="black")
        # self.Bank.configure(text='''Beneficiary''')

        # self.bank_trans_Entry2 = tk.Entry(self.Transfer)
        # self.bank_trans_Entry2.place(relx=0.29, rely=0.426, height=20, relwidth=0.243)
        # self.bank_trans_Entry2.configure(background="white")
        # self.bank_trans_Entry2.configure(disabledforeground="#a3a3a3")
        # self.bank_trans_Entry2.configure(font="TkFixedFont")
        # self.bank_trans_Entry2.configure(foreground="#000000")
        # self.bank_trans_Entry2.configure(highlightbackground="#d9d9d9")
        # self.bank_trans_Entry2.configure(highlightcolor="black")
        # self.bank_trans_Entry2.configure(insertbackground="black")
        # self.bank_trans_Entry2.configure(selectbackground="blue")
        # self.bank_trans_Entry2.configure(selectforeground="white")

        self.amount = tk.Label(self.Transfer)
        self.amount.place(relx=0.551, rely=0.201, height=37, width=55)
        self.amount.configure(activeforeground="black")
        self.amount.configure(background="#d9d9d9")
        self.amount.configure(disabledforeground="#a3a3a3")
        self.amount.configure(font="-family {Segoe UI} -size 10")
        self.amount.configure(foreground="#000000")
        self.amount.configure(highlightbackground="#d9d9d9")
        self.amount.configure(highlightcolor="black")
        self.amount.configure(text='''Amount''')

        self.Narration = tk.Label(self.Transfer)
        self.Narration.place(relx=0.251, rely=0.40, height=20, width=58)
        self.Narration.configure(activebackground="#f9f9f9")
        self.Narration.configure(activeforeground="black")
        self.Narration.configure(background="#d9d9d9")
        self.Narration.configure(disabledforeground="#a3a3a3")
        self.Narration.configure(font="-family {Segoe UI} -size 10")
        self.Narration.configure(foreground="#000000")
        self.Narration.configure(highlightbackground="#d9d9d9")
        self.Narration.configure(highlightcolor="black")
        self.Narration.configure(text='''Narration''')

        self.amount_trans_Entry3 = tk.Entry(self.Transfer)
        self.amount_trans_Entry3.place(relx=0.725, rely=0.226, height=20, relwidth=0.243)
        self.amount_trans_Entry3.configure(background="white")
        self.amount_trans_Entry3.configure(disabledforeground="#a3a3a3")
        self.amount_trans_Entry3.configure(font="TkFixedFont")
        self.amount_trans_Entry3.configure(foreground="#000000")
        self.amount_trans_Entry3.configure(highlightbackground="#d9d9d9")
        self.amount_trans_Entry3.configure(highlightcolor="black")
        self.amount_trans_Entry3.configure(insertbackground="black")
        self.amount_trans_Entry3.configure(selectbackground="blue")
        self.amount_trans_Entry3.configure(selectforeground="white")

        self.narr_trans_Entry4 = tk.Entry(self.Transfer)
        self.narr_trans_Entry4.place(relx=0.48, rely=0.40, height=20, relwidth=0.283)
        self.narr_trans_Entry4.configure(background="white")
        self.narr_trans_Entry4.configure(disabledforeground="#a3a3a3")
        self.narr_trans_Entry4.configure(font="TkFixedFont")
        self.narr_trans_Entry4.configure(foreground="#000000")
        self.narr_trans_Entry4.configure(highlightbackground="#d9d9d9")
        self.narr_trans_Entry4.configure(highlightcolor="black")
        self.narr_trans_Entry4.configure(insertbackground="black")
        self.narr_trans_Entry4.configure(selectbackground="blue")
        self.narr_trans_Entry4.configure(selectforeground="white")

        self.Pin = tk.Label(self.Transfer)
        self.Pin.place(relx=0.406, rely=0.579, height=19, width=26)
        self.Pin.configure(activebackground="#f9f9f9")
        self.Pin.configure(activeforeground="black")
        self.Pin.configure(background="#d9d9d9")
        self.Pin.configure(disabledforeground="#a3a3a3")
        self.Pin.configure(font="-family {Segoe UI} -size 10")
        self.Pin.configure(foreground="#000000")
        self.Pin.configure(highlightbackground="#d9d9d9")
        self.Pin.configure(highlightcolor="black")
        self.Pin.configure(text='''Pin''')

        self.pin_trans_Entry5 = tk.Entry(self.Transfer, show="*")
        self.pin_trans_Entry5.place(relx=0.493, rely=0.579, height=20, relwidth=0.243)
        self.pin_trans_Entry5.configure(background="white")
        self.pin_trans_Entry5.configure(disabledforeground="#a3a3a3")
        self.pin_trans_Entry5.configure(font="TkFixedFont")
        self.pin_trans_Entry5.configure(foreground="#000000")
        self.pin_trans_Entry5.configure(highlightbackground="#d9d9d9")
        self.pin_trans_Entry5.configure(highlightcolor="black")
        self.pin_trans_Entry5.configure(insertbackground="black")
        self.pin_trans_Entry5.configure(selectbackground="blue")
        self.pin_trans_Entry5.configure(selectforeground="white")

        self.trans_ENTER = tk.Button(self.Transfer, command=lambda: self.transfer_thread(None))
        self.trans_ENTER.place(relx=0.609, rely=0.779, height=24, width=57)
        self.trans_ENTER.configure(activebackground="#ececec")
        self.trans_ENTER.configure(activeforeground="#000000")
        self.trans_ENTER.configure(background="#808040")
        self.trans_ENTER.configure(disabledforeground="#a3a3a3")
        self.trans_ENTER.configure(font="-family {Verdana} -size 9 -weight bold")
        self.trans_ENTER.configure(foreground="#ffffff")
        self.trans_ENTER.configure(highlightbackground="#d9d9d9")
        self.trans_ENTER.configure(highlightcolor="black")
        self.trans_ENTER.configure(pady="0")
        self.trans_ENTER.configure(text='''Enter''')

        self.trans_EXIT = tk.Button(self.Transfer, command=lambda: self.show_frame(self.User_banking))
        self.trans_EXIT.place(relx=0.783, rely=0.779, height=24, width=53)
        self.trans_EXIT.configure(activebackground="#ececec")
        self.trans_EXIT.configure(activeforeground="#000000")
        self.trans_EXIT.configure(background="#804040")
        self.trans_EXIT.configure(disabledforeground="#a3a3a3")
        self.trans_EXIT.configure(font="-family {Verdana} -size 9 -weight bold")
        self.trans_EXIT.configure(foreground="#ffffff")
        self.trans_EXIT.configure(highlightbackground="#d9d9d9")
        self.trans_EXIT.configure(highlightcolor="black")
        self.trans_EXIT.configure(pady="0")
        self.trans_EXIT.configure(text='''Back''')

        self.accno_trans_Entry1 = tk.Entry(self.Transfer)
        self.accno_trans_Entry1.place(relx=0.29, rely=0.226, height=20, relwidth=0.243)
        self.accno_trans_Entry1.configure(background="white")
        self.accno_trans_Entry1.configure(disabledforeground="#a3a3a3")
        self.accno_trans_Entry1.configure(font="TkFixedFont")
        self.accno_trans_Entry1.configure(foreground="#000000")
        self.accno_trans_Entry1.configure(highlightbackground="#d9d9d9")
        self.accno_trans_Entry1.configure(highlightcolor="black")
        self.accno_trans_Entry1.configure(insertbackground="black")
        self.accno_trans_Entry1.configure(selectbackground="blue")
        self.accno_trans_Entry1.configure(selectforeground="white")

        self.Transfer_logo = tk.Label(self.Transfer)
        self.Transfer_logo.place(relx=0.058, rely=0.852, height=51, width=104)
        self.Transfer_logo.configure(background="#d9d9d9")
        self.Transfer_logo.configure(disabledforeground="#a3a3a3")
        self.Transfer_logo.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img20
        _img20 = ImageTk.PhotoImage(file=photo_location)
        self.Transfer_logo.configure(image=_img20)
        self.Transfer_logo.configure(text='''Label''')

        # --------------------------------VTU (AIRTIME) FRAME----------------------
        self.Airtime = tk.Frame(top)
        self.Airtime.place(relx=0.183, rely=0.044, relheight=0.885
                           , relwidth=0.575)
        self.Airtime.configure(relief='groove')
        self.Airtime.configure(borderwidth="2")
        self.Airtime.configure(relief="groove")
        self.Airtime.configure(background="#d9d9d9")
        self.Airtime.configure(highlightbackground="#d9d9d9")
        self.Airtime.configure(highlightcolor="black")

        self.AIRTIME_RECHARGE = tk.Label(self.Airtime)
        self.AIRTIME_RECHARGE.place(relx=0.203, rely=0.025, height=40, width=214)

        self.AIRTIME_RECHARGE.configure(activebackground="#f9f9f9")
        self.AIRTIME_RECHARGE.configure(activeforeground="black")
        self.AIRTIME_RECHARGE.configure(background="#d9d9d9")
        self.AIRTIME_RECHARGE.configure(disabledforeground="#a3a3a3")
        self.AIRTIME_RECHARGE.configure(font="-family {Verdana} -size 11 -weight bold")
        # self.AIRTIME_RECHARGE.configure(font="-family {Segoe UI} -size 10")
        self.AIRTIME_RECHARGE.configure(foreground="#000000")
        self.AIRTIME_RECHARGE.configure(highlightbackground="#d9d9d9")
        self.AIRTIME_RECHARGE.configure(highlightcolor="black")
        self.AIRTIME_RECHARGE.configure(text='''AIRTIME RECHARGE''')

        self.vendor = tk.Label(self.Airtime)
        self.vendor.place(relx=0.058, rely=0.166, height=21, width=54)
        self.vendor.configure(activebackground="#f9f9f9")
        self.vendor.configure(activeforeground="black")
        self.vendor.configure(background="#d9d9d9")
        self.vendor.configure(disabledforeground="#a3a3a3")
        self.vendor.configure(font="-family {Segoe UI} -size 10")
        self.vendor.configure(foreground="#000000")
        self.vendor.configure(highlightbackground="#d9d9d9")
        self.vendor.configure(highlightcolor="black")
        self.vendor.configure(text='''Vendor''')

        v = tk.StringVar()
        self.vendor_TCombobox2 = ttk.Combobox(self.Airtime)
        self.vendor_TCombobox2.place(relx=0.406, rely=0.166, relheight=0.053
                                     , relwidth=0.241)
        self.vendor_TCombobox2.configure(textvariable=v)
        self.vendor_TCombobox2.configure(takefocus="")
        self.vendor_TCombobox2['values'] = ('MTN', 'Airtel', 'Glo', '9mobile')

        self.Phone_no = tk.Label(self.Airtime)
        self.Phone_no.place(relx=0.058, rely=0.310, height=21, width=54)
        self.Phone_no.configure(activebackground="#f9f9f9")
        self.Phone_no.configure(activeforeground="black")
        self.Phone_no.configure(background="#d9d9d9")
        self.Phone_no.configure(disabledforeground="#a3a3a3")
        self.Phone_no.configure(font="-family {Segoe UI} -size 10")
        self.Phone_no.configure(foreground="#000000")
        self.Phone_no.configure(highlightbackground="#d9d9d9")
        self.Phone_no.configure(highlightcolor="black")
        self.Phone_no.configure(text='''Phone''')

        self.Amount_air = tk.Label(self.Airtime)
        self.Amount_air.place(relx=0.058, rely=0.454, height=21, width=54)
        self.Amount_air.configure(activebackground="#f9f9f9")
        self.Amount_air.configure(activeforeground="black")
        self.Amount_air.configure(background="#d9d9d9")
        self.Amount_air.configure(disabledforeground="#a3a3a3")
        self.Amount_air.configure(font="-family {Segoe UI} -size 10")
        self.Amount_air.configure(foreground="#000000")
        self.Amount_air.configure(highlightbackground="#d9d9d9")
        self.Amount_air.configure(highlightcolor="black")
        self.Amount_air.configure(text='''Amount''')

        self.narration_air_Label1 = tk.Label(self.Airtime)
        self.narration_air_Label1.place(relx=0.058, rely=0.598, height=21, width=64)
        self.narration_air_Label1.configure(activebackground="#f9f9f9")
        self.narration_air_Label1.configure(activeforeground="black")
        self.narration_air_Label1.configure(background="#d9d9d9")
        self.narration_air_Label1.configure(disabledforeground="#a3a3a3")
        self.narration_air_Label1.configure(font="-family {Segoe UI} -size 10")
        self.narration_air_Label1.configure(foreground="#000000")
        self.narration_air_Label1.configure(highlightbackground="#d9d9d9")
        self.narration_air_Label1.configure(highlightcolor="black")
        self.narration_air_Label1.configure(text='''Narration''')

        self.pin_air_Label2 = tk.Label(self.Airtime)
        self.pin_air_Label2.place(relx=0.058, rely=0.742, height=21, width=34)
        self.pin_air_Label2.configure(activebackground="#f9f9f9")
        self.pin_air_Label2.configure(activeforeground="black")
        self.pin_air_Label2.configure(background="#d9d9d9")
        self.pin_air_Label2.configure(disabledforeground="#a3a3a3")
        self.pin_air_Label2.configure(font="-family {Segoe UI} -size 10")
        self.pin_air_Label2.configure(foreground="#000000")
        self.pin_air_Label2.configure(highlightbackground="#d9d9d9")
        self.pin_air_Label2.configure(highlightcolor="black")
        self.pin_air_Label2.configure(text='''Pin''')

        self.enter_airtime_Button1 = tk.Button(self.Airtime, command=lambda: self.airtimerecharge_thread(None))
        self.enter_airtime_Button1.place(relx=0.621, rely=0.85, height=24, width=57)
        self.enter_airtime_Button1.configure(activebackground="#ececec")
        self.enter_airtime_Button1.configure(activeforeground="#000000")
        self.enter_airtime_Button1.configure(background="#808040")
        self.enter_airtime_Button1.configure(disabledforeground="#a3a3a3")
        self.enter_airtime_Button1.configure(font="-family {Verdana} -size 10 -weight bold")
        self.enter_airtime_Button1.configure(foreground="#ffffff")
        self.enter_airtime_Button1.configure(highlightbackground="#d9d9d9")
        self.enter_airtime_Button1.configure(highlightcolor="black")
        self.enter_airtime_Button1.configure(pady="0")
        self.enter_airtime_Button1.configure(text='''Enter''')

        self.back_airtime_Button2 = tk.Button(self.Airtime, command=lambda: self.show_frame(self.User_banking))
        self.back_airtime_Button2.place(relx=0.812, rely=0.85, height=24, width=57)
        self.back_airtime_Button2.configure(activebackground="#ececec")
        self.back_airtime_Button2.configure(activeforeground="#000000")
        self.back_airtime_Button2.configure(background="#804040")
        self.back_airtime_Button2.configure(disabledforeground="#a3a3a3")
        self.back_airtime_Button2.configure(font="-family {Verdana} -size 10 -weight bold")
        self.back_airtime_Button2.configure(foreground="#ffffff")
        self.back_airtime_Button2.configure(highlightbackground="#d9d9d9")
        self.back_airtime_Button2.configure(highlightcolor="black")
        self.back_airtime_Button2.configure(pady="0")
        self.back_airtime_Button2.configure(text='''Back''')

        self.narration_air_Entry6 = tk.Entry(self.Airtime)
        self.narration_air_Entry6.place(relx=0.406, rely=0.598, height=20, relwidth=0.243, width=60)
        self.narration_air_Entry6.configure(background="white")
        self.narration_air_Entry6.configure(disabledforeground="#a3a3a3")
        self.narration_air_Entry6.configure(font="TkFixedFont")
        self.narration_air_Entry6.configure(foreground="#000000")
        self.narration_air_Entry6.configure(highlightbackground="#d9d9d9")
        self.narration_air_Entry6.configure(highlightcolor="black")
        self.narration_air_Entry6.configure(insertbackground="black")
        self.narration_air_Entry6.configure(selectbackground="blue")
        self.narration_air_Entry6.configure(selectforeground="white")

        self.Airtime_Phone = tk.Entry(self.Airtime)
        self.Airtime_Phone.place(relx=0.406, rely=0.310, height=20, relwidth=0.243, width=60)
        self.Airtime_Phone.configure(background="white")
        self.Airtime_Phone.configure(disabledforeground="#a3a3a3")
        self.Airtime_Phone.configure(font="TkFixedFont")
        self.Airtime_Phone.configure(foreground="#000000")
        self.Airtime_Phone.configure(highlightbackground="#d9d9d9")
        self.Airtime_Phone.configure(highlightcolor="black")
        self.Airtime_Phone.configure(insertbackground="black")
        self.Airtime_Phone.configure(selectbackground="blue")
        self.Airtime_Phone.configure(selectforeground="white")

        self.pin_air_Entry8 = tk.Entry(self.Airtime, show="*")
        self.pin_air_Entry8.place(relx=0.406, rely=0.742, height=20, relwidth=0.243, width=60)
        self.pin_air_Entry8.configure(background="white")
        self.pin_air_Entry8.configure(disabledforeground="#a3a3a3")
        self.pin_air_Entry8.configure(font="TkFixedFont")
        self.pin_air_Entry8.configure(foreground="#000000")
        self.pin_air_Entry8.configure(highlightbackground="#d9d9d9")
        self.pin_air_Entry8.configure(highlightcolor="black")
        self.pin_air_Entry8.configure(insertbackground="black")
        self.pin_air_Entry8.configure(selectbackground="blue")
        self.pin_air_Entry8.configure(selectforeground="white")

        self.Airtime_logo = tk.Label(self.Airtime)
        self.Airtime_logo.place(relx=0.058, rely=0.877, height=41, width=114)
        self.Airtime_logo.configure(background="#d9d9d9")
        self.Airtime_logo.configure(disabledforeground="#a3a3a3")
        self.Airtime_logo.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img21
        _img21 = ImageTk.PhotoImage(file=photo_location)
        self.Airtime_logo.configure(image=_img21)
        self.Airtime_logo.configure(text='''Label''')

        self.Airtime_Amount = tk.Entry(self.Airtime)
        self.Airtime_Amount.place(relx=0.406, rely=0.454, height=20
                                  , relwidth=0.243, width=60)
        self.Airtime_Amount.configure(background="white")
        self.Airtime_Amount.configure(disabledforeground="#a3a3a3")
        self.Airtime_Amount.configure(font="TkFixedFont")
        self.Airtime_Amount.configure(foreground="#000000")
        self.Airtime_Amount.configure(insertbackground="black")

        # ---------------USER BANKING FRAME------------------------------------
        self.User_banking = tk.Frame(top)
        self.User_banking.place(relx=0.183, rely=0.042, relheight=0.885
                                , relwidth=0.575)
        self.User_banking.configure(relief='groove')
        self.User_banking.configure(borderwidth="2")
        self.User_banking.configure(relief="groove")
        self.User_banking.configure(background="#d9d9d9")

        self.Welcome_Reg = tk.Label(self.User_banking)
        self.Welcome_Reg.place(relx=0.058, rely=0.126, height=21, width=70)
        self.Welcome_Reg.configure(background="#d9d9d9")
        self.Welcome_Reg.configure(disabledforeground="#a3a3a3")
        self.Welcome_Reg.configure(font="-family {Verdana} -size 10")
        self.Welcome_Reg.configure(foreground="#000000")
        self.Welcome_Reg.configure(text='''Welcome,''')

        self.balance_label = tk.Label(self.User_banking)
        self.balance_label.place(relx=0.058, rely=0.196, height=21, width=70)
        self.balance_label.configure(background="#d9d9d9")
        self.balance_label.configure(disabledforeground="#a3a3a3")
        self.balance_label.configure(font="-family {Verdana} -size 10")
        self.balance_label.configure(foreground="#000000")
        self.balance_label.configure(text='''Balance: ''')

        self.user_label = tk.Label(self.User_banking)
        self.user_label.place(relx=0.265, rely=0.126, height=20, relwidth=0.33)
        self.user_label.configure(background="#d9d9d9")
        self.user_label.configure(disabledforeground="#a3a3a3")
        self.user_label.configure(font="-family {Verdana} -size 10")
        self.user_label.configure(foreground="#000000")
        self.user_label.configure(text="")

        self.balanceamt_label = tk.Label(self.User_banking)
        self.balanceamt_label.place(relx=0.265, rely=0.196, height=21, width=100)
        self.balanceamt_label.configure(background="#d9d9d9")
        self.balanceamt_label.configure(disabledforeground="#a3a3a3")
        self.balanceamt_label.configure(font="-family {Verdana} -size 10")
        self.balanceamt_label.configure(foreground="#000000")
        self.balanceamt_label.configure(text="")

        self.Bills_Payment_Reg = tk.Label(self.User_banking)
        self.Bills_Payment_Reg.place(relx=0.029, rely=0.301, height=21, width=124)

        self.Bills_Payment_Reg.configure(background="#d9d9d9")
        self.Bills_Payment_Reg.configure(disabledforeground="#a3a3a3")
        self.Bills_Payment_Reg.configure(font="-family {Verdana} -size 10")
        self.Bills_Payment_Reg.configure(foreground="#000000")
        self.Bills_Payment_Reg.configure(text='''Bills Payment''')

        self.Bank_Transfer_Reg = tk.Label(self.User_banking)
        self.Bank_Transfer_Reg.place(relx=0.029, rely=0.402, height=21
                                     , width=124)
        self.Bank_Transfer_Reg.configure(background="#d9d9d9")
        self.Bank_Transfer_Reg.configure(disabledforeground="#a3a3a3")
        self.Bank_Transfer_Reg.configure(font="-family {Verdana} -size 10")
        self.Bank_Transfer_Reg.configure(foreground="#000000")
        self.Bank_Transfer_Reg.configure(text='''Bank Transfer''')

        self.USER_BANKING_INTERFACE_Reg = tk.Label(self.User_banking)
        self.USER_BANKING_INTERFACE_Reg.place(relx=0.252, rely=0.025, height=21
                                              , width=187)
        self.USER_BANKING_INTERFACE_Reg.configure(background="#d9d9d9")
        self.USER_BANKING_INTERFACE_Reg.configure(disabledforeground="#a3a3a3")
        self.USER_BANKING_INTERFACE_Reg.configure(font="-family {Verdana} -size 10 -weight bold")
        self.USER_BANKING_INTERFACE_Reg.configure(foreground="#000000")
        self.USER_BANKING_INTERFACE_Reg.configure(text='''USER BANKING INTERFACE''')

        self.Airtime_Recharge_Reg = tk.Label(self.User_banking)
        self.Airtime_Recharge_Reg.place(relx=0.029, rely=0.503, height=21
                                        , width=124)
        self.Airtime_Recharge_Reg.configure(background="#d9d9d9")
        self.Airtime_Recharge_Reg.configure(disabledforeground="#a3a3a3")
        self.Airtime_Recharge_Reg.configure(font="-family {Verdana} -size 10")
        self.Airtime_Recharge_Reg.configure(foreground="#000000")
        self.Airtime_Recharge_Reg.configure(text='''Airtime Recharge''')

        self.Bill_Payment = tk.Button(self.User_banking, command=lambda: self.show_frame(self.BILLS_PAYMENT_Frame))
        self.Bill_Payment.place(relx=0.435, rely=0.301, height=24, width=87)
        self.Bill_Payment.configure(activebackground="#ececec")
        self.Bill_Payment.configure(activeforeground="#000000")
        self.Bill_Payment.configure(background="#808040")
        self.Bill_Payment.configure(disabledforeground="#a3a3a3")
        self.Bill_Payment.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Bill_Payment.configure(foreground="#ffffff")
        self.Bill_Payment.configure(highlightbackground="#d9d9d9")
        self.Bill_Payment.configure(highlightcolor="black")
        self.Bill_Payment.configure(pady="0")
        self.Bill_Payment.configure(text='''Payment''')

        self.Bank_Transfer = tk.Button(self.User_banking, command=lambda: self.show_frame(self.Transfer))
        self.Bank_Transfer.place(relx=0.435, rely=0.402, height=24, width=87)
        self.Bank_Transfer.configure(activebackground="#ececec")
        self.Bank_Transfer.configure(activeforeground="#000000")
        self.Bank_Transfer.configure(background="#808040")
        self.Bank_Transfer.configure(disabledforeground="#a3a3a3")
        self.Bank_Transfer.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Bank_Transfer.configure(foreground="#ffffff")
        self.Bank_Transfer.configure(highlightbackground="#d9d9d9")
        self.Bank_Transfer.configure(highlightcolor="black")
        self.Bank_Transfer.configure(pady="0")
        self.Bank_Transfer.configure(text='''Transfer''')

        self.Airtime_Recharge = tk.Button(self.User_banking, command=lambda: self.show_frame(self.Airtime))
        self.Airtime_Recharge.place(relx=0.435, rely=0.503, height=24, width=87)
        self.Airtime_Recharge.configure(activebackground="#ececec")
        self.Airtime_Recharge.configure(activeforeground="#000000")
        self.Airtime_Recharge.configure(background="#808040")
        self.Airtime_Recharge.configure(disabledforeground="#a3a3a3")
        self.Airtime_Recharge.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Airtime_Recharge.configure(foreground="#ffffff")
        self.Airtime_Recharge.configure(highlightbackground="#d9d9d9")
        self.Airtime_Recharge.configure(highlightcolor="black")
        self.Airtime_Recharge.configure(pady="0")
        self.Airtime_Recharge.configure(text='''Recharge''')

        self.acc_statement = tk.Label(self.User_banking)
        self.acc_statement.place(relx=0.029, rely=0.603, height=21, width=124)

        self.acc_statement.configure(background="#d9d9d9")
        self.acc_statement.configure(disabledforeground="#a3a3a3")
        self.acc_statement.configure(font="-family {Verdana} -size 10")
        self.acc_statement.configure(foreground="#000000")
        self.acc_statement.configure(text='''Acc. Statement''')

        self.btn_statement = tk.Button(self.User_banking, command=lambda: self.statement_thread(None))
        self.btn_statement.place(relx=0.435, rely=0.603, height=24, width=87)
        self.btn_statement.configure(activebackground="#ececec")
        self.btn_statement.configure(activeforeground="#000000")
        self.btn_statement.configure(background="#808040")
        self.btn_statement.configure(disabledforeground="#a3a3a3")
        self.btn_statement.configure(font="-family {Verdana} -size 10 -weight bold")
        self.btn_statement.configure(foreground="#ffffff")
        self.btn_statement.configure(highlightbackground="#d9d9d9")
        self.btn_statement.configure(highlightcolor="black")
        self.btn_statement.configure(pady="0")
        self.btn_statement.configure(text='''Statement''')

        self.update_pass = tk.Label(self.User_banking)
        self.update_pass.place(relx=0.029, rely=0.703, height=21, width=124)
        self.update_pass.configure(background="#d9d9d9")
        self.update_pass.configure(disabledforeground="#a3a3a3")
        self.update_pass.configure(font="-family {Verdana} -size 10")
        self.update_pass.configure(foreground="#000000")
        self.update_pass.configure(text='''Update Password''')

        self.btn_uppass = tk.Button(self.User_banking, command=lambda: self.show_frame(self.update_pass))
        self.btn_uppass.place(relx=0.435, rely=0.703, height=24, width=87)
        self.btn_uppass.configure(activebackground="#ececec")
        self.btn_uppass.configure(activeforeground="#000000")
        self.btn_uppass.configure(background="#808040")
        self.btn_uppass.configure(disabledforeground="#a3a3a3")
        self.btn_uppass.configure(font="-family {Verdana} -size 10 -weight bold")
        self.btn_uppass.configure(foreground="#ffffff")
        self.btn_uppass.configure(highlightbackground="#d9d9d9")
        self.btn_uppass.configure(highlightcolor="black")
        self.btn_uppass.configure(pady="0")
        self.btn_uppass.configure(text='''Update''')

        self.update_pin = tk.Label(self.User_banking)
        self.update_pin.place(relx=0.029, rely=0.803, height=21, width=124)
        self.update_pin.configure(background="#d9d9d9")
        self.update_pin.configure(disabledforeground="#a3a3a3")
        self.update_pin.configure(font="-family {Verdana} -size 10")
        self.update_pin.configure(foreground="#000000")
        self.update_pin.configure(text='''Update Pin''')

        self.btn_uppin = tk.Button(self.User_banking, command=lambda: self.show_frame(self.update_pin))
        self.btn_uppin.place(relx=0.435, rely=0.803, height=24, width=87)
        self.btn_uppin.configure(activebackground="#ececec")
        self.btn_uppin.configure(activeforeground="#000000")
        self.btn_uppin.configure(background="#808040")
        self.btn_uppin.configure(disabledforeground="#a3a3a3")
        self.btn_uppin.configure(font="-family {Verdana} -size 10 -weight bold")
        self.btn_uppin.configure(foreground="#ffffff")
        self.btn_uppin.configure(highlightbackground="#d9d9d9")
        self.btn_uppin.configure(highlightcolor="black")
        self.btn_uppin.configure(pady="0")
        self.btn_uppin.configure(text='''Update''')

        self.Back_Button = tk.Button(self.User_banking, command=self.user_logout)
        self.Back_Button.place(relx=0.319, rely=0.92, height=24, width=87)
        self.Back_Button.configure(activebackground="#ececec")
        self.Back_Button.configure(activeforeground="#000000")
        self.Back_Button.configure(background="#804040")
        self.Back_Button.configure(disabledforeground="#a3a3a3")
        self.Back_Button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Back_Button.configure(foreground="#ffffff")
        self.Back_Button.configure(highlightbackground="#d9d9d9")
        self.Back_Button.configure(highlightcolor="black")
        self.Back_Button.configure(pady="0")
        self.Back_Button.configure(text='''Logout''')

        self.user_banking_logo = tk.Label(self.User_banking)
        self.user_banking_logo.place(relx=0.667, rely=0.88, height=51
                                     , width=104)
        self.user_banking_logo.configure(background="#d9d9d9")
        self.user_banking_logo.configure(disabledforeground="#a3a3a3")
        self.user_banking_logo.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img30
        _img30 = ImageTk.PhotoImage(file=photo_location)
        self.user_banking_logo.configure(image=_img30)
        self.user_banking_logo.configure(text='''Label''')

        # ---------------BILLS PAYMENT--------------------------
        self.BILLS_PAYMENT_Frame = tk.Frame(top)
        self.BILLS_PAYMENT_Frame.place(relx=0.183, rely=0.042, relheight=0.885
                                       , relwidth=0.575)
        self.BILLS_PAYMENT_Frame.configure(relief='groove')
        self.BILLS_PAYMENT_Frame.configure(borderwidth="2")
        self.BILLS_PAYMENT_Frame.configure(relief="groove")
        self.BILLS_PAYMENT_Frame.configure(background="#d9d9d9")

        self.BILLS_PAYMENT_Reg = tk.Label(self.BILLS_PAYMENT_Frame)
        self.BILLS_PAYMENT_Reg.place(relx=0.29, rely=0.052, height=22, width=131)

        self.BILLS_PAYMENT_Reg.configure(background="#d9d9d9")
        self.BILLS_PAYMENT_Reg.configure(disabledforeground="#a3a3a3")
        self.BILLS_PAYMENT_Reg.configure(font="-family {Verdana} -size 10 -weight bold")
        self.BILLS_PAYMENT_Reg.configure(foreground="#000000")
        self.BILLS_PAYMENT_Reg.configure(text='''BILLS PAYMENT''')

        # self.accountno_bills_label = tk.Label(self.BILLS_PAYMENT_Frame)
        # self.accountno_bills_label.place(relx=0.088, rely=0.304, height=23, width=82)
        # self.accountno_bills_label.configure(background="#d9d9d9")
        # self.accountno_bills_label.configure(disabledforeground="#a3a3a3")
        # self.accountno_bills_label.configure(font="-family {Verdana} -size 10")
        # self.accountno_bills_label.configure(foreground="#000000")
        # self.accountno_bills_label.configure(text='''Beneficiary''')
        #
        # self.accountno_bills_Entry = tk.Entry(self.BILLS_PAYMENT_Frame)
        # self.accountno_bills_Entry.place(relx=0.357, rely=0.304, relheight=0.054
        #                                  , relwidth=0.539)
        # self.accountno_bills_Entry.configure(background="white")
        # self.accountno_bills_Entry.configure(cursor="arrow")
        # self.accountno_bills_Entry.configure(disabledforeground="#a3a3a3")
        # self.accountno_bills_Entry.configure(font="TkFixedFont")
        # self.accountno_bills_Entry.configure(foreground="#000000")
        # self.accountno_bills_Entry.configure(highlightbackground="#d9d9d9")
        # self.accountno_bills_Entry.configure(highlightcolor="black")
        # self.accountno_bills_Entry.configure(insertbackground="black")
        # self.accountno_bills_Entry.configure(selectbackground="blue")
        # self.accountno_bills_Entry.configure(selectforeground="white")

        self.Plan_Reg = tk.Label(self.BILLS_PAYMENT_Frame)
        self.Plan_Reg.place(relx=0.088, rely=0.176, height=23, width=82)
        self.Plan_Reg.configure(background="#d9d9d9")
        self.Plan_Reg.configure(disabledforeground="#a3a3a3")
        self.Plan_Reg.configure(font="-family {Verdana} -size 10")
        self.Plan_Reg.configure(foreground="#000000")
        self.Plan_Reg.configure(text='''Vendor''')

        p = tk.StringVar()
        self.Plan_Combo = ttk.Combobox(self.BILLS_PAYMENT_Frame)
        self.Plan_Combo.place(relx=0.357, rely=0.176, relheight=0.054
                              , relwidth=0.281)
        self.Plan_Combo.configure(textvariable=p)
        self.Plan_Combo.configure(takefocus="")
        self.Plan_Combo['values'] = ("DSTV", "Water", "Electricity", "AXA Mansard Insurance", "Smile Internet Service")

        self.Amount_Reg = tk.Label(self.BILLS_PAYMENT_Frame)
        self.Amount_Reg.place(relx=0.088, rely=0.326, height=23, width=82)
        self.Amount_Reg.configure(background="#d9d9d9")
        self.Amount_Reg.configure(disabledforeground="#a3a3a3")
        self.Amount_Reg.configure(font="-family {Verdana} -size 10")
        self.Amount_Reg.configure(foreground="#000000")
        self.Amount_Reg.configure(text='''Amount''')

        self.Amount_Entry = tk.Entry(self.BILLS_PAYMENT_Frame)
        self.Amount_Entry.place(relx=0.348, rely=0.326, height=20
                                , relwidth=0.539)
        self.Amount_Entry.configure(background="white")
        self.Amount_Entry.configure(disabledforeground="#a3a3a3")
        self.Amount_Entry.configure(font="TkFixedFont")
        self.Amount_Entry.configure(foreground="#000000")
        self.Amount_Entry.configure(insertbackground="black")

        self.Narration_Reg = tk.Label(self.BILLS_PAYMENT_Frame)
        self.Narration_Reg.place(relx=0.088, rely=0.476, height=23, width=82)
        self.Narration_Reg.configure(background="#d9d9d9")
        self.Narration_Reg.configure(disabledforeground="#a3a3a3")
        self.Narration_Reg.configure(font="-family {Verdana} -size 10")
        self.Narration_Reg.configure(foreground="#000000")
        self.Narration_Reg.configure(text='''Narration''')

        self.Narration_Entry = tk.Entry(self.BILLS_PAYMENT_Frame)
        self.Narration_Entry.place(relx=0.348, rely=0.476, height=20
                                   , relwidth=0.539)
        self.Narration_Entry.configure(background="white")
        self.Narration_Entry.configure(disabledforeground="#a3a3a3")
        self.Narration_Entry.configure(font="TkFixedFont")
        self.Narration_Entry.configure(foreground="#000000")
        self.Narration_Entry.configure(insertbackground="black")

        self.Pin_Reg = tk.Label(self.BILLS_PAYMENT_Frame)
        self.Pin_Reg.place(relx=0.088, rely=0.626, height=23, width=82)
        self.Pin_Reg.configure(background="#d9d9d9")
        self.Pin_Reg.configure(disabledforeground="#a3a3a3")
        self.Pin_Reg.configure(font="-family {Verdana} -size 10")
        self.Pin_Reg.configure(foreground="#000000")
        self.Pin_Reg.configure(text='''Pin''')

        self.Pin_Entry = tk.Entry(self.BILLS_PAYMENT_Frame, show="*")
        self.Pin_Entry.place(relx=0.348, rely=0.626, height=20, relwidth=0.539)
        self.Pin_Entry.configure(background="white")
        self.Pin_Entry.configure(disabledforeground="#a3a3a3")
        self.Pin_Entry.configure(font="TkFixedFont")
        self.Pin_Entry.configure(foreground="#000000")
        self.Pin_Entry.configure(insertbackground="black")

        self.Make_Payment_Button = tk.Button(self.BILLS_PAYMENT_Frame, command=lambda: self.billpay_thread(None))
        self.Make_Payment_Button.place(relx=0.35, rely=0.766, height=24
                                       , width=77)
        self.Make_Payment_Button.configure(activebackground="#ececec")
        self.Make_Payment_Button.configure(activeforeground="#000000")
        self.Make_Payment_Button.configure(background="#808040")
        self.Make_Payment_Button.configure(disabledforeground="#a3a3a3")
        self.Make_Payment_Button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Make_Payment_Button.configure(foreground="#ffffff")
        self.Make_Payment_Button.configure(highlightbackground="#d9d9d9")
        self.Make_Payment_Button.configure(highlightcolor="black")
        self.Make_Payment_Button.configure(pady="0")
        self.Make_Payment_Button.configure(text='''Pay''')

        self.Cancel_Button = tk.Button(self.BILLS_PAYMENT_Frame, command=lambda: self.show_frame(self.User_banking))
        self.Cancel_Button.place(relx=0.66, rely=0.766, height=24, width=77)
        self.Cancel_Button.configure(activebackground="#ececec")
        self.Cancel_Button.configure(activeforeground="#000000")
        self.Cancel_Button.configure(background="#804040")
        self.Cancel_Button.configure(disabledforeground="#a3a3a3")
        self.Cancel_Button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Cancel_Button.configure(foreground="#ffffff")
        self.Cancel_Button.configure(highlightbackground="#d9d9d9")
        self.Cancel_Button.configure(highlightcolor="black")
        self.Cancel_Button.configure(pady="0")
        self.Cancel_Button.configure(text='''Back''')

        self.bills_pay_logo = tk.Label(self.BILLS_PAYMENT_Frame)
        self.bills_pay_logo.place(relx=0.696, rely=0.871, height=41, width=94)
        self.bills_pay_logo.configure(background="#d9d9d9")
        self.bills_pay_logo.configure(disabledforeground="#a3a3a3")
        self.bills_pay_logo.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img31
        _img31 = ImageTk.PhotoImage(file=photo_location)
        self.bills_pay_logo.configure(image=_img31)
        self.bills_pay_logo.configure(text='''Label''')

        # ----------------DISPLAY STATEMENT FRAME------------
        self.dispAccount_Info_frame = tk.Frame(top)
        self.dispAccount_Info_frame.place(relx=0.183, rely=0.042, relheight=0.885
                                          , relwidth=0.575)
        self.dispAccount_Info_frame.configure(relief='groove')
        self.dispAccount_Info_frame.configure(borderwidth="2")
        self.dispAccount_Info_frame.configure(relief="groove")
        self.dispAccount_Info_frame.configure(background="#d9d9d9")

        self.dispinfo_logo = tk.Label(self.dispAccount_Info_frame)
        self.dispinfo_logo.place(relx=0.029, rely=0.024, height=40, width=91)
        self.dispinfo_logo.configure(activebackground="#f9f9f9")
        self.dispinfo_logo.configure(activeforeground="black")
        self.dispinfo_logo.configure(background="#d9d9d9")
        self.dispinfo_logo.configure(disabledforeground="#a3a3a3")
        self.dispinfo_logo.configure(font="-family {Segoe UI} -size 16")
        self.dispinfo_logo.configure(foreground="#000000")
        self.dispinfo_logo.configure(highlightbackground="#d9d9d9")
        self.dispinfo_logo.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img41
        _img41 = ImageTk.PhotoImage(file=photo_location)
        self.dispinfo_logo.configure(image=_img41)
        self.dispinfo_logo.configure(text='''Label''')

        self.dispinfo_list = tk.Text(self.dispAccount_Info_frame, wrap="word")
        self.dispinfo_list.place(relx=0.05, rely=0.447, relheight=0.405, relwidth=0.9)
        # self.dispinfo_list.configure(background="white")
        # self.dispinfo_list.configure(disabledforeground="#a3a3a3")
        self.dispinfo_list.configure(font="TkFixedFont")
        # self.dispinfo_list.configure(foreground="#000000")
        self.dispcustscrollbar = tk.Scrollbar(self.dispinfo_list, cursor="arrow")
        self.dispcustscrollbar.pack(side="right", fill="y")
        self.dispcustscrollbar.config(command=self.dispinfo_list.yview)
        self.dispcusthorscroll = tk.Scrollbar(self.dispinfo_list, orient="horizontal")
        self.dispcusthorscroll.pack(side="bottom", fill="x")
        self.dispcusthorscroll.config(command=self.dispinfo_list.xview)
        self.dispinfo_list.config(yscrollcommand=self.dispcustscrollbar.set, xscrollcommand=self.dispcusthorscroll.set)

        self.dispAcc_Info_Save = tk.Button(self.dispAccount_Info_frame,
                                           command=lambda: self.savecusttofile_thread(None))
        self.dispAcc_Info_Save.place(relx=0.4, rely=0.901, height=24, width=87)
        self.dispAcc_Info_Save.configure(activebackground="#ececec")
        self.dispAcc_Info_Save.configure(activeforeground="#000000")
        self.dispAcc_Info_Save.configure(background="#808040")
        self.dispAcc_Info_Save.configure(disabledforeground="#a3a3a3")
        self.dispAcc_Info_Save.configure(font="-family {Verdana} -size 10 -weight bold")
        self.dispAcc_Info_Save.configure(foreground="#ffffff")
        self.dispAcc_Info_Save.configure(highlightbackground="#d9d9d9")
        self.dispAcc_Info_Save.configure(highlightcolor="black")
        self.dispAcc_Info_Save.configure(pady="0")
        self.dispAcc_Info_Save.configure(text='''Save''')

        self.dispAcc_Info_back = tk.Button(self.dispAccount_Info_frame,
                                           command=lambda: self.show_frame(self.User_banking))
        self.dispAcc_Info_back.place(relx=0.667, rely=0.901, height=24, width=87)
        self.dispAcc_Info_back.configure(activebackground="#ececec")
        self.dispAcc_Info_back.configure(activeforeground="#000000")
        self.dispAcc_Info_back.configure(background="#804040")
        self.dispAcc_Info_back.configure(disabledforeground="#a3a3a3")
        self.dispAcc_Info_back.configure(font="-family {Verdana} -size 10 -weight bold")
        self.dispAcc_Info_back.configure(foreground="#ffffff")
        self.dispAcc_Info_back.configure(highlightbackground="#d9d9d9")
        self.dispAcc_Info_back.configure(highlightcolor="black")
        self.dispAcc_Info_back.configure(pady="0")
        self.dispAcc_Info_back.configure(text='''Back''')

        self.dispinfo_label = tk.Label(self.dispAccount_Info_frame)
        self.dispinfo_label.place(relx=0.394, rely=0.047, height=21, width=169)
        self.dispinfo_label.configure(background="#d9d9d9")
        self.dispinfo_label.configure(disabledforeground="#a3a3a3")
        self.dispinfo_label.configure(font="-family {Verdana} -size 14 -weight bold")
        self.dispinfo_label.configure(foreground="#000000")
        self.dispinfo_label.configure(text='''ACCOUNT INFO''')

        # ----------------------QUICK TRANSFER FRAME------------------------------
        self.quickTransfer = tk.Frame(top)
        self.quickTransfer.place(relx=0.183, rely=0.044, relheight=0.885
                                 , relwidth=0.575)
        self.quickTransfer.configure(relief='groove')
        self.quickTransfer.configure(borderwidth="2")
        self.quickTransfer.configure(relief="groove")
        self.quickTransfer.configure(background="#d9d9d9")
        # self.quickTransfer.configure(cursor="fleur")
        self.quickTransfer.configure(highlightbackground="#d9d9d9")
        self.quickTransfer.configure(highlightcolor="black")

        self.quickBANK_TRANSFER = tk.Label(self.quickTransfer)
        self.quickBANK_TRANSFER.place(relx=0.203, rely=0.025, height=47, width=210)
        self.quickBANK_TRANSFER.configure(activebackground="#f9f9f9")
        self.quickBANK_TRANSFER.configure(activeforeground="black")
        self.quickBANK_TRANSFER.configure(background="#d9d9d9")
        self.quickBANK_TRANSFER.configure(disabledforeground="#a3a3a3")
        self.quickBANK_TRANSFER.configure(font="-family {Verdana} -size 11 -weight bold")
        self.quickBANK_TRANSFER.configure(foreground="#000000")
        self.quickBANK_TRANSFER.configure(highlightbackground="#d9d9d9")
        self.quickBANK_TRANSFER.configure(highlightcolor="black")
        self.quickBANK_TRANSFER.configure(text='''TRANSFER (TO AZBANK)''')

        self.quickAccount_debit = tk.Label(self.quickTransfer)
        self.quickAccount_debit.place(relx=0.029, rely=0.211, height=30, width=83)
        self.quickAccount_debit.configure(activebackground="#f9f9f9")
        self.quickAccount_debit.configure(activeforeground="black")
        self.quickAccount_debit.configure(background="#d9d9d9")
        self.quickAccount_debit.configure(disabledforeground="#a3a3a3")
        self.quickAccount_debit.configure(font="-family {Segoe UI} -size 10")
        self.quickAccount_debit.configure(foreground="#000000")
        self.quickAccount_debit.configure(highlightbackground="#d9d9d9")
        self.quickAccount_debit.configure(highlightcolor="black")
        self.quickAccount_debit.configure(text='''Account No.''')

        self.quickBank = tk.Label(self.quickTransfer)
        self.quickBank.place(relx=0.029, rely=0.416, height=30, width=83)
        self.quickBank.configure(activebackground="#f9f9f9")
        self.quickBank.configure(activeforeground="black")
        self.quickBank.configure(background="#d9d9d9")
        self.quickBank.configure(disabledforeground="#a3a3a3")
        self.quickBank.configure(font="-family {Segoe UI} -size 10")
        self.quickBank.configure(foreground="#000000")
        self.quickBank.configure(highlightbackground="#d9d9d9")
        self.quickBank.configure(highlightcolor="black")
        self.quickBank.configure(text='''Beneficiary''')

        self.quickbentEntry2 = tk.Entry(self.quickTransfer)
        self.quickbentEntry2.place(relx=0.29, rely=0.426, height=20, relwidth=0.243)
        self.quickbentEntry2.configure(background="white")
        self.quickbentEntry2.configure(disabledforeground="#a3a3a3")
        self.quickbentEntry2.configure(font="TkFixedFont")
        self.quickbentEntry2.configure(foreground="#000000")
        self.quickbentEntry2.configure(highlightbackground="#d9d9d9")
        self.quickbentEntry2.configure(highlightcolor="black")
        self.quickbentEntry2.configure(insertbackground="black")
        self.quickbentEntry2.configure(selectbackground="blue")
        self.quickbentEntry2.configure(selectforeground="white")

        self.quickamount = tk.Label(self.quickTransfer)
        self.quickamount.place(relx=0.500, rely=0.211, height=30, width=83)
        self.quickamount.configure(activeforeground="black")
        self.quickamount.configure(background="#d9d9d9")
        self.quickamount.configure(disabledforeground="#a3a3a3")
        self.quickamount.configure(font="-family {Segoe UI} -size 10")
        self.quickamount.configure(foreground="#000000")
        self.quickamount.configure(highlightbackground="#d9d9d9")
        self.quickamount.configure(highlightcolor="black")
        self.quickamount.configure(text='''Amount''')

        self.quickNarration = tk.Label(self.quickTransfer)
        self.quickNarration.place(relx=0.500, rely=0.416, height=30, width=83)
        self.quickNarration.configure(activebackground="#f9f9f9")
        self.quickNarration.configure(activeforeground="black")
        self.quickNarration.configure(background="#d9d9d9")
        self.quickNarration.configure(disabledforeground="#a3a3a3")
        self.quickNarration.configure(font="-family {Segoe UI} -size 10")
        self.quickNarration.configure(foreground="#000000")
        self.quickNarration.configure(highlightbackground="#d9d9d9")
        self.quickNarration.configure(highlightcolor="black")
        self.quickNarration.configure(text='''Narration''')

        self.quickamountEntry3 = tk.Entry(self.quickTransfer)
        self.quickamountEntry3.place(relx=0.725, rely=0.226, height=20, relwidth=0.243)
        self.quickamountEntry3.configure(background="white")
        self.quickamountEntry3.configure(disabledforeground="#a3a3a3")
        self.quickamountEntry3.configure(font="TkFixedFont")
        self.quickamountEntry3.configure(foreground="#000000")
        self.quickamountEntry3.configure(highlightbackground="#d9d9d9")
        self.quickamountEntry3.configure(highlightcolor="black")
        self.quickamountEntry3.configure(insertbackground="black")
        self.quickamountEntry3.configure(selectbackground="blue")
        self.quickamountEntry3.configure(selectforeground="white")

        self.quicknarrEntry4 = tk.Entry(self.quickTransfer)
        self.quicknarrEntry4.place(relx=0.725, rely=0.426, height=20, relwidth=0.243)
        self.quicknarrEntry4.configure(background="white")
        self.quicknarrEntry4.configure(disabledforeground="#a3a3a3")
        self.quicknarrEntry4.configure(font="TkFixedFont")
        self.quicknarrEntry4.configure(foreground="#000000")
        self.quicknarrEntry4.configure(highlightbackground="#d9d9d9")
        self.quicknarrEntry4.configure(highlightcolor="black")
        self.quicknarrEntry4.configure(insertbackground="black")
        self.quicknarrEntry4.configure(selectbackground="blue")
        self.quicknarrEntry4.configure(selectforeground="white")

        self.quickPin = tk.Label(self.quickTransfer)
        self.quickPin.place(relx=0.406, rely=0.579, height=19, width=26)
        self.quickPin.configure(activebackground="#f9f9f9")
        self.quickPin.configure(activeforeground="black")
        self.quickPin.configure(background="#d9d9d9")
        self.quickPin.configure(disabledforeground="#a3a3a3")
        self.quickPin.configure(font="-family {Segoe UI} -size 10")
        self.quickPin.configure(foreground="#000000")
        self.quickPin.configure(highlightbackground="#d9d9d9")
        self.quickPin.configure(highlightcolor="black")
        self.quickPin.configure(text='''Pin''')

        self.quickpinEntry5 = tk.Entry(self.quickTransfer, show="*")
        self.quickpinEntry5.place(relx=0.493, rely=0.579, height=20, relwidth=0.243)
        self.quickpinEntry5.configure(background="white")
        self.quickpinEntry5.configure(disabledforeground="#a3a3a3")
        self.quickpinEntry5.configure(font="TkFixedFont")
        self.quickpinEntry5.configure(foreground="#000000")
        self.quickpinEntry5.configure(highlightbackground="#d9d9d9")
        self.quickpinEntry5.configure(highlightcolor="black")
        self.quickpinEntry5.configure(insertbackground="black")
        self.quickpinEntry5.configure(selectbackground="blue")
        self.quickpinEntry5.configure(selectforeground="white")

        self.quickENTER = tk.Button(self.quickTransfer, command=lambda: self.quicktransfer_thread(None))
        self.quickENTER.place(relx=0.609, rely=0.779, height=24, width=57)
        self.quickENTER.configure(activebackground="#ececec")
        self.quickENTER.configure(activeforeground="#000000")
        self.quickENTER.configure(background="#808040")
        self.quickENTER.configure(disabledforeground="#a3a3a3")
        self.quickENTER.configure(cursor="arrow")
        self.quickENTER.configure(font="-family {Verdana} -size 9 -weight bold")
        self.quickENTER.configure(foreground="#ffffff")
        self.quickENTER.configure(highlightbackground="#d9d9d9")
        self.quickENTER.configure(highlightcolor="black")
        self.quickENTER.configure(pady="0")
        self.quickENTER.configure(text='''Enter''')

        self.quickEXIT = tk.Button(self.quickTransfer, command=lambda: self.show_frame(self.Home_Page))
        self.quickEXIT.place(relx=0.783, rely=0.779, height=24, width=53)
        self.quickEXIT.configure(activebackground="#ececec")
        self.quickEXIT.configure(activeforeground="#000000")
        self.quickEXIT.configure(background="#804040")
        self.quickEXIT.configure(disabledforeground="#a3a3a3")
        self.quickEXIT.configure(cursor="arrow")
        self.quickEXIT.configure(font="-family {Verdana} -size 9 -weight bold")
        self.quickEXIT.configure(foreground="#ffffff")
        self.quickEXIT.configure(highlightbackground="#d9d9d9")
        self.quickEXIT.configure(highlightcolor="black")
        self.quickEXIT.configure(pady="0")
        self.quickEXIT.configure(text='''Back''')

        self.quickaccnoEntry1 = tk.Entry(self.quickTransfer)
        self.quickaccnoEntry1.place(relx=0.29, rely=0.226, height=20, relwidth=0.243)
        self.quickaccnoEntry1.configure(background="white")
        self.quickaccnoEntry1.configure(disabledforeground="#a3a3a3")
        self.quickaccnoEntry1.configure(font="TkFixedFont")
        self.quickaccnoEntry1.configure(foreground="#000000")
        self.quickaccnoEntry1.configure(highlightbackground="#d9d9d9")
        self.quickaccnoEntry1.configure(highlightcolor="black")
        self.quickaccnoEntry1.configure(insertbackground="black")
        self.quickaccnoEntry1.configure(selectbackground="blue")
        self.quickaccnoEntry1.configure(selectforeground="white")

        self.quickTransfer_logo = tk.Label(self.quickTransfer)
        self.quickTransfer_logo.place(relx=0.058, rely=0.852, height=51, width=104)
        self.quickTransfer_logo.configure(background="#d9d9d9")
        self.quickTransfer_logo.configure(disabledforeground="#a3a3a3")
        self.quickTransfer_logo.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img90
        _img90 = ImageTk.PhotoImage(file=photo_location)
        self.quickTransfer_logo.configure(image=_img90)
        self.quickTransfer_logo.configure(text='''Label''')

        # ---------------QUICK BILLS PAYMENT--------------------------
        self.quickBILLS_PAYMENT_Frame = tk.Frame(top)
        self.quickBILLS_PAYMENT_Frame.place(relx=0.183, rely=0.042, relheight=0.885
                                            , relwidth=0.575)
        self.quickBILLS_PAYMENT_Frame.configure(relief='groove')
        self.quickBILLS_PAYMENT_Frame.configure(borderwidth="2")
        self.quickBILLS_PAYMENT_Frame.configure(relief="groove")
        self.quickBILLS_PAYMENT_Frame.configure(background="#d9d9d9")

        self.quickBILLS_PAYMENT_Reg = tk.Label(self.quickBILLS_PAYMENT_Frame)
        self.quickBILLS_PAYMENT_Reg.place(relx=0.29, rely=0.052, height=22, width=131)

        self.quickBILLS_PAYMENT_Reg.configure(background="#d9d9d9")
        self.quickBILLS_PAYMENT_Reg.configure(disabledforeground="#a3a3a3")
        self.quickBILLS_PAYMENT_Reg.configure(font="-family {Verdana} -size 10 -weight bold")
        self.quickBILLS_PAYMENT_Reg.configure(foreground="#000000")
        self.quickBILLS_PAYMENT_Reg.configure(text='''BILLS PAYMENT''')

        self.quickVendor_Reg = tk.Label(self.quickBILLS_PAYMENT_Frame)
        self.quickVendor_Reg.place(relx=0.101, rely=0.176, height=23, width=79)
        self.quickVendor_Reg.configure(background="#d9d9d9")
        self.quickVendor_Reg.configure(disabledforeground="#a3a3a3")
        self.quickVendor_Reg.configure(font="-family {Verdana} -size 10")
        self.quickVendor_Reg.configure(foreground="#000000")
        self.quickVendor_Reg.configure(text='''Vendor''')

        qb = tk.StringVar()
        self.quickVendor_combo = ttk.Combobox(self.quickBILLS_PAYMENT_Frame)
        self.quickVendor_combo.place(relx=0.357, rely=0.176, relheight=0.054
                                     , relwidth=0.281)
        self.quickVendor_combo.configure(textvariable=qb)
        self.quickVendor_combo.configure(takefocus="")
        self.quickVendor_combo['values'] = (
            "DSTV", "Water", "Electricity", "AXA Mansard Insurance", "Smile Internet Service")

        self.quickacc_Reg = tk.Label(self.quickBILLS_PAYMENT_Frame)
        self.quickacc_Reg.place(relx=0.101, rely=0.304, height=23, width=79)
        self.quickacc_Reg.configure(background="#d9d9d9")
        self.quickacc_Reg.configure(disabledforeground="#a3a3a3")
        self.quickacc_Reg.configure(font="-family {Verdana} -size 10")
        self.quickacc_Reg.configure(foreground="#000000")
        self.quickacc_Reg.configure(text='''Account No.''')

        self.quickacc_entry = tk.Entry(self.quickBILLS_PAYMENT_Frame)
        self.quickacc_entry.place(relx=0.357, rely=0.304, relheight=0.054
                                  , relwidth=0.539)
        self.quickacc_entry.configure(background="white")
        self.quickacc_entry.configure(disabledforeground="#a3a3a3")
        self.quickacc_entry.configure(font="TkFixedFont")
        self.quickacc_entry.configure(foreground="#000000")
        self.quickacc_entry.configure(insertbackground="black")

        # self.quickben_Reg = tk.Label(self.quickBILLS_PAYMENT_Frame)
        # self.quickben_Reg.place(relx=0.101, rely=0.405, height=23, width=79)
        # self.quickben_Reg.configure(background="#d9d9d9")
        # self.quickben_Reg.configure(disabledforeground="#a3a3a3")
        # self.quickben_Reg.configure(font="-family {Verdana} -size 10")
        # self.quickben_Reg.configure(foreground="#000000")
        # self.quickben_Reg.configure(text='''Beneficiary''')
        #
        # self.quickben_Entry = tk.Entry(self.quickBILLS_PAYMENT_Frame)
        # self.quickben_Entry.place(relx=0.348, rely=0.402, height=20
        #                           , relwidth=0.4)
        # self.quickben_Entry.configure(background="white")
        # self.quickben_Entry.configure(disabledforeground="#a3a3a3")
        # self.quickben_Entry.configure(font="TkFixedFont")
        # self.quickben_Entry.configure(foreground="#000000")
        # self.quickben_Entry.configure(insertbackground="black")

        self.quickamount_Reg = tk.Label(self.quickBILLS_PAYMENT_Frame)
        self.quickamount_Reg.place(relx=0.101, rely=0.432, height=23, width=79)
        self.quickamount_Reg.configure(background="#d9d9d9")
        self.quickamount_Reg.configure(disabledforeground="#a3a3a3")
        self.quickamount_Reg.configure(font="-family {Verdana} -size 10")
        self.quickamount_Reg.configure(foreground="#000000")
        self.quickamount_Reg.configure(text='''Amount''')

        self.quickamount_Entry = tk.Entry(self.quickBILLS_PAYMENT_Frame)
        self.quickamount_Entry.place(relx=0.348, rely=0.432, height=20
                                     , relwidth=0.539)
        self.quickamount_Entry.configure(background="white")
        self.quickamount_Entry.configure(disabledforeground="#a3a3a3")
        self.quickamount_Entry.configure(font="TkFixedFont")
        self.quickamount_Entry.configure(foreground="#000000")
        self.quickamount_Entry.configure(insertbackground="black")

        self.quicknarration_Reg = tk.Label(self.quickBILLS_PAYMENT_Frame)
        self.quicknarration_Reg.place(relx=0.101, rely=0.56, height=23, width=79)
        self.quicknarration_Reg.configure(background="#d9d9d9")
        self.quicknarration_Reg.configure(disabledforeground="#a3a3a3")
        self.quicknarration_Reg.configure(font="-family {Verdana} -size 10")
        self.quicknarration_Reg.configure(foreground="#000000")
        self.quicknarration_Reg.configure(text='''Narration''')

        self.quicknarration_Entry = tk.Entry(self.quickBILLS_PAYMENT_Frame)
        self.quicknarration_Entry.place(relx=0.348, rely=0.56, height=20, relwidth=0.539)
        self.quicknarration_Entry.configure(background="white")
        self.quicknarration_Entry.configure(disabledforeground="#a3a3a3")
        self.quicknarration_Entry.configure(font="TkFixedFont")
        self.quicknarration_Entry.configure(foreground="#000000")
        self.quicknarration_Entry.configure(insertbackground="black")

        self.quickpin_Reg = tk.Label(self.quickBILLS_PAYMENT_Frame)
        self.quickpin_Reg.place(relx=0.101, rely=0.688, height=23, width=79)
        self.quickpin_Reg.configure(background="#d9d9d9")
        self.quickpin_Reg.configure(disabledforeground="#a3a3a3")
        self.quickpin_Reg.configure(font="-family {Verdana} -size 10")
        self.quickpin_Reg.configure(foreground="#000000")
        self.quickpin_Reg.configure(text='''Pin''')

        self.quickpin_Entry = tk.Entry(self.quickBILLS_PAYMENT_Frame, show="*")
        self.quickpin_Entry.place(relx=0.348, rely=0.688, height=20, relwidth=0.539)
        self.quickpin_Entry.configure(background="white")
        self.quickpin_Entry.configure(disabledforeground="#a3a3a3")
        self.quickpin_Entry.configure(font="TkFixedFont")
        self.quickpin_Entry.configure(foreground="#000000")
        self.quickpin_Entry.configure(insertbackground="black")

        self.quickMake_Payment_Button = tk.Button(self.quickBILLS_PAYMENT_Frame,
                                                  command=lambda: self.quickbillspay_thread(None))
        self.quickMake_Payment_Button.place(relx=0.35, rely=0.776, height=24
                                            , width=77)
        self.quickMake_Payment_Button.configure(activebackground="#ececec")
        self.quickMake_Payment_Button.configure(activeforeground="#000000")
        self.quickMake_Payment_Button.configure(background="#808040")
        self.quickMake_Payment_Button.configure(disabledforeground="#a3a3a3")
        self.quickMake_Payment_Button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.quickMake_Payment_Button.configure(foreground="#ffffff")
        self.quickMake_Payment_Button.configure(highlightbackground="#d9d9d9")
        self.quickMake_Payment_Button.configure(highlightcolor="black")
        self.quickMake_Payment_Button.configure(pady="0")
        self.quickMake_Payment_Button.configure(text='''Pay''')

        self.quickCancel_Button = tk.Button(self.quickBILLS_PAYMENT_Frame,
                                            command=lambda: self.show_frame(self.Home_Page))
        self.quickCancel_Button.place(relx=0.66, rely=0.776, height=24, width=77)
        self.quickCancel_Button.configure(activebackground="#ececec")
        self.quickCancel_Button.configure(activeforeground="#000000")
        self.quickCancel_Button.configure(background="#804040")
        self.quickCancel_Button.configure(disabledforeground="#a3a3a3")
        self.quickCancel_Button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.quickCancel_Button.configure(foreground="#ffffff")
        self.quickCancel_Button.configure(highlightbackground="#d9d9d9")
        self.quickCancel_Button.configure(highlightcolor="black")
        self.quickCancel_Button.configure(pady="0")
        self.quickCancel_Button.configure(text='''Back''')

        self.quickbills_pay_logo = tk.Label(self.quickBILLS_PAYMENT_Frame)
        self.quickbills_pay_logo.place(relx=0.696, rely=0.871, height=41, width=94)
        self.quickbills_pay_logo.configure(background="#d9d9d9")
        self.quickbills_pay_logo.configure(disabledforeground="#a3a3a3")
        self.quickbills_pay_logo.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img61
        _img61 = ImageTk.PhotoImage(file=photo_location)
        self.quickbills_pay_logo.configure(image=_img61)
        self.quickbills_pay_logo.configure(text='''Label''')

        # ------------------------QUICK AIRTIME-----------------------------
        self.quickAirtime = tk.Frame(top)
        self.quickAirtime.place(relx=0.183, rely=0.044, relheight=0.885
                                , relwidth=0.575)
        self.quickAirtime.configure(relief='groove')
        self.quickAirtime.configure(borderwidth="2")
        self.quickAirtime.configure(relief="groove")
        self.quickAirtime.configure(background="#d9d9d9")
        self.quickAirtime.configure(highlightbackground="#d9d9d9")
        self.quickAirtime.configure(highlightcolor="black")

        self.quickAIRTIME_RECHARGE = tk.Label(self.quickAirtime)
        self.quickAIRTIME_RECHARGE.place(relx=0.203, rely=0.025, height=40, width=214)

        self.quickAIRTIME_RECHARGE.configure(activebackground="#f9f9f9")
        self.quickAIRTIME_RECHARGE.configure(activeforeground="black")
        self.quickAIRTIME_RECHARGE.configure(background="#d9d9d9")
        self.quickAIRTIME_RECHARGE.configure(disabledforeground="#a3a3a3")
        self.quickAIRTIME_RECHARGE.configure(font="-family {Verdana} -size 11 -weight bold")
        # self.AIRTIME_RECHARGE.configure(font="-family {Segoe UI} -size 10")
        self.quickAIRTIME_RECHARGE.configure(foreground="#000000")
        self.quickAIRTIME_RECHARGE.configure(highlightbackground="#d9d9d9")
        self.quickAIRTIME_RECHARGE.configure(highlightcolor="black")
        self.quickAIRTIME_RECHARGE.configure(text='''AIRTIME RECHARGE''')

        self.quickAccount_to_debit = tk.Label(self.quickAirtime)
        self.quickAccount_to_debit.place(relx=0.058, rely=0.301, height=20, width=104)

        self.quickAccount_to_debit.configure(activebackground="#f9f9f9")
        self.quickAccount_to_debit.configure(activeforeground="black")
        self.quickAccount_to_debit.configure(background="#d9d9d9")
        self.quickAccount_to_debit.configure(disabledforeground="#a3a3a3")
        # self.Account_to_dedit.configure(font="-family {Verdana} -size 9")
        self.quickAccount_to_debit.configure(font="-family {Segoe UI} -size 10")
        self.quickAccount_to_debit.configure(foreground="#000000")
        self.quickAccount_to_debit.configure(highlightbackground="#d9d9d9")
        self.quickAccount_to_debit.configure(highlightcolor="black")
        self.quickAccount_to_debit.configure(text='''Account To Debit''')

        self.quickdebitacc = tk.Entry(self.quickAirtime)
        self.quickdebitacc.place(relx=0.406, rely=0.301, relheight=0.053
                                 , relwidth=0.41)
        self.quickdebitacc.configure(background="white")
        self.quickdebitacc.configure(disabledforeground="#a3a3a3")
        self.quickdebitacc.configure(font="TkFixedFont")
        self.quickdebitacc.configure(foreground="#000000")
        self.quickdebitacc.configure(highlightbackground="#d9d9d9")
        self.quickdebitacc.configure(highlightcolor="black")
        self.quickdebitacc.configure(insertbackground="black")
        self.quickdebitacc.configure(selectbackground="blue")
        self.quickdebitacc.configure(selectforeground="white")

        self.quickvendor = tk.Label(self.quickAirtime)
        self.quickvendor.place(relx=0.058, rely=0.201, height=20, width=104)
        self.quickvendor.configure(activebackground="#f9f9f9")
        self.quickvendor.configure(activeforeground="black")
        self.quickvendor.configure(background="#d9d9d9")
        self.quickvendor.configure(disabledforeground="#a3a3a3")
        self.quickvendor.configure(font="-family {Segoe UI} -size 10")
        self.quickvendor.configure(foreground="#000000")
        self.quickvendor.configure(highlightbackground="#d9d9d9")
        self.quickvendor.configure(highlightcolor="black")
        self.quickvendor.configure(text='''Vendor''')

        x = tk.StringVar()
        self.quickTCombobox2 = ttk.Combobox(self.quickAirtime)
        self.quickTCombobox2.place(relx=0.406, rely=0.201, relheight=0.053
                                   , relwidth=0.31)
        self.quickTCombobox2.configure(textvariable=x)
        self.quickTCombobox2.configure(takefocus="")
        self.quickTCombobox2['values'] = ('MTN', 'Airtel', 'Glo', '9mobile')

        self.quickphone = tk.Label(self.quickAirtime)
        self.quickphone.place(relx=0.058, rely=0.501, height=20, width=104)
        self.quickphone.configure(activebackground="#f9f9f9")
        self.quickphone.configure(activeforeground="black")
        self.quickphone.configure(background="#d9d9d9")
        self.quickphone.configure(disabledforeground="#a3a3a3")
        self.quickphone.configure(font="-family {Segoe UI} -size 10")
        self.quickphone.configure(foreground="#000000")
        self.quickphone.configure(highlightbackground="#d9d9d9")
        self.quickphone.configure(highlightcolor="black")
        self.quickphone.configure(text='''Phone''')

        self.quickAmount = tk.Label(self.quickAirtime)
        self.quickAmount.place(relx=0.058, rely=0.401, height=20, width=104)
        self.quickAmount.configure(activebackground="#f9f9f9")
        self.quickAmount.configure(activeforeground="black")
        self.quickAmount.configure(background="#d9d9d9")
        self.quickAmount.configure(disabledforeground="#a3a3a3")
        self.quickAmount.configure(font="-family {Segoe UI} -size 10")
        self.quickAmount.configure(foreground="#000000")
        self.quickAmount.configure(highlightbackground="#d9d9d9")
        self.quickAmount.configure(highlightcolor="black")
        self.quickAmount.configure(text='''Amount''')

        self.quickNarr = tk.Label(self.quickAirtime)
        self.quickNarr.place(relx=0.058, rely=0.601, height=20, width=104)
        self.quickNarr.configure(activebackground="#f9f9f9")
        self.quickNarr.configure(activeforeground="black")
        self.quickNarr.configure(background="#d9d9d9")
        self.quickNarr.configure(disabledforeground="#a3a3a3")
        self.quickNarr.configure(font="-family {Segoe UI} -size 10")
        self.quickNarr.configure(foreground="#000000")
        self.quickNarr.configure(highlightbackground="#d9d9d9")
        self.quickNarr.configure(highlightcolor="black")
        self.quickNarr.configure(text='''Narration''')

        self.quickpin = tk.Label(self.quickAirtime)
        self.quickpin.place(relx=0.058, rely=0.701, height=20, width=104)
        self.quickpin.configure(activebackground="#f9f9f9")
        self.quickpin.configure(activeforeground="black")
        self.quickpin.configure(background="#d9d9d9")
        self.quickpin.configure(disabledforeground="#a3a3a3")
        self.quickpin.configure(font="-family {Segoe UI} -size 10")
        self.quickpin.configure(foreground="#000000")
        self.quickpin.configure(highlightbackground="#d9d9d9")
        self.quickpin.configure(highlightcolor="black")
        self.quickpin.configure(text='''Pin''')

        self.quickenter = tk.Button(self.quickAirtime, command=lambda: self.quickairtimerecharge_thread(None))
        self.quickenter.place(relx=0.45, rely=0.89, height=24, width=57)
        self.quickenter.configure(activebackground="#ececec")
        self.quickenter.configure(activeforeground="#000000")
        self.quickenter.configure(background="#808040")
        self.quickenter.configure(disabledforeground="#a3a3a3")
        self.quickenter.configure(font="-family {Verdana} -size 10 -weight bold")
        self.quickenter.configure(foreground="#ffffff")
        self.quickenter.configure(highlightbackground="#d9d9d9")
        self.quickenter.configure(highlightcolor="black")
        self.quickenter.configure(pady="0")
        self.quickenter.configure(text='''Enter''')

        self.quickexit = tk.Button(self.quickAirtime, command=lambda: self.show_frame(self.Home_Page))
        self.quickexit.place(relx=0.65, rely=0.89, height=24, width=57)
        self.quickexit.configure(activebackground="#ececec")
        self.quickexit.configure(activeforeground="#000000")
        self.quickexit.configure(background="#804040")
        self.quickexit.configure(disabledforeground="#a3a3a3")
        self.quickexit.configure(font="-family {Verdana} -size 10 -weight bold")
        self.quickexit.configure(foreground="#ffffff")
        self.quickexit.configure(highlightbackground="#d9d9d9")
        self.quickexit.configure(highlightcolor="black")
        self.quickexit.configure(pady="0")
        self.quickexit.configure(text='''Back''')

        self.quicknarrEntry6 = tk.Entry(self.quickAirtime)
        self.quicknarrEntry6.place(relx=0.406, rely=0.601, height=20, relwidth=0.41)
        self.quicknarrEntry6.configure(background="white")
        self.quicknarrEntry6.configure(disabledforeground="#a3a3a3")
        self.quicknarrEntry6.configure(font="TkFixedFont")
        self.quicknarrEntry6.configure(foreground="#000000")
        self.quicknarrEntry6.configure(highlightbackground="#d9d9d9")
        self.quicknarrEntry6.configure(highlightcolor="black")
        self.quicknarrEntry6.configure(insertbackground="black")
        self.quicknarrEntry6.configure(selectbackground="blue")
        self.quicknarrEntry6.configure(selectforeground="white")

        self.quickAirtime_Phone = tk.Entry(self.quickAirtime)
        self.quickAirtime_Phone.place(relx=0.406, rely=0.501, height=20, relwidth=0.41)
        self.quickAirtime_Phone.configure(background="white")
        self.quickAirtime_Phone.configure(disabledforeground="#a3a3a3")
        self.quickAirtime_Phone.configure(font="TkFixedFont")
        self.quickAirtime_Phone.configure(foreground="#000000")
        self.quickAirtime_Phone.configure(highlightbackground="#d9d9d9")
        self.quickAirtime_Phone.configure(highlightcolor="black")
        self.quickAirtime_Phone.configure(insertbackground="black")
        self.quickAirtime_Phone.configure(selectbackground="blue")
        self.quickAirtime_Phone.configure(selectforeground="white")

        self.quickpinEntry8 = tk.Entry(self.quickAirtime, show="*")
        self.quickpinEntry8.place(relx=0.406, rely=0.701, height=20, relwidth=0.41)
        self.quickpinEntry8.configure(background="white")
        self.quickpinEntry8.configure(disabledforeground="#a3a3a3")
        self.quickpinEntry8.configure(font="TkFixedFont")
        self.quickpinEntry8.configure(foreground="#000000")
        self.quickpinEntry8.configure(highlightbackground="#d9d9d9")
        self.quickpinEntry8.configure(highlightcolor="black")
        self.quickpinEntry8.configure(insertbackground="black")
        self.quickpinEntry8.configure(selectbackground="blue")
        self.quickpinEntry8.configure(selectforeground="white")

        self.quickAirtime_logo = tk.Label(self.quickAirtime)
        self.quickAirtime_logo.place(relx=0.058, rely=0.877, height=41, width=114)
        self.quickAirtime_logo.configure(background="#d9d9d9")
        self.quickAirtime_logo.configure(disabledforeground="#a3a3a3")
        self.quickAirtime_logo.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img81
        _img81 = ImageTk.PhotoImage(file=photo_location)
        self.quickAirtime_logo.configure(image=_img81)
        self.quickAirtime_logo.configure(text='''Label''')

        self.quickAirtime_Amount = tk.Entry(self.quickAirtime)
        self.quickAirtime_Amount.place(relx=0.406, rely=0.401, height=20
                                       , relwidth=0.41)
        self.quickAirtime_Amount.configure(background="white")
        self.quickAirtime_Amount.configure(disabledforeground="#a3a3a3")
        self.quickAirtime_Amount.configure(font="TkFixedFont")
        self.quickAirtime_Amount.configure(foreground="#000000")
        self.quickAirtime_Amount.configure(insertbackground="black")

        # -----------------------UPDATE PASSWORD FRAME-----------------
        self.update_pass = tk.Frame(top)
        self.update_pass.place(relx=0.183, rely=0.042, relheight=0.885
                               , relwidth=0.575)
        self.update_pass.configure(relief='groove')
        self.update_pass.configure(borderwidth="2")
        self.update_pass.configure(relief="groove")
        self.update_pass.configure(background="#d9d9d9")

        self.update_pass_logo_Label1 = tk.Label(self.update_pass)
        self.update_pass_logo_Label1.place(relx=0.029, rely=0.024, height=41
                                           , width=84)
        self.update_pass_logo_Label1.configure(background="#d9d9d9")
        self.update_pass_logo_Label1.configure(disabledforeground="#a3a3a3")
        self.update_pass_logo_Label1.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img130
        _img130 = ImageTk.PhotoImage(file=photo_location)
        self.update_pass_logo_Label1.configure(image=_img130)
        self.update_pass_logo_Label1.configure(text='''''')

        self.update_pass_heading_Label1 = tk.Label(self.update_pass)
        self.update_pass_heading_Label1.place(relx=0.319, rely=0.047, height=31
                                              , width=214)
        self.update_pass_heading_Label1.configure(background="#d9d9d9")
        self.update_pass_heading_Label1.configure(disabledforeground="#a3a3a3")
        self.update_pass_heading_Label1.configure(font="-family {Verdana} -size 13 -weight bold")
        self.update_pass_heading_Label1.configure(foreground="#000000")
        self.update_pass_heading_Label1.configure(text='''UPDATE PASSWORD''')

        self.newpassword_update_Label1 = tk.Label(self.update_pass)
        self.newpassword_update_Label1.place(relx=0.087, rely=0.282, height=21
                                             , width=140)
        self.newpassword_update_Label1.configure(background="#d9d9d9")
        self.newpassword_update_Label1.configure(disabledforeground="#a3a3a3")
        self.newpassword_update_Label1.configure(foreground="#000000")
        self.newpassword_update_Label1.configure(text='''New Password''')

        self.update_new_pass_Entry1 = tk.Entry(self.update_pass,show="*")
        self.update_new_pass_Entry1.place(relx=0.522, rely=0.282, height=20
                                          , relwidth=0.388)
        self.update_new_pass_Entry1.configure(background="white")
        self.update_new_pass_Entry1.configure(disabledforeground="#a3a3a3")
        self.update_new_pass_Entry1.configure(font="TkFixedFont")
        self.update_new_pass_Entry1.configure(foreground="#000000")
        self.update_new_pass_Entry1.configure(insertbackground="black")

        self.confirm_password_update_Label1_1 = tk.Label(self.update_pass)
        self.confirm_password_update_Label1_1.place(relx=0.087, rely=0.447
                                                    , height=21, width=134)
        self.confirm_password_update_Label1_1.configure(activebackground="#f9f9f9")
        self.confirm_password_update_Label1_1.configure(activeforeground="black")
        self.confirm_password_update_Label1_1.configure(background="#d9d9d9")
        self.confirm_password_update_Label1_1.configure(disabledforeground="#a3a3a3")
        self.confirm_password_update_Label1_1.configure(foreground="#000000")
        self.confirm_password_update_Label1_1.configure(highlightbackground="#d9d9d9")
        self.confirm_password_update_Label1_1.configure(highlightcolor="black")
        self.confirm_password_update_Label1_1.configure(text='''Confirrm New Password''')

        self.confirm_new_pass_Entry1_1 = tk.Entry(self.update_pass,show="*")
        self.confirm_new_pass_Entry1_1.place(relx=0.522, rely=0.447, height=20
                                             , relwidth=0.388)
        self.confirm_new_pass_Entry1_1.configure(background="white")
        self.confirm_new_pass_Entry1_1.configure(disabledforeground="#a3a3a3")
        self.confirm_new_pass_Entry1_1.configure(font="TkFixedFont")
        self.confirm_new_pass_Entry1_1.configure(foreground="#000000")
        self.confirm_new_pass_Entry1_1.configure(highlightbackground="#d9d9d9")
        self.confirm_new_pass_Entry1_1.configure(highlightcolor="black")
        self.confirm_new_pass_Entry1_1.configure(insertbackground="black")
        self.confirm_new_pass_Entry1_1.configure(selectbackground="blue")
        self.confirm_new_pass_Entry1_1.configure(selectforeground="white")

        self.Save_update_pass = tk.Button(self.update_pass, command=lambda: self.updatepass_thread(None))
        self.Save_update_pass.place(relx=0.406, rely=0.612, height=24, width=67)
        self.Save_update_pass.configure(activebackground="#ececec")
        self.Save_update_pass.configure(activeforeground="#000000")
        self.Save_update_pass.configure(background="#808040")
        self.Save_update_pass.configure(disabledforeground="#a3a3a3")
        self.Save_update_pass.configure(font="-family {Verdana} -size 9 -weight bold")
        self.Save_update_pass.configure(foreground="#ffffff")
        self.Save_update_pass.configure(highlightbackground="#d9d9d9")
        self.Save_update_pass.configure(highlightcolor="black")
        self.Save_update_pass.configure(pady="0")
        self.Save_update_pass.configure(text='''Save''')

        self.back_update_pass_1 = tk.Button(self.update_pass, command=lambda:self.show_frame(self.User_banking))
        self.back_update_pass_1.place(relx=0.696, rely=0.612, height=24
                                      , width=67)
        self.back_update_pass_1.configure(activebackground="#ececec")
        self.back_update_pass_1.configure(activeforeground="#000000")
        self.back_update_pass_1.configure(background="#804040")
        self.back_update_pass_1.configure(disabledforeground="#a3a3a3")
        self.back_update_pass_1.configure(font="-family {Verdana} -size 9 -weight bold")
        self.back_update_pass_1.configure(foreground="#ffffff")
        self.back_update_pass_1.configure(highlightbackground="#d9d9d9")
        self.back_update_pass_1.configure(highlightcolor="black")
        self.back_update_pass_1.configure(pady="0")
        self.back_update_pass_1.configure(text='''Back''')

        # ----------------------UPDATE PIN FRAME--------------------------
        self.update_pin = tk.Frame(top)
        self.update_pin.place(relx=0.183, rely=0.042, relheight=0.885
                              , relwidth=0.575)
        self.update_pin.configure(relief='groove')
        self.update_pin.configure(borderwidth="2")
        self.update_pin.configure(relief="groove")
        self.update_pin.configure(background="#d9d9d9")

        self.update_pin_logo_Label1 = tk.Label(self.update_pin)
        self.update_pin_logo_Label1.place(relx=0.01, rely=0.024, height=51, width=104)
        self.update_pin_logo_Label1.configure(background="#d9d9d9")
        self.update_pin_logo_Label1.configure(disabledforeground="#a3a3a3")
        self.update_pin_logo_Label1.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "Azlogo3.jpg")
        global _img120
        _img120 = ImageTk.PhotoImage(file=photo_location)
        self.update_pin_logo_Label1.configure(image=_img120)
        self.update_pin_logo_Label1.configure(text='''''')

        self.update_pin_heading_Label1 = tk.Label(self.update_pin)
        self.update_pin_heading_Label1.place(relx=0.319, rely=0.047, height=31
                                             , width=190)
        self.update_pin_heading_Label1.configure(background="#d9d9d9")
        self.update_pin_heading_Label1.configure(disabledforeground="#a3a3a3")
        self.update_pin_heading_Label1.configure(font="-family {Verdana} -size 13 -weight bold")
        self.update_pin_heading_Label1.configure(foreground="#000000")
        self.update_pin_heading_Label1.configure(text='''UPDATE PIN''')

        self.newpin_update_Label1 = tk.Label(self.update_pin)
        self.newpin_update_Label1.place(relx=0.077, rely=0.282, height=21
                                        , width=140)
        self.newpin_update_Label1.configure(background="#d9d9d9")
        self.newpin_update_Label1.configure(disabledforeground="#a3a3a3")
        self.newpin_update_Label1.configure(foreground="#000000")
        self.newpin_update_Label1.configure(text='''New Pin''')

        self.update_new_pin_Entry1 = tk.Entry(self.update_pin,show="*")
        self.update_new_pin_Entry1.place(relx=0.522, rely=0.282, height=20
                                         , relwidth=0.388)
        self.update_new_pin_Entry1.configure(background="white")
        self.update_new_pin_Entry1.configure(disabledforeground="#a3a3a3")
        self.update_new_pin_Entry1.configure(font="TkFixedFont")
        self.update_new_pin_Entry1.configure(foreground="#000000")
        self.update_new_pin_Entry1.configure(insertbackground="black")

        self.confirm_pin_update_Label1_1 = tk.Label(self.update_pin)
        self.confirm_pin_update_Label1_1.place(relx=0.077, rely=0.447, height=21
                                               , width=134)
        self.confirm_pin_update_Label1_1.configure(activebackground="#f9f9f9")
        self.confirm_pin_update_Label1_1.configure(activeforeground="black")
        self.confirm_pin_update_Label1_1.configure(background="#d9d9d9")
        self.confirm_pin_update_Label1_1.configure(disabledforeground="#a3a3a3")
        self.confirm_pin_update_Label1_1.configure(foreground="#000000")
        self.confirm_pin_update_Label1_1.configure(highlightbackground="#d9d9d9")
        self.confirm_pin_update_Label1_1.configure(highlightcolor="black")
        self.confirm_pin_update_Label1_1.configure(text='''Confirrm New Pin''')

        self.confirm_new_pin_Entry1_1 = tk.Entry(self.update_pin,show="*")
        self.confirm_new_pin_Entry1_1.place(relx=0.522, rely=0.447, height=20
                                            , relwidth=0.388)
        self.confirm_new_pin_Entry1_1.configure(background="white")
        self.confirm_new_pin_Entry1_1.configure(disabledforeground="#a3a3a3")
        self.confirm_new_pin_Entry1_1.configure(font="TkFixedFont")
        self.confirm_new_pin_Entry1_1.configure(foreground="#000000")
        self.confirm_new_pin_Entry1_1.configure(highlightbackground="#d9d9d9")
        self.confirm_new_pin_Entry1_1.configure(highlightcolor="black")
        self.confirm_new_pin_Entry1_1.configure(insertbackground="black")
        self.confirm_new_pin_Entry1_1.configure(selectbackground="blue")
        self.confirm_new_pin_Entry1_1.configure(selectforeground="white")

        self.Save_update_pin = tk.Button(self.update_pin, command=lambda: self.updatepin_thread(None))
        self.Save_update_pin.place(relx=0.406, rely=0.612, height=24, width=67)
        self.Save_update_pin.configure(activebackground="#ececec")
        self.Save_update_pin.configure(activeforeground="#000000")
        self.Save_update_pin.configure(background="#808040")
        self.Save_update_pin.configure(disabledforeground="#a3a3a3")
        self.Save_update_pin.configure(font="-family {Verdana} -size 9 -weight bold")
        self.Save_update_pin.configure(foreground="#ffffff")
        self.Save_update_pin.configure(highlightbackground="#d9d9d9")
        self.Save_update_pin.configure(highlightcolor="black")
        self.Save_update_pin.configure(pady="0")
        self.Save_update_pin.configure(text='''Save''')

        self.back_update_pin_1 = tk.Button(self.update_pin, command=lambda:self.show_frame(self.User_banking))
        self.back_update_pin_1.place(relx=0.696, rely=0.612, height=24, width=67)

        self.back_update_pin_1.configure(activebackground="#ececec")
        self.back_update_pin_1.configure(activeforeground="#000000")
        self.back_update_pin_1.configure(background="#804040")
        self.back_update_pin_1.configure(disabledforeground="#a3a3a3")
        self.back_update_pin_1.configure(font="-family {Verdana} -size 9 -weight bold")
        self.back_update_pin_1.configure(foreground="#ffffff")
        self.back_update_pin_1.configure(highlightbackground="#d9d9d9")
        self.back_update_pin_1.configure(highlightcolor="black")
        self.back_update_pin_1.configure(pady="0")
        self.back_update_pin_1.configure(text='''Back''')
        self.show_frame(self.Welcome_Page)

    # ----------------------RAISE FRAME METHOD-------------------------------#
    def show_frame(self, content):
        self.content = content
        self.content.tkraise()

    def backforaccountinfo(self, content):
        self.refresh()
        self.content = content
        self.content.tkraise()

    def backforstaffreg(self, content):
        self.staffregrefresh()
        self.content = content
        self.content.tkraise()

    # ----------------------STAFF LOGIN METHOD-------------------------------#
    def staff_login(self):
        username = self.Emp_Username.get()
        password = self.Emp_Password.get()
        # data = self.s.recv(1024)
        # print(bytes.decode(data))
        message = [username, password, "stafflogin"]
        self.s.send(str.encode(json.dumps(message)))

        resp = self.s.recv(1024)
        result = json.loads(bytes.decode(resp))
        print("The response after staff login")
        print(result)

        if not result:
            messagebox.showerror("Error", "Invalid username or password!")


        else:
            messagebox.showinfo("", "Login Successful!")
            text = self.Emp_Username.get()
            self.cursor.execute("SELECT name FROM azbank_staff WHERE staff_id={}".format(text))
            resp = self.cursor.fetchall()
            # print("My response")
            print(resp)
            user = str(resp[0])
            user = user.strip("',()")
            print(user)
            self.emplabel.configure(text=user)
            self.show_frame(self.Emp_dash)

    # ----------------------STAFF CREATE ACCOUNT METHOD-------------------------------#
    def staff_reg(self):

        submitOk = True
        # custid = self.Customer_ID.get()
        fname = self.First_name.get()
        fname = fname.lower()
        lname = self.Last_name.get()
        lname = lname.lower()
        age = self.Age_entry.get()
        print(age)
        newage = int(age)
        gender = self.var.get()
        print(gender)
        marital_status = self.var2.get()
        print(marital_status)
        next_of_kin = self.Next_kin_entry.get()
        address = self.Address.get()
        acc_type=self.accvar.get()
        # accno = self.Acc_Aname.get()
        # bvn = self.Acc_BVN.get()
        # amt = self.Amount.get()

        fname_pattern = "\\w+\\S"
        fname_result = re.match(fname_pattern, fname)

        if not fname_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid first name!")

        lname_pattern = "\\w+\\S"
        lname_result = re.match(lname_pattern, lname)

        if not lname_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid last name!")

        age_pattern = "\\d+"
        age_result = re.match(age_pattern, age)

        if not age_result:
            submitOk = False
            messagebox.showerror("Error", "Age must be a number!")
        # bvn_pattern = "\\d{11}"
        # bvn_result = re.match(bvn_pattern, bvn)
        #
        # if not bvn_result:
        #     submitOk = False
        #     messagebox.showerror("Error", "Invalid BVN details")

        if submitOk is False:
            # messagebox.showerror("Error", "")
            return False

        else:
            custid = random.randint(0, 1111111111)
            accno = random.randint(1000000000, 9999999999)
            bvn = random.randint(11111111111, 90000000000)
            messagebox.showinfo("Success", "Customer Registered Successfully!")
            self.cursor.execute("SELECT accountno,bvn from azbank_empusers")
            respid = self.cursor.fetchall()
            print("The respid is")
            print(respid)

            global newaccno
            global newbvn
            if accno or bvn in respid:
                newaccno = accno + 1
                newbvn = bvn + 1
            else:
                pass

            message = [custid, fname, lname, fname + lname, newaccno, newbvn, newage, gender, marital_status,
                       next_of_kin, address, acc_type,50000, "empreg"]
            print("The message")
            print(message)
            self.s.send(str.encode(json.dumps(message)))
            # data = self.s.recv(1024)
            # message_json = bytes.decode(data)
            # getter = json.loads(message_json)
            # print("The response")
            # print(getter)

    # # ----------------------VALIDATION FOR CUSTOMER LOGIN METHOD-------------------------------#
    # def custvalidate(self):
    #     time.sleep(0.2)
    #     user = self.hp_login_entry.get()
    #     password = self.hp_password_entry.get()
    #     data = self.s.recv(1024)
    #     # print(bytes.decode(data))
    #     message = [user, password, "userlogin"]
    #     self.s.send(str.encode(json.dumps(message)))
    #     resp = self.s.recv(1024)
    #     result = json.loads(bytes.decode(resp))
    #     print(result)
    #     if not result:
    #         messagebox.showerror("Error", "Invalid username or password!")
    #         Az_Bank(root)
    #     else:
    #         messagebox.showinfo("", "User Login Successful!")
    #         self.show_frame(self.User_banking)

    # ----------------------DELETE ACCOUNT METHOD-------------------------------#
    def delete_account(self):
        time.sleep(0.2)
        custid = self.del_Cust_id.get()
        accno = self.del_Acc_num.get()

        self.cursor.execute(
            "SELECT * FROM azbank_empusers WHERE customer_id='{}' AND accountno='{}'".format(custid, accno))
        answer = self.cursor.fetchone()
        print(f"answer is {answer}")
        self.cursor.execute("SELECT * FROM azbank_regusers WHERE userid='{}'".format(accno))
        answer2 = self.cursor.fetchone()
        print(f'answer2 is {answer2}')
        if answer is None:
            messagebox.showerror("Error", "User account does not exist!")
        else:
            self.cursor.execute(
                "DELETE FROM azbank_empusers WHERE customer_id = '{}' AND accountno='{}'".format(custid, accno))
            self.cursor.execute("DELETE FROM azbank_regusers WHERE userid='{}'".format(accno))
            self.cursor.execute(
                "SELECT * FROM azbank_empusers WHERE customer_id='{}' AND accountno='{}'".format(custid, accno))

            record = self.cursor.fetchone()
            self.cursor.execute("SELECT * FROM azbank_regusers WHERE userid='{}'".format(accno))
            record2 = self.cursor.fetchone()
            self.conn.commit()
            print(f"record is {record}")
            print(f"record2 is {record2}")
            if record is None and record2 is None:
                messagebox.showinfo("", "Account Successfully Deleted!")
            else:
                messagebox.showerror("", "Operation Error!")

        # message = [custid, accno, "delete"]
        # self.s.send(str.encode(json.dumps(message)))
        # resp = self.s.recv(1024)
        # result = bytes.decode(resp)
        # print(result)

        # if result == 'null':
        #     messagebox.showinfo("", "Account Successfully Deleted!")
        # elif result=="alreadydel":
        #     messagebox.showinfo("", "Account Successfully Deleted!")
        # else:
        #     messagebox.showerror("", "User Does Not Exist!")
        # result = json.loads(bytes.decode(resp))
        # print(result)
        # if answer is None and answer2 is None:
        #     messagebox.showerror("", "User Does Not Exist!")
        # else:

    # ----------------------LOAD ACCOUNT METHOD-------------------------------#
    def load_account(self):
        time.sleep(0.2)
        submitOk = True

        account_no = self.Acc_Number.get()
        newacc = int(account_no)

        amount = self.load_amount.get()
        add1 = float(amount)
        narration = "\nCredit of {} to {} on".format(amount, account_no)
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        newnarration = narration + " " + dt_string + "."

        accno_pattern = "\\d+"
        accno_result = re.match(accno_pattern, account_no)
        if not accno_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid Account Number supplied")

        amount_pattern = "\\d+"
        amount_result = re.match(amount_pattern, amount)
        if not amount_result:
            submitOk = False
            messagebox.showerror("Error", "Enter a valid amount")

        if submitOk is False:
            return False
        else:
            message = [add1, newnarration, newacc, "empload"]
            print("The message to be sent is")
            print(message)
            self.s.send(str.encode(json.dumps(message)))
            result = self.s.recv(1024)
            obtain = json.loads(bytes.decode(result))
            print("Current amount in the bank")
            print(obtain)
            messagebox.showinfo("", "Account {} loaded successfully with ₦{}!".format(account_no, amount))

    # ----------------------EMPLOYEE CHECKING CUSTOMER ACCOUNT INFO METHOD-------------------------------------------------#
    def acc_details(self):
        self.info_list.delete(1.0, tk.END)
        contain = []
        accno = self.info_Acc_Num.get()
        print(accno)
        self.cursor.execute(
            "SELECT id,customer_id,firstname,lastname,accountname,accountno,bvn,amount,narration FROM azbank_empusers where accountno='{}'".format(
                accno))
        result = self.cursor.fetchall()
        self.conn.commit()
        # message = [accno, "empinfo"]
        # self.s.send(str.encode(json.dumps(message)))
        # resp = self.s.recv(10000)
        #
        # result = json.loads(bytes.decode(resp))
        #
        # print("Result from process")
        # # print(result)

        if len(result) == 0:
            messagebox.showerror("Error", "Account number does not exist!")
        else:
            messagebox.showinfo("", "Account details successfully retrieved!")
            for k in result[0]:
                # self.info_list.insert(tk.END, f"id:{k[0]}\ncustomer id:{k[1]}\nfirstname:{k[2]}\nlastname:{k[3]}\naccountname:{k[4]}\naccountno:{k[5]}\nbvn:{k[6]}\npassword:{k[7]}\namount:{k[8]}\nstatement:{k[9]}\n")
                print(k)
                contain.append(k)
            names = ["id", "customer id", "first name", "last name", "account name", "account no", "bvn",
                     "amount", "statement"]
            j = 0
            for i in names:
                self.info_list.insert(tk.END, f"{i}:{contain[j]}\n")
                j += 1

    # ---------------UPDATE PASSWORD METHOD--------------------------
    def update_passmethod(self):
        submitOk = True
        my_shelve = shelve.open("usershelf")
        test = my_shelve.get('username')
        test = int(test)
        new_pass = self.update_new_pass_Entry1.get()
        confirm_pass = self.confirm_new_pass_Entry1_1.get()

        password_pattern = '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{4,}$'
        password_result = re.match(password_pattern, new_pass)
        if not password_result:
            print("Invalid password")
            submitOk = False
            messagebox.showerror("Error",
                                 "Password must contain at least 1 special character, 1 digit, 1 capital letter and 1 small letter!")
        elif len(new_pass) < 4:
            submitOk = False
            messagebox.showerror("Error", "Password must contain at least 4 characters!")

        elif new_pass != confirm_pass:
            submitOk = False
            messagebox.showerror("Error", "Password mismatch!")

        if submitOk is False:
            messagebox.showerror("Error", "Operation failed!")
            return False
        else:
            self.cursor.execute("UPDATE azbank_regusers SET password='{}' WHERE userid={}".format(new_pass,test))
            messagebox.showinfo("", "Account password updated successfully!")
        self.conn.commit()

        # -------------UPDATE PIN METHOD-----------------
    def update_pinmethod(self):
            submitOk = True
            my_shelve = shelve.open("usershelf")
            test = my_shelve.get('username')
            test = int(test)
            new_pin = self.update_new_pin_Entry1.get()
            confirm_pin = self.confirm_new_pin_Entry1_1.get()

            pin_pattern = "\\d{4}"
            pin_result = re.match(pin_pattern, new_pin)

            if not pin_result:
                submitOk = False
                messagebox.showerror("Error", "Invalid pin")

            elif len(new_pin) > 4:
                submitOk = False
                messagebox.showerror("Error", "Pin must be 4 digits!")

            elif new_pin != confirm_pin:
                submitOk = False
                messagebox.showerror("Error", "Pin mismatch!")

            if submitOk is False:
                messagebox.showerror("Error", "Operation failed!")
                return False
            else:
                self.cursor.execute("UPDATE azbank_regusers SET pin='{}' WHERE userid={}".format(new_pin,test))
                messagebox.showinfo("", "Account pin updated successfully!")

    # --------------------------USER LOGOUT METHOD-------------------------
    def user_logout(self):
        if messagebox.askquestion("Sign Out", "Do you want to Log out?") == "yes":
            Az_Bank(root)
            root.mainloop()

    # --------------DELETE ENTRIES FROM Employee CHECKING CUSTOMER INFO METHOD----------------------
    def refresh(self):
        self.info_list.delete(1.0, tk.END)

    # ---------------------DELETE ENTRIES IN CREATE ACCOUNT FRAME METHOD
    def staffregrefresh(self):
        self.First_name.delete(0, tk.END)
        self.Last_name.delete(0, tk.END)
        self.Age_entry.delete(0, tk.END)
        self.Next_kin_entry.delete(0, tk.END)
        self.Address.delete(0, tk.END)
        self.Male.select()
        self.Single.select()

    # --------------CHECK IF CUSTOMER ACCOUNT NO EXISTS IN EMP USERS DATABASE METHOD-----------
    def check_account_no(self):
        try:
            print("I am working")
            account_num = self.Account_Num_entry.get()
            account_num = int(account_num)
            # another_shelve = shelve.open("secondshelf", flag="n")
            # another_shelve['accountno'] = account_num
            # password=0000
            message = [account_num, "check_account"]
            self.s.send(str.encode(json.dumps(message)))
            result = self.s.recv(1024)
            response = bytes.decode(result)
            if response == "success":
                messagebox.showinfo("Success",
                                    "Account number successfully retrieved! Please update your password and pin")
                self.show_frame(self.Registration_frame)
            elif response == "failed":
                messagebox.showerror("", "Invalid response!")
            elif response == "exist":
                messagebox.showerror("Error", "Account already exists")
            print("Result from process is")
            print(response)
        except:
            messagebox.showerror("", "Invalid response!")

    # def reload(self):
    #     self.destroy
    #     self.__init__()

    # def showempframe_thread(self, event):
    #     sef_thread = threading.Thread(target=self.show_empframe)
    #     sef_thread.daemon = True
    #     sef_thread.start()

    # --------------VALIDATION FOR USER REGISTRATION-----------
    def user_reg(self):
        submitOk = True
        username = self.Username.get()
        password = self.Password.get()
        confirm = self.con_entry_Password.get()
        pin = self.Tranx_PIN.get()
        # another_shelve=shelve.open("secondshelf")
        self.cursor.execute("SELECT accountno FROM azbank_empusers WHERE accountno='{}'".format(username))
        resp = self.cursor.fetchone()
        resp = str(resp)
        resp = resp.strip("()\',")
        # print("resp is")
        # print(resp)
        # print("type of resp")
        # print(type(resp))
        # print("username is")
        # print(username)
        # print(type(username))

        password_pattern = '^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{4,}$'
        password_result = re.match(password_pattern, password)

        if not password_result:
            print("Invalid password")
            submitOk = False
            messagebox.showerror("Error",
                                 "Password must contain at least 1 special character, 1 digit, 1 capital letter and 1 small letter!")
        elif len(password) < 4:
            submitOk = False
            messagebox.showerror("Error", "Password must contain at least 4 characters!")

        elif password != confirm:
            submitOk = False
            messagebox.showerror("Error", "Password mismatch!")

        pin_pattern = "\\d{4}"
        pin_result = re.match(pin_pattern, pin)

        if not pin_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid pin")

        elif len(pin) > 4:
            submitOk = False
            messagebox.showerror("Error", "Pin must be 4 digits!")

        if submitOk is False:
            return False
        else:
            if resp == username:
                self.cursor.execute(
                    "INSERT INTO azbank_regusers(userid,password,pin) VALUES('{}','{}','{}')".format(username, password,
                                                                                                     pin))
                # result = self.cursor.fetchall()
                # print(f"result is {result}")
                self.conn.commit()
                messagebox.showinfo("", "App Account Updated Successfully!")
                self.show_frame(self.Home_Page)
            else:
                messagebox.showerror("Error", "Invalid account number")
                print("Failed transaction")

    # -----------------------USER LOGIN METHOD--------------------------
    def user_login(self):
        username = self.hp_login_entry.get()
        password = self.hp_password_entry.get()
        message = [username, password, "userlogin"]
        my_shelve = shelve.open("usershelf", flag="c")
        my_shelve['username'] = username
        self.s.send(str.encode(json.dumps(message)))
        resp = self.s.recv(1024)
        result = json.loads(bytes.decode(resp))
        print("Result is")
        print(result)
        if not result:
            messagebox.showerror("Error", "Invalid response!")

        else:
            messagebox.showinfo("", "Login Successful!")
            writing = self.hp_login_entry.get()
            writing = int(writing)
            print(writing)
            self.cursor.execute("SELECT firstname from azbank_empusers WHERE accountno={}".format(writing))
            resp = self.cursor.fetchall()
            print(resp)
            first = str(resp[0])
            first = first.strip("',()")
            self.cursor.execute("SELECT lastname from azbank_empusers WHERE accountno={}".format(writing))
            reply = self.cursor.fetchall()
            print(reply)
            last = str(reply[0])
            last = last.strip("',()")
            name = first + " " + last
            user = name.title()
            self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(writing))
            ans = self.cursor.fetchall()
            print(ans)
            bal = str(ans[0])
            bal = bal.strip("\',()")
            self.balanceamt_label.configure(text=''' ₦{}'''.format(bal))
            self.user_label.configure(text=user)
            self.show_frame(self.User_banking)
            self.conn.commit()

    # ----------------------AIRTIME RECHARGE METHOD---------------------------
    def airtime_recharge(self):
        submitOk = True

        # debit_acc = self.debitacc_TCombobox1.get()
        # debit_acc = int(debit_acc)
        my_shelve = shelve.open("usershelf")
        test = my_shelve.get('username')
        test = int(test)
        vendor = self.vendor_TCombobox2.get()
        amount = self.Airtime_Amount.get()
        thisamount = float(amount)
        phone = self.Airtime_Phone.get()
        narration = self.narration_air_Entry6.get()
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        newnarration = ''.join(e for e in narration if e.isalnum())
        altnarration = newnarration + "VTU topup to " + phone + " DR amount:" + amount + " to: " + vendor + " vendor on " + dt_string + "."

        pin = self.pin_air_Entry8.get()

        amount_pattern = '^[+-]?((\d+(\.\d+)?)|(\.\d+))$'
        amount_result = re.match(amount_pattern, amount)
        if not amount_result:
            print("Invalid amount")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid amount!")

        phone_pattern = "\\d{11}"
        phone_result = re.match(phone_pattern, phone)
        if not phone_result:
            print("Invalid phone number")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid phone number!")

        pin_pattern = "\\d{4}"
        pin_result = re.match(pin_pattern, pin)

        if not pin_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid pin")

        if submitOk is False:
            messagebox.showerror("Error", "Invalid transaction")
            return False
        else:
            message = [test, vendor, thisamount, phone, pin, "airtime"]
            self.s.send(str.encode(json.dumps(message)))
            data = self.s.recv(1024)
            answer = bytes.decode(data)
            print(f"answer is {answer}")
            if answer == "airsuccess":
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        altnarration, test))
                self.cursor.execute("SELECT amount FROM azbank_empusers where accountno={}".format(test))
                ans = self.cursor.fetchone()
                balance = str(ans[0])
                balance = balance.strip("\',()")
                self.balanceamt_label.configure(text=''' ₦{}'''.format(balance))

                messagebox.showinfo("", "Transaction successful!")
            elif answer == "airfail":
                messagebox.showerror("Error", "Invalid transaction!")
            else:
                messagebox.showerror("Error", "Invalid pin")
            self.conn.commit()
        #     self.cursor.execute("SELECT pin FROM azbank_regusers WHERE userid='{}'".format(test))
        #     resp = self.cursor.fetchone()
        #     str_resp = str(resp)
        #     str_resp = str_resp.strip("\',()")
        #     # resplist = []
        #     # for i in resp:
        #     #     item = list(i)
        #     #     resplist += item
        #     # print(strresp)
        #     # print("type of pin")
        #     # print(type(pin))
        #     # print(pin)
        #     # print("type of resplist")
        #     # print(type(resplist))
        #     # print("type of items in resplist")
        #     # print(type(resplist[0]))
        #     if pin == str_resp:
        #         self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(test))
        #         result = self.cursor.fetchone()
        #         result = str(result)
        #         result = result.strip("\',()")
        #         result = float(result)
        #         newamount = result - thisamount
        #         self.cursor.execute(
        #             "UPDATE azbank_empusers SET amount='{}',narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
        #                 newamount,
        #                 altnarration, test))
        #         self.conn.commit()
        #         messagebox.showinfo("", "Transaction successful!")
        #     else:
        #         messagebox.showerror("Error", "Invalid pin")
        my_shelve.close()

    # -------------------------------QUICK AIRTIME RECHARGE METHOD-----------------------
    def quickairtime_recharge(self):
        submitOk = True
        accountno = self.quickdebitacc.get()
        intaccountno = int(accountno)
        vendor = self.quickTCombobox2.get()
        # print(type(vendor))
        amount = self.quickAirtime_Amount.get()
        floatamount = float(amount)
        phone = self.quickAirtime_Phone.get()
        narration = self.quicknarrEntry6.get()
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        newnarration = ''.join(e for e in narration if e.isalnum())
        altnarration = newnarration + "vtu topup to " + phone + " DR amount:" + amount + " to: " + vendor + " vendor on " + dt_string + "."
        print(altnarration)
        pin = self.quickpinEntry8.get()

        accountno_pattern = "\\d{10}"
        accountno_result = re.match(accountno_pattern, accountno)
        if not accountno_result:
            submitOk = False
            messagebox.showerror("Error", "Enter a valid account number!")
        amount_pattern = '^[+-]?((\d+(\.\d+)?)|(\.\d+))$'
        amount_result = re.match(amount_pattern, amount)
        if not amount_result:
            print("Invalid amount")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid amount!")

        phone_pattern = "\\d{11}"
        phone_result = re.match(phone_pattern, phone)
        if not phone_result:
            print("Invalid phone number")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid phone number!")

        pin_pattern = "\\d{4}"
        pin_result = re.match(pin_pattern, pin)

        if not pin_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid pin")

        if submitOk is False:
            return False
        else:
            message = [intaccountno, vendor, floatamount, phone, pin, "quickairtime"]
            self.s.send(str.encode(json.dumps(message)))
            data = self.s.recv(1024)
            answer = bytes.decode(data)
            print(f"answer is {answer}")
            if answer == "quickairsuccess":
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        altnarration, accountno))

                messagebox.showinfo("", "Transaction successful!")
            elif answer == "quickairfail":
                messagebox.showerror("Error", "Invalid transaction")
            else:
                messagebox.showerror("Error", "Invalid pin")
            self.conn.commit()
            # self.cursor.execute("SELECT pin FROM azbank_regusers WHERE userid='{}'".format(intaccountno))
            # resp = self.cursor.fetchone()
            # str_resp = str(resp)
            # str_resp = str_resp.strip("\',()")
            #
            # if pin == str_resp:
            #     self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(intaccountno))
            #     result = self.cursor.fetchone()
            #     result = str(result)
            #     result = result.strip("\',()")
            #     result = float(result)
            #     newamount = result - floatamount
            #     print("new amount is")
            #     print(newamount)
            #     self.cursor.execute(
            #         "UPDATE azbank_empusers SET amount='{}',narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
            #             newamount, altnarration, intaccountno))
            #     self.conn.commit()
            #     messagebox.showinfo("", "Transaction successful!")
            # else:
            #     messagebox.showerror("Error", "Invalid pin")

    # ---------------------QUICK BILLS PAYMENT METHOD-----------------
    def quickbills_pay(self):
        submitOk = True
        vendor = self.quickVendor_combo.get()

        accountno = self.quickacc_entry.get()
        intaccountno = int(accountno)
        # beneficiary = self.quickben_Entry.get()
        amount = self.quickamount_Entry.get()
        digamount = float(amount)
        pin = self.quickpin_Entry.get()
        narration = self.quicknarration_Entry.get()
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

        newnarration = ''.join(e for e in narration if e.isalnum())
        altnarration = newnarration + " DR amount:" + amount + " on " + dt_string + "."

        amount_pattern = '^[+-]?((\d+(\.\d+)?)|(\.\d+))$'
        amount_result = re.match(amount_pattern, amount)
        if not amount_result:
            print("Invalid amount")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid amount!")

        pin_pattern = "\\d{4}"
        pin_result = re.match(pin_pattern, pin)

        if not pin_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid pin")
        if submitOk is False:
            messagebox.showerror("Error", "Invalid transaction")
            return False
        else:
            message = [intaccountno, vendor, digamount, pin, "quickbills"]
            self.s.send(str.encode(json.dumps(message)))
            data = self.s.recv(1024)
            answer = bytes.decode(data)
            print(f"answer is {answer}")
            if answer == "quickbillssuccess":
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        altnarration, accountno))

                messagebox.showinfo("", "Transaction successful!")
            elif answer == "quickbillsfail":
                messagebox.showerror("Error", "Invalid transaction")
            else:
                messagebox.showerror("Error", "Invalid pin")
            # self.cursor.execute("SELECT pin FROM azbank_regusers WHERE userid='{}'".format(intaccountno))
            # resp = self.cursor.fetchone()
            # str_resp = str(resp)
            # str_resp = str_resp.strip("\',()")
            # if pin == str_resp:
            #     self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(intaccountno))
            #     result = self.cursor.fetchone()
            #     result = str(result)
            #     result = result.strip("\',()")
            #     result = float(result)
            #     newamount = result - digamount
            #     self.cursor.execute(
            #         "UPDATE azbank_empusers SET amount={},narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
            #             newamount,
            #             altnarration, intaccountno))
            #     self.conn.commit()
            #     messagebox.showinfo("", "Transaction successful!")
            # else:
            #     messagebox.showerror("Error", "Invalid pin")
        self.conn.commit()

    # -----------------------BILLS PAYMENT METHOD---------------------------------#
    def bills_pay(self):
        submitOk = True
        my_shelve = shelve.open("usershelf")
        test = my_shelve.get('username')
        test = int(test)
        plan = self.Plan_Combo.get()
        # debitacc=self.accountno_bills_Entry.get()
        amount = self.Amount_Entry.get()
        digamount = float(amount)
        narration = self.Narration_Entry.get()
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        newnarration = ''.join(e for e in narration if e.isalnum())
        altnarration = newnarration + " DR amount:" + amount + " on " + dt_string + "."
        pin = self.Pin_Entry.get()

        amount_pattern = '^[+-]?((\d+(\.\d+)?)|(\.\d+))$'
        amount_result = re.match(amount_pattern, amount)
        if not amount_result:
            print("Invalid amount")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid amount!")

        pin_pattern = "\\d{4}"
        pin_result = re.match(pin_pattern, pin)

        if not pin_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid pin")
        if digamount <= 0.0 or submitOk is False:
            messagebox.showerror("Error", "Invalid transaction")
            return False
        else:
            message = [test, plan, digamount, pin, "bills"]
            self.s.send(str.encode(json.dumps(message)))
            data = self.s.recv(1024)
            answer = bytes.decode(data)
            print(f"answer is {answer}")
            if answer == "billssuccess":
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        altnarration, test))
                self.cursor.execute("SELECT amount FROM azbank_empusers where accountno={}".format(test))
                ans = self.cursor.fetchone()
                balance = str(ans[0])
                balance = balance.strip("\',()")
                self.balanceamt_label.configure(text=''' ₦{}'''.format(balance))
                messagebox.showinfo("", "Transaction successful!")
            elif answer == "billsfail":
                messagebox.showerror("Error", "Invalid transaction")
            else:
                messagebox.showerror("Error", "Invalid pin")
            # self.cursor.execute("SELECT pin FROM azbank_regusers WHERE userid='{}'".format(test))
            # resp = self.cursor.fetchone()
            # str_resp = str(resp)
            # str_resp = str_resp.strip("\',()")
            # if pin == str_resp:
            #     self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(test))
            #     result = self.cursor.fetchone()
            #     result = str(result)
            #     result = result.strip("\',()")
            #     result = float(result)
            #     newamount = result - digamount
            #     self.cursor.execute(
            #         "UPDATE azbank_empusers SET amount={},narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
            #             newamount, altnarration, test))
            #     self.conn.commit()
            #     messagebox.showinfo("", "Transaction successful!")
            # else:
            #     messagebox.showerror("Error", "Invalid pin")
        self.conn.commit()
        my_shelve.close()

    # ------------CUSTOMER QUICK TRANSFER METHOD-------------------------
    def quicktransfer_method(self):
        submitOk = True
        accountno = self.quickaccnoEntry1.get()
        intaccountno = int(accountno)
        print(intaccountno)
        beneficiary = self.quickbentEntry2.get()
        print(f'beneficiary is {beneficiary}')
        int_beneficiary = int(beneficiary)
        amount = self.quickamountEntry3.get()
        float_amount = float(amount)
        print(f'amount is {amount}')
        narration = self.quicknarrEntry4.get()
        narration = ''.join(e for e in narration if e.isalnum())
        pin = self.quickpinEntry5.get()
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        cred_narr = narration + " credit amount:" + amount + " " + "on " + dt_string + "."
        narration = narration + " amount:" + amount + " " + "on " + dt_string + "."

        self.cursor.execute("SELECT accountno from azbank_empusers")
        item = self.cursor.fetchall()
        tent = []
        tentlist = []
        for i in item:
            thing = list(i)
            tent += thing
        for j in tent:
            possess = int(j)
            tentlist.append(possess)
        print("tentlist is")
        print(tentlist)

        amount_pattern = '^[+-]?((\d+(\.\d+)?)|(\.\d+))$'
        amount_result = re.match(amount_pattern, amount)
        if not amount_result:
            print("Invalid amount")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid amount!")

        pin_pattern = "\\d{4}"
        pin_result = re.match(pin_pattern, pin)

        if not pin_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid pin!")

        beneficiary_pattern = "\\d{10}"
        beneficiary_result = re.match(beneficiary_pattern, beneficiary)

        if not beneficiary_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid account number!")

        accountnum_pattern = "\\d{10}"
        accountnum_result = re.match(accountnum_pattern, accountno)

        if not accountnum_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid account number!")

        if intaccountno not in tentlist or int_beneficiary not in tentlist:
            messagebox.showerror("Error", "Invalid account number or beneficiary!")
            submitOk = False

        if submitOk is False:
            return False
        else:
            message = [accountno, int_beneficiary, float_amount, pin, "quicktransfer"]
            self.s.send(str.encode(json.dumps(message)))
            data = self.s.recv(1024)
            answer = bytes.decode(data)
            print(f"answer is {answer}")
            if answer == "quicktransfersuccess":
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        narration, accountno))
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        cred_narr, int_beneficiary))
                messagebox.showinfo("", "Transaction successful!")
            elif answer == "quicktransferfail":
                messagebox.showerror("Error", "Invalid transaction")
            else:
                messagebox.showerror("Error", "Invalid pin")
            self.conn.commit()
        #     self.cursor.execute("SELECT pin FROM azbank_regusers WHERE userid='{}'".format(accountno))
        #     resp = self.cursor.fetchall()
        #     print(f"Resp is {resp}")
        #     str_resp = str(resp[0])
        #     str_resp = str_resp.strip("\',()")
        #     print(f"str_resp is {str_resp}")
        #     if pin == str_resp:
        #         result = self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(accountno))
        #         result = self.cursor.fetchall()
        #         print("result is {}".format(result))
        #         result = str(result[0])
        #         result = result.strip("\',()")
        #         result = float(result)
        #         newamount = result - float_amount
        #
        #         self.cursor.execute(
        #             "UPDATE azbank_empusers SET amount={},narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
        #                 newamount,
        #                 narration, accountno))
        #
        #         self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(int_beneficiary))
        #         amt_post = self.cursor.fetchall()
        #         amt_post = str(amt_post[0])
        #         amt_post = amt_post.strip("\',()")
        #         amt_post = float(amt_post)
        #         cred_amount = amt_post + float_amount
        #         self.cursor.execute(
        #             "UPDATE azbank_empusers SET amount={},narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
        #                 cred_amount,
        #                 cred_narr, int_beneficiary))
        #         self.conn.commit()
        #         messagebox.showinfo("", "Transaction successful!")
        #     else:
        #         messagebox.showerror("Error", "Invalid response")
        # my_shelve.close()

    # ------------------CUSTOMER TRANSFER METHOD---------------------------------------
    def transfer_method(self):
        submitOk = True
        my_shelve = shelve.open("usershelf")
        test = my_shelve.get('username')
        test = int(test)
        print("test is {}".format(test))
        beneficiary = self.accno_trans_Entry1.get()
        int_beneficiary = int(beneficiary)
        amount = self.amount_trans_Entry3.get()
        float_amount = float(amount)
        narration = self.narr_trans_Entry4.get()
        narration = ''.join(e for e in narration if e.isalnum())
        pin = self.pin_trans_Entry5.get()
        print(f"pin is {pin}")
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        cred_narr = narration + " credit amount:" + amount + " " + "on " + dt_string + "."
        narration = narration + " amount:" + amount + " " + "on " + dt_string + "."

        self.cursor.execute("SELECT accountno from azbank_empusers")
        item = self.cursor.fetchall()
        tent = []
        tentlist = []
        for i in item:
            thing = list(i)
            tent += thing
        for j in tent:
            possess = int(j)
            tentlist.append(possess)
        print(tentlist)
        amount_pattern = '^[+-]?((\d+(\.\d+)?)|(\.\d+))$'
        amount_result = re.match(amount_pattern, amount)
        if not amount_result:
            print("Invalid amount")
            submitOk = False
            messagebox.showerror("Error", "Enter a valid amount!")

        pin_pattern = "\\d{4}"
        pin_result = re.match(pin_pattern, pin)

        if not pin_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid pin!")

        beneficiary_pattern = "\\d{10}"
        beneficiary_result = re.match(beneficiary_pattern, beneficiary)

        if not beneficiary_result:
            submitOk = False
            messagebox.showerror("Error", "Invalid account number!")

        if int_beneficiary not in tentlist:
            messagebox.showerror("Error", "Invalid beneficiary!")
            submitOk = False

        if submitOk is False:
            messagebox.showerror("Error", "Invalid response!")
            return False
        else:
            message = [test, int_beneficiary, float_amount, pin, "transfer"]
            self.s.send(str.encode(json.dumps(message)))
            data = self.s.recv(1024)
            answer = bytes.decode(data)
            print(f"answer is {answer}")
            if answer == "transfersuccess":
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        narration, test))
                self.cursor.execute(
                    "UPDATE azbank_empusers SET narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
                        cred_narr, int_beneficiary))
                self.cursor.execute("SELECT amount FROM azbank_empusers where accountno={}".format(test))
                ans = self.cursor.fetchone()
                balance = str(ans[0])
                balance = balance.strip("\',()")
                self.balanceamt_label.configure(text=''' ₦{}'''.format(balance))
                messagebox.showinfo("", "Transaction successful!")
            elif answer == "transferfail":
                messagebox.showerror("Error", "Invalid transaction")
            else:
                messagebox.showerror("Error", "Invalid pin")
            self.conn.commit()
            # self.cursor.execute("SELECT pin FROM azbank_regusers WHERE userid='{}'".format(test))
            # resp = self.cursor.fetchall()
            # print(f"Resp is {resp}")
            # str_resp = str(resp[0])
            # str_resp = str_resp.strip("\',()")
            # print(f"str_resp is {str_resp}")
            # if pin == str_resp:
            #     result = self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(test))
            #     result = self.cursor.fetchall()
            #     print("result is {}".format(result))
            #     result = str(result[0])
            #     result = result.strip("\',()")
            #     result = float(result)
            #     newamount = result - float_amount
            #     print(f"new amount is {newamount}")
            #     print(f"narration is {narration}")
            #     print(f"test is {test}")
            #     self.cursor.execute(
            #         "UPDATE azbank_empusers SET amount={},narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
            #             newamount,
            #             narration, test))
            #
            #     self.cursor.execute("SELECT amount from azbank_empusers WHERE accountno={}".format(int_beneficiary))
            #     amt_post = self.cursor.fetchall()
            #     amt_post = str(amt_post[0])
            #     amt_post = amt_post.strip("\',()")
            #     amt_post = float(amt_post)
            #     cred_amount = amt_post + float_amount
            #     self.cursor.execute(
            #         "UPDATE azbank_empusers SET amount={},narration=CONCAT(narration,'\n{}') WHERE accountno='{}'".format(
            #             cred_amount,
            #             cred_narr, int_beneficiary))
            #     self.conn.commit()
            #     messagebox.showinfo("", "Transaction successful!")
            # else:
            #     messagebox.showerror("Error", "Invalid response")
        my_shelve.close()

    # ------------------------------CUSTOMER ACCOUNT STATEMENT METHOD--------------------------
    def acc_statement_method(self):
        self.dispinfo_list.delete(1.0, tk.END)
        my_shelve = shelve.open("usershelf")
        test = my_shelve.get('username')
        test = int(test)
        # self.cursor.execute("SELECT accoutno from azbank_empusers")
        # ans=self.cursor.fetchall()
        # colist = []
        # cointlist = [] #the one I'm using
        # for i in ans:
        #     thing = list(i)
        #     colist += thing
        # for j in colist:
        #     possess = int(j)
        #     cointlist.append(possess)
        # self.cursor.execute("SELECT accoutno from azbank_empusers WHERE accountno={}".format(test))
        # ans2=self.cursor.fetchone()
        # ans2 = str(ans2)
        # ans2 = ans2.strip("\',()")
        # ans2 = int(ans2)
        # if ans2 in cointlist:
        self.cursor.execute("SELECT narration from azbank_empusers WHERE accountno={}".format(test))
        reply = self.cursor.fetchall()
        surr = []
        for k in reply[0]:
            print(k)
            surr.append(k)

        for i in surr:
            self.dispinfo_list.insert(tk.END, i)

        self.show_frame(self.dispAccount_Info_frame)
        # else:
        #     messagebox.showerror("Invalid account number")
        my_shelve.close()

    # def close_shelve_user_logout(self):
    #     my_shelve.close()
    #     if messagebox.askquestion("Sign Out", "Do you want to Log out?") == "yes":
    #         Az_Bank(root)
    #         root.mainloop()

    # --------------SAVING CUSTOMER ACCOUNT STATEMENT TO TXT FILE------------------
    def savecusttofile(self):
        mystr = self.dispinfo_list.get(1.0, tk.END)
        files = [
            ('All files', '*.*'),
            ('Text files', '*.txt')
        ]
        fob = asksaveasfile(filetypes=files, defaultextension=files)
        try:
            fob.write(mystr)
            fob.close()
            messagebox.showinfo("", "Account Statement successfully saved!")
        except:
            messagebox.showerror("", "Save operation cancelled!")

    def saveas(self):
        mystr = self.info_list.get(1.0, tk.END)
        files = [
            ('All files', '*.*'),
            ('Text files', '*.txt')
        ]
        fob = asksaveasfile(filetypes=files, defaultextension=files)
        try:
            fob.write(mystr)
            fob.close()
            messagebox.showinfo("", "Account Statement successfully saved!")
        except:
            messagebox.showerror("", "Save operation cancelled!")

    # ----------------------STAFF LOGIN THREAD-------------------------------#
    def stafflogin_thread(self, event):
        staff_thread = threading.Thread(target=self.staff_login)
        staff_thread.daemon = True
        staff_thread.start()

    # ----------------------STAFF ACCOUNT CREATION THREAD-------------------------------#
    def staffreg_thread(self, event):
        sac_thread = threading.Thread(target=self.staff_reg)
        sac_thread.daemon = True
        sac_thread.start()

    # ----------------------VALIDATION FOR CUSTOMER LOGIN THREAD-------------------------------#
    def custvalidate_thread(self, event):
        cv_thread = threading.Thread(target=self.custvalidate)
        cv_thread.daemon = True
        cv_thread.start()

    # ----------------------DELETE ACCOUNT THREAD-------------------------------------------------#
    def deleteaccount_thread(self, event):
        deletion_thread = threading.Thread(target=self.delete_account)
        deletion_thread.daemon = True
        deletion_thread.start()

    # ----------------------LOAD ACCOUNT THREAD-------------------------------------------------#
    def loadaccount_thread(self, event):
        load_thread = threading.Thread(target=self.load_account)
        load_thread.daemon = True
        load_thread.start()

    # ----------------------EMPLOYEE CHECKING CUSTOMER ACCOUNT INFO THREAD-------------------------------------------------#
    def accdetails_thread(self, event):
        ad_thread = threading.Thread(target=self.acc_details)
        ad_thread.daemon = True
        ad_thread.start()

    def savecusttofile_thread(self, event):
        scf_thread = threading.Thread(target=self.savecusttofile)
        scf_thread.daemon = True
        scf_thread.start()

    def saveasthread(self, event):
        sa_thread = threading.Thread(target=self.saveas)
        sa_thread.daemon = True
        sa_thread.start()

    def updatepass_thread(self, event):
        pass_thread = threading.Thread(target=self.update_passmethod)
        pass_thread.daemon = True
        pass_thread.start()

    def updatepin_thread(self, event):
        pin_thread = threading.Thread(target=self.update_pinmethod)
        pin_thread.daemon = True
        pin_thread.start()

    # --------------CHECK IF CUSTOMER ACCOUNT NO EXISTS IN EMP USERS DATABASE THREAD-----------
    def checkaccount_thread(self, event):
        ca_thread = threading.Thread(target=self.check_account_no)
        ca_thread.daemon = True
        ca_thread.start()

    # --------------USER REGISTRATION THREAD------------------------------
    def userreg_thread(self, event):
        reg_thread = threading.Thread(target=self.user_reg)
        reg_thread.daemon = True
        reg_thread.start()

    # ----------------USER LOGIN THREAD------------------------
    def userlogin_thread(self, event):
        login_thread = threading.Thread(target=self.user_login)
        login_thread.daemon = True
        login_thread.start()

    # --------------AIRTIME RECHARGE THREAD-----------------------
    def airtimerecharge_thread(self, event):
        airtime_thread = threading.Thread(target=self.airtime_recharge)
        airtime_thread.daemon = True
        airtime_thread.start()

    # -----------------CUSTOMER QUICK AIRTIME RECHARGE THREAD-----------------------
    def quickairtimerecharge_thread(self, event):
        quickair_thread = threading.Thread(target=self.quickairtime_recharge)
        quickair_thread.daemon = True
        quickair_thread.start()

    # --------------------CUSTOMER BILL PAYMENT THREAD----------------
    def billpay_thread(self, event):
        bill_thread = threading.Thread(target=self.bills_pay)
        bill_thread.daemon = True
        bill_thread.start()

    # ---------------------CUSTOMER TRANSFER THREAD------------------------
    def transfer_thread(self, event):
        trans_thread = threading.Thread(target=self.transfer_method)
        trans_thread.daemon = True
        trans_thread.start()

    # --------------------CUSTOMER STATEMENT THREAD------------------
    def statement_thread(self, event):
        stat_thread = threading.Thread(target=self.acc_statement_method())
        stat_thread.daemon = True
        stat_thread.start()

    # --------------------CUSTOMER QUICK BILL PAYMENT THREAD----------------
    def quickbillspay_thread(self, event):
        quickbills_thread = threading.Thread(target=self.quickbills_pay)
        quickbills_thread.daemon = True
        quickbills_thread.start()

    # -------------CUSTOMER QUICK TRANSFER THREAD-----------------------------
    def quicktransfer_thread(self, event):
        qt_thread = threading.Thread(target=self.quicktransfer_method)
        qt_thread.daemon = True
        qt_thread.start()


if __name__ == '__main__':
    vp_start_gui()
